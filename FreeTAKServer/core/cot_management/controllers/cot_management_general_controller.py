#######################################################
#
# core_name_general_controller.py
# Python implementation of the Class CoreNameGeneralController
# Generated by Enterprise Architect
# Created on:      16-Dec-2022 10:56:05 AM
# Original author: Giu Platania
#
#######################################################
from digitalpy.core.main.controller import Controller
from digitalpy.core.zmanager.request import Request
from digitalpy.core.zmanager.response import Response
from digitalpy.core.zmanager.action_mapper import ActionMapper
from digitalpy.core.digipy_configuration.configuration import Configuration
from .cot_management_private_cot_controller import CoTManagementPrivateCoTController

#  Placeholder Class to temporarily define COTDatabase
class COTDatabase:
    pass  # TODO: Implement this class

#  Placeholder Class to temporarily define COTRecord
class COTRecord:
    pass  # TODO: Implement this class

#  Placeholder Class to temporarily define DropPoint
class DropPoint:
    pass  # TODO: Implement this class


class InvalidInputError(Exception):
    pass  # TODO: Implement this exception


#  Placeholder Class to temporarily define MedevacRequest
class MedevacRequest:
    pass  # TODO: Implement this class

def send_medevac_request(medevac_request):
    pass  # TODO: Implement this function

from ..configuration.cot_management_constants import (
    BASE_OBJECT,
    BASE_OBJECT_NAME,
)
class COTManagementGeneralController(Controller):
    """this controller is responsible for general or fundamental component functionality"""
    def __init__(
        self,
        request: Request,
        response: Response,
        sync_action_mapper: ActionMapper,
        configuration: Configuration,
    ) -> None:
        super().__init__(request, response, sync_action_mapper, configuration)
        self.private_cot_controller = CoTManagementPrivateCoTController(request, response, sync_action_mapper, configuration)

    def cot_record_in_db(self, cot_record: COTRecord):
        """
        Inserts a new COT record into the database.
        :param cot_record: The COT record to be inserted.
        """
        self.cot_db.insert_cot_record(cot_record)

    def build_drop_point_object(self, cot_record: COTRecord):
        """
        Builds a drop point object from the given COT record.
        :param cot_record: The COT record to be used to build the drop point object.
        :return: The drop point object.
        """
        drop_point = DropPoint()
        drop_point.latitude = cot_record.latitude
        drop_point.longitude = cot_record.longitude
        drop_point.altitude = cot_record.altitude
        return drop_point

    def medevac_send(self, cot_record: COTRecord, drop_point: DropPoint):
        """
        Sends a medevac request with the given COT record and drop point.
        :param cot_record: The COT record to be used in the medevac request.
        :param drop_point: The drop point to be used in the medevac request.
        """
        medevac_request = MedevacRequest(cot_record=cot_record, drop_point=drop_point)
        send_medevac_request(medevac_request)  # send the medevac request

    def medevac_receive(self, medevac_request: MedevacRequest):
        """
        Receives a medevac request and processes it.
        :param medevac_request: The medevac request to be processed.
        """
        cot_record = medevac_request.cot_record
        drop_point = medevac_request.drop_point
        # process the medevac request...

    def manage_presence(self, presence_data: dict):
        """Updates the presence information for a specific COT in the system.

        Args:
            presence_data (dict): A dictionary containing the updated presence information for the COT.
        """
        # Validate the presence data
        if not self._is_valid_presence_data(presence_data):
            raise InvalidInputError("Invalid presence data provided.")

        # Update the presence information in the database
        self.db.update_cot_presence(presence_data)
    def initialize(self, request: Request, response: Response):
        super().initialize(request, response)
        self.private_cot_controller.initialize(request, response)

    def share_privately(self, cot_id: str, recipient_id: str):
        """Shares a specific COT privately with another user.

        Args:
            cot_id (str): The ID of the COT to be shared.
            recipient_id (str): The ID of the user to receive the shared COT.
        """
        # Check if the recipient is a valid user
        if not self.user_manager.is_valid_user(recipient_id):
            raise ValueError("Invalid recipient provided.")

        # Check if the COT exists and is owned by the current user
        cot = self.db.get_cot(cot_id)
        if cot is None or cot.owner_id != self.current_user.id:
            raise ValueError("Invalid COT provided.")

        # Share the COT privately with the recipient
        self.db.add_cot_to_user(cot_id, recipient_id)

    def broadcast(self, cot_id: str):
        """Broadcasts a specific COT to all users in the system.

        Args:
            cot_id (str): The ID of the COT to be broadcasted.
        """
        # Check if the COT exists and is owned by the current user
        cot = self.db.get_cot(cot_id)
        if cot is None or cot.owner != self.current_user:
            raise ValueError("Invalid COT ID or unauthorized access.")
        # Create a broadcast message with the COT data
        message = {"type": "cot_broadcast", "cot": cot.to_dict()}
        self.messaging.broadcast(message)

    def cot_broadcast(self):
        # retrieve the COT message from the request values
        cot_message = self.request.get_value("cot_message")
        # broadcast the COT message to all registered listeners
        self.broadcast(cot_message)
    
    def handle_default_cot(self, config_loader, **kwargs):
        """forward cots without a distinct handler
        """
        self.request.set_value("object_class_name", BASE_OBJECT_NAME)

        configuration = config_loader.find_configuration(BASE_OBJECT)

        self.request.set_value("configuration", configuration)

        self.request.set_value(
            "source_format", self.request.get_value("source_format")
        )
        self.request.set_value("target_format", "node")

        response = self.execute_sub_action("CreateNode")

        self.request.set_value("model_object", response.get_value("model_object"))

        response = self.execute_sub_action("DictToNode")

        for key, value in response.get_values().items():
            self.response.set_value(key, value)

        self.request.set_value('message', response.get_value("model_object"))
        # Serializer called by service manager requires the message value
        self.response.set_value('message', [response.get_value("model_object")])
        recipients = self.private_cot_controller.get_recipients(response.get_value("model_object"))
        self.request.set_value('recipients', recipients)

        # validate the users in the recipients list
        response = self.execute_sub_action("ValidateUsers")

        for key, value in response.get_values().items():
            self.response.set_value(key, value)
        
        self.response.set_action("publish")
