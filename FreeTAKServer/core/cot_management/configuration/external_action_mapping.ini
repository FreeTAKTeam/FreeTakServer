[actionmapping]
; deal with the case of a new connection, this will return all repeated
; messages for which the user is authorized
; Request 
;  action: Connection
;  context: Repeater
;  values:
;    connection (Connection): the connection object of the new connection
; Response values:
;  next action: publish
;  context: repeater
;  values:
;    message (List[Node]): a list of node objects representing repeated messages
?Repeater?Connection = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.connection
; get all the repeated messages
; Request 
;  action: GetRepeatedMessages
;  context: None
;  values:
;
; Response values:
;  next action: GetRepeatedMessages
;  context: None
;  TODO: standardize when and where request values are coppied to response
;  values: (copy's all request values to response)
;    message (List[Node]): a list of node objects representing repeated messages
??GetRepeatedMessages = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.get_repeated_messages
; add a message to be repeated
; Request 
;  action: CreateRepeatedMessage
;  context: None
;  values:
;    message (List[Event]): a list of events to be added to repeated messages.
; Response values:
;  next action: CreateRepeatedMessage
;  context: None
;  TODO: standardize when and where request values are coppied to response
;  values: (copy's all request values to response)
;    success (boolean): whether the operation succeeded
??CreateRepeatedMessage = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.create_repeated_message
; delete a repeated message
; Request 
;  action: DeleteRepeatedMessage
;  context: None
;  values:
;    ids (List[str]): a list of object ids of repeated messages to be deleted
; Response values:
;  next action: DeleteRepeatedMessage
;  context: None
;  values:
;    success (boolean): whether the operation succeeded
??DeleteRepeatedMessage = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.delete_repeated_message
; create a new geo object
; Request 
;  action: CreateGeoObject
;  context: None
;  values:
;    None
; Response values:
;  next action: CreateNode
;  context: Repeater
;  values:
;    object_class_name (str): the root object class used for model instantiation. Usualy Event.
;    configuration (Configuration): the configuration defining the classes composing a geo-object
??CreateGeoObject = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.create_geo_object
; create a message which deletes geoobject from the client device
; Request 
;  action: CreateDeleteGeoObject
;  context: None
;  values:
;    None
; Response values:
;  next action: CreateNode
;  context: Repeater
;  values:
;    object_class_name (str): the root object class used for model instantiation. Usualy Event.
;    configuration (Configuration): the configuration defining the classes composing a geo-object delete
??DeleteGeoObject = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.delete_geo_object

; this action is responsible for parsing and re-sending generic XML CoT's
; Request 
;  context: XMLCoT
;  action: None
;  values:
;    dictionary: dictionary of CoT
; Response:
;  values:
;    model_object (Node): an CoTManager node to be persisted
?XMLCoT? = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.default_cot_processor

; this action is responsible for determining the type of a given CoT
; Request 
;  action: GetCoTType
;  values:
;    cot_dict (dict): the cot in dictionary format
; Response:
;  values:
;    emergencies (List[Node]): a list of node objects representing persisted CoTManager objects
??GetCoTType = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.get_cot_type

[CotManagement]
__class = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement

[Request]
__class = digitalpy.core.zmanager.impl.default_request.DefaultRequest

[ActionMapper]
__class = digitalpy.core.zmanager.impl.default_action_mapper.DefaultActionMapper

[event_manager]
__class = digitalpy.core.main.impl.default_event_manager.DefaultEventManager

[Response]
__class = digitalpy.core.zmanager.impl.default_response.DefaultResponse