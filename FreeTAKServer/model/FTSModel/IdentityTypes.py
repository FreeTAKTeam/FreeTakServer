from FreeTAKServer.model.FTSModel.fts_protocol_object import FTSProtocolObject
#######################################################
#
# IdentityTypes.py
# Python implementation of the Class IdentityTypes
# Generated by Enterprise Architect
# Created on(FTSProtocolObject):    11-Feb-2020 11(FTSProtocolObject):08(FTSProtocolObject):08 AM
# Original author: Corvo
#
#######################################################


class IdentityTypes(FTSProtocolObject):
    # default constructor    def __init__(self,):

    # pending
    pending = "p"
    # pending getter

    def getpending(self,):
        return self.pending

    # pending setter
    def setpending(self, pending=0):
        self.pending = pending

    # unknown
    unknown = "u"
    # unknown getter

    def getunknown(self,):
        return self.unknown

    # unknown setter
    def setunknown(self, unknown=0):
        self.unknown = unknown

    # friend
    friend = "f"
    # friend getter

    def getfriend(self,):
        return self.friend

    # friend setter
    def setfriend(self, friend=0):
        self.friend = friend

    neutral = "n"
    # neutral getter

    def getneutral(self,):
        return self.neutral

    # neutral setter
    def setneutral(self, neutral=0):
        self.neutral = neutral

    hostile = "h"
    # hostile getter

    def gethostile(self,):
        return self.hostile

    # hostile setter
    def sethostile(self, hostile=0):
        self.hostile = hostile

    assumedfriend = "a"
    # assumed-friend getter

    def getassumedfriend(self,):
        return self.assumedfriend

    # assumed-friend setter
    def setassumedfriend(self, assumedfriend=0):
        self.assumedfriend = assumedfriend

    suspect = "s"
    # suspect getter

    def getsuspect(self,):
        return self.suspect

    # suspect setter
    def setsuspect(self, suspect=0):
        self.suspect = suspect

    joker = "j"
    # joker getter

    def getjoker(self,):
        return self.joker

    # joker setter
    def setjoker(self, joker=0):
        self.joker = joker

    faker = "f"
    # faker getter

    def getfaker(self,):
        return self.faker

    # faker setter
    def setfaker(self, faker=0):
        self.faker = faker
