# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.crl import Crl  # noqa: F401,E501
from swagger_server import util


class Tls(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, crl: List[Crl]=None, keystore: str=None, keystore_file: str=None, keystore_pass: str=None, truststore: str=None, truststore_file: str=None, truststore_pass: str=None, context: str=None, keymanager: str=None, allow128_cipher: bool=None, allow_non_suite_b: bool=None, enable_ocsp: bool=None, responder_url: str=None):  # noqa: E501
        """Tls - a model defined in Swagger

        :param crl: The crl of this Tls.  # noqa: E501
        :type crl: List[Crl]
        :param keystore: The keystore of this Tls.  # noqa: E501
        :type keystore: str
        :param keystore_file: The keystore_file of this Tls.  # noqa: E501
        :type keystore_file: str
        :param keystore_pass: The keystore_pass of this Tls.  # noqa: E501
        :type keystore_pass: str
        :param truststore: The truststore of this Tls.  # noqa: E501
        :type truststore: str
        :param truststore_file: The truststore_file of this Tls.  # noqa: E501
        :type truststore_file: str
        :param truststore_pass: The truststore_pass of this Tls.  # noqa: E501
        :type truststore_pass: str
        :param context: The context of this Tls.  # noqa: E501
        :type context: str
        :param keymanager: The keymanager of this Tls.  # noqa: E501
        :type keymanager: str
        :param allow128_cipher: The allow128_cipher of this Tls.  # noqa: E501
        :type allow128_cipher: bool
        :param allow_non_suite_b: The allow_non_suite_b of this Tls.  # noqa: E501
        :type allow_non_suite_b: bool
        :param enable_ocsp: The enable_ocsp of this Tls.  # noqa: E501
        :type enable_ocsp: bool
        :param responder_url: The responder_url of this Tls.  # noqa: E501
        :type responder_url: str
        """
        self.swagger_types = {
            'crl': List[Crl],
            'keystore': str,
            'keystore_file': str,
            'keystore_pass': str,
            'truststore': str,
            'truststore_file': str,
            'truststore_pass': str,
            'context': str,
            'keymanager': str,
            'allow128_cipher': bool,
            'allow_non_suite_b': bool,
            'enable_ocsp': bool,
            'responder_url': str
        }

        self.attribute_map = {
            'crl': 'crl',
            'keystore': 'keystore',
            'keystore_file': 'keystoreFile',
            'keystore_pass': 'keystorePass',
            'truststore': 'truststore',
            'truststore_file': 'truststoreFile',
            'truststore_pass': 'truststorePass',
            'context': 'context',
            'keymanager': 'keymanager',
            'allow128_cipher': 'allow128Cipher',
            'allow_non_suite_b': 'allowNonSuiteB',
            'enable_ocsp': 'enableOCSP',
            'responder_url': 'responderUrl'
        }
        self._crl = crl
        self._keystore = keystore
        self._keystore_file = keystore_file
        self._keystore_pass = keystore_pass
        self._truststore = truststore
        self._truststore_file = truststore_file
        self._truststore_pass = truststore_pass
        self._context = context
        self._keymanager = keymanager
        self._allow128_cipher = allow128_cipher
        self._allow_non_suite_b = allow_non_suite_b
        self._enable_ocsp = enable_ocsp
        self._responder_url = responder_url

    @classmethod
    def from_dict(cls, dikt) -> 'Tls':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tls of this Tls.  # noqa: E501
        :rtype: Tls
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crl(self) -> List[Crl]:
        """Gets the crl of this Tls.


        :return: The crl of this Tls.
        :rtype: List[Crl]
        """
        return self._crl

    @crl.setter
    def crl(self, crl: List[Crl]):
        """Sets the crl of this Tls.


        :param crl: The crl of this Tls.
        :type crl: List[Crl]
        """

        self._crl = crl

    @property
    def keystore(self) -> str:
        """Gets the keystore of this Tls.


        :return: The keystore of this Tls.
        :rtype: str
        """
        return self._keystore

    @keystore.setter
    def keystore(self, keystore: str):
        """Sets the keystore of this Tls.


        :param keystore: The keystore of this Tls.
        :type keystore: str
        """

        self._keystore = keystore

    @property
    def keystore_file(self) -> str:
        """Gets the keystore_file of this Tls.


        :return: The keystore_file of this Tls.
        :rtype: str
        """
        return self._keystore_file

    @keystore_file.setter
    def keystore_file(self, keystore_file: str):
        """Sets the keystore_file of this Tls.


        :param keystore_file: The keystore_file of this Tls.
        :type keystore_file: str
        """

        self._keystore_file = keystore_file

    @property
    def keystore_pass(self) -> str:
        """Gets the keystore_pass of this Tls.


        :return: The keystore_pass of this Tls.
        :rtype: str
        """
        return self._keystore_pass

    @keystore_pass.setter
    def keystore_pass(self, keystore_pass: str):
        """Sets the keystore_pass of this Tls.


        :param keystore_pass: The keystore_pass of this Tls.
        :type keystore_pass: str
        """

        self._keystore_pass = keystore_pass

    @property
    def truststore(self) -> str:
        """Gets the truststore of this Tls.


        :return: The truststore of this Tls.
        :rtype: str
        """
        return self._truststore

    @truststore.setter
    def truststore(self, truststore: str):
        """Sets the truststore of this Tls.


        :param truststore: The truststore of this Tls.
        :type truststore: str
        """

        self._truststore = truststore

    @property
    def truststore_file(self) -> str:
        """Gets the truststore_file of this Tls.


        :return: The truststore_file of this Tls.
        :rtype: str
        """
        return self._truststore_file

    @truststore_file.setter
    def truststore_file(self, truststore_file: str):
        """Sets the truststore_file of this Tls.


        :param truststore_file: The truststore_file of this Tls.
        :type truststore_file: str
        """

        self._truststore_file = truststore_file

    @property
    def truststore_pass(self) -> str:
        """Gets the truststore_pass of this Tls.


        :return: The truststore_pass of this Tls.
        :rtype: str
        """
        return self._truststore_pass

    @truststore_pass.setter
    def truststore_pass(self, truststore_pass: str):
        """Sets the truststore_pass of this Tls.


        :param truststore_pass: The truststore_pass of this Tls.
        :type truststore_pass: str
        """

        self._truststore_pass = truststore_pass

    @property
    def context(self) -> str:
        """Gets the context of this Tls.


        :return: The context of this Tls.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context: str):
        """Sets the context of this Tls.


        :param context: The context of this Tls.
        :type context: str
        """

        self._context = context

    @property
    def keymanager(self) -> str:
        """Gets the keymanager of this Tls.


        :return: The keymanager of this Tls.
        :rtype: str
        """
        return self._keymanager

    @keymanager.setter
    def keymanager(self, keymanager: str):
        """Sets the keymanager of this Tls.


        :param keymanager: The keymanager of this Tls.
        :type keymanager: str
        """

        self._keymanager = keymanager

    @property
    def allow128_cipher(self) -> bool:
        """Gets the allow128_cipher of this Tls.


        :return: The allow128_cipher of this Tls.
        :rtype: bool
        """
        return self._allow128_cipher

    @allow128_cipher.setter
    def allow128_cipher(self, allow128_cipher: bool):
        """Sets the allow128_cipher of this Tls.


        :param allow128_cipher: The allow128_cipher of this Tls.
        :type allow128_cipher: bool
        """

        self._allow128_cipher = allow128_cipher

    @property
    def allow_non_suite_b(self) -> bool:
        """Gets the allow_non_suite_b of this Tls.


        :return: The allow_non_suite_b of this Tls.
        :rtype: bool
        """
        return self._allow_non_suite_b

    @allow_non_suite_b.setter
    def allow_non_suite_b(self, allow_non_suite_b: bool):
        """Sets the allow_non_suite_b of this Tls.


        :param allow_non_suite_b: The allow_non_suite_b of this Tls.
        :type allow_non_suite_b: bool
        """

        self._allow_non_suite_b = allow_non_suite_b

    @property
    def enable_ocsp(self) -> bool:
        """Gets the enable_ocsp of this Tls.


        :return: The enable_ocsp of this Tls.
        :rtype: bool
        """
        return self._enable_ocsp

    @enable_ocsp.setter
    def enable_ocsp(self, enable_ocsp: bool):
        """Sets the enable_ocsp of this Tls.


        :param enable_ocsp: The enable_ocsp of this Tls.
        :type enable_ocsp: bool
        """

        self._enable_ocsp = enable_ocsp

    @property
    def responder_url(self) -> str:
        """Gets the responder_url of this Tls.


        :return: The responder_url of this Tls.
        :rtype: str
        """
        return self._responder_url

    @responder_url.setter
    def responder_url(self, responder_url: str):
        """Sets the responder_url of this Tls.


        :param responder_url: The responder_url of this Tls.
        :type responder_url: str
        """

        self._responder_url = responder_url
