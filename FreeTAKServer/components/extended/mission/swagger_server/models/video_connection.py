# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.feed_v2 import FeedV2  # noqa: F401,E501
from swagger_server import util


class VideoConnection(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active: bool=None, alias: str=None, thumbnail: str=None, classification: str=None, feeds: List[FeedV2]=None, uuid: str=None):  # noqa: E501
        """VideoConnection - a model defined in Swagger

        :param active: The active of this VideoConnection.  # noqa: E501
        :type active: bool
        :param alias: The alias of this VideoConnection.  # noqa: E501
        :type alias: str
        :param thumbnail: The thumbnail of this VideoConnection.  # noqa: E501
        :type thumbnail: str
        :param classification: The classification of this VideoConnection.  # noqa: E501
        :type classification: str
        :param feeds: The feeds of this VideoConnection.  # noqa: E501
        :type feeds: List[FeedV2]
        :param uuid: The uuid of this VideoConnection.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'active': bool,
            'alias': str,
            'thumbnail': str,
            'classification': str,
            'feeds': List[FeedV2],
            'uuid': str
        }

        self.attribute_map = {
            'active': 'active',
            'alias': 'alias',
            'thumbnail': 'thumbnail',
            'classification': 'classification',
            'feeds': 'feeds',
            'uuid': 'uuid'
        }
        self._active = active
        self._alias = alias
        self._thumbnail = thumbnail
        self._classification = classification
        self._feeds = feeds
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'VideoConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VideoConnection of this VideoConnection.  # noqa: E501
        :rtype: VideoConnection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this VideoConnection.


        :return: The active of this VideoConnection.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this VideoConnection.


        :param active: The active of this VideoConnection.
        :type active: bool
        """

        self._active = active

    @property
    def alias(self) -> str:
        """Gets the alias of this VideoConnection.


        :return: The alias of this VideoConnection.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias: str):
        """Sets the alias of this VideoConnection.


        :param alias: The alias of this VideoConnection.
        :type alias: str
        """

        self._alias = alias

    @property
    def thumbnail(self) -> str:
        """Gets the thumbnail of this VideoConnection.


        :return: The thumbnail of this VideoConnection.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail: str):
        """Sets the thumbnail of this VideoConnection.


        :param thumbnail: The thumbnail of this VideoConnection.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def classification(self) -> str:
        """Gets the classification of this VideoConnection.


        :return: The classification of this VideoConnection.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification: str):
        """Sets the classification of this VideoConnection.


        :param classification: The classification of this VideoConnection.
        :type classification: str
        """

        self._classification = classification

    @property
    def feeds(self) -> List[FeedV2]:
        """Gets the feeds of this VideoConnection.


        :return: The feeds of this VideoConnection.
        :rtype: List[FeedV2]
        """
        return self._feeds

    @feeds.setter
    def feeds(self, feeds: List[FeedV2]):
        """Sets the feeds of this VideoConnection.


        :param feeds: The feeds of this VideoConnection.
        :type feeds: List[FeedV2]
        """

        self._feeds = feeds

    @property
    def uuid(self) -> str:
        """Gets the uuid of this VideoConnection.


        :return: The uuid of this VideoConnection.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this VideoConnection.


        :param uuid: The uuid of this VideoConnection.
        :type uuid: str
        """

        self._uuid = uuid
