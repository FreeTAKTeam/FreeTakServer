# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Group(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, direction: str=None, created: datetime=None, type: str=None, bitpos: int=None, active: bool=None, description: str=None):  # noqa: E501
        """Group - a model defined in Swagger

        :param name: The name of this Group.  # noqa: E501
        :type name: str
        :param direction: The direction of this Group.  # noqa: E501
        :type direction: str
        :param created: The created of this Group.  # noqa: E501
        :type created: datetime
        :param type: The type of this Group.  # noqa: E501
        :type type: str
        :param bitpos: The bitpos of this Group.  # noqa: E501
        :type bitpos: int
        :param active: The active of this Group.  # noqa: E501
        :type active: bool
        :param description: The description of this Group.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'name': str,
            'direction': str,
            'created': datetime,
            'type': str,
            'bitpos': int,
            'active': bool,
            'description': str
        }

        self.attribute_map = {
            'name': 'name',
            'direction': 'direction',
            'created': 'created',
            'type': 'type',
            'bitpos': 'bitpos',
            'active': 'active',
            'description': 'description'
        }
        self._name = name
        self._direction = direction
        self._created = created
        self._type = type
        self._bitpos = bitpos
        self._active = active
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Group of this Group.  # noqa: E501
        :rtype: Group
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Group.


        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Group.


        :param name: The name of this Group.
        :type name: str
        """

        self._name = name

    @property
    def direction(self) -> str:
        """Gets the direction of this Group.


        :return: The direction of this Group.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str):
        """Sets the direction of this Group.


        :param direction: The direction of this Group.
        :type direction: str
        """
        allowed_values = ["IN", "OUT"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def created(self) -> datetime:
        """Gets the created of this Group.


        :return: The created of this Group.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this Group.


        :param created: The created of this Group.
        :type created: datetime
        """

        self._created = created

    @property
    def type(self) -> str:
        """Gets the type of this Group.


        :return: The type of this Group.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Group.


        :param type: The type of this Group.
        :type type: str
        """
        allowed_values = ["LDAP", "SYSTEM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def bitpos(self) -> int:
        """Gets the bitpos of this Group.


        :return: The bitpos of this Group.
        :rtype: int
        """
        return self._bitpos

    @bitpos.setter
    def bitpos(self, bitpos: int):
        """Sets the bitpos of this Group.


        :param bitpos: The bitpos of this Group.
        :type bitpos: int
        """

        self._bitpos = bitpos

    @property
    def active(self) -> bool:
        """Gets the active of this Group.


        :return: The active of this Group.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Group.


        :param active: The active of this Group.
        :type active: bool
        """

        self._active = active

    @property
    def description(self) -> str:
        """Gets the description of this Group.


        :return: The description of this Group.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Group.


        :param description: The description of this Group.
        :type description: str
        """

        self._description = description
