# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.federation_port import FederationPort  # noqa: F401,E501
from swagger_server.models.mission import Mission  # noqa: F401,E501
from swagger_server.models.v1_tls import V1Tls  # noqa: F401,E501
from swagger_server import util


class FederationConfigInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, server_port_enabled: bool=None, server_portv1: int=None, server_portv2: int=None, server_port_enabledv2: bool=None, truststore_path: str=None, truststore_pass: str=None, tls_version: str=None, web_base_url: str=None, allow_mission_federation: bool=None, allow_data_feed_federation: bool=None, allow_federated_delete: bool=None, enable_mission_federation_disruption_tolerance: bool=None, mission_federation_disruption_tolerance_recency_seconds: int=None, mission_interval: List[Mission]=None, core_version: int=None, v1_ports: List[FederationPort]=None, v1_tls: List[V1Tls]=None, federated_group_mapping: bool=None, automatic_group_mapping: bool=None, enable_data_package_and_mission_file_filter: bool=None, file_extension: List[str]=None, enabled: bool=None, enable_mission_federation_file_filter: bool=None):  # noqa: E501
        """FederationConfigInfo - a model defined in Swagger

        :param server_port_enabled: The server_port_enabled of this FederationConfigInfo.  # noqa: E501
        :type server_port_enabled: bool
        :param server_portv1: The server_portv1 of this FederationConfigInfo.  # noqa: E501
        :type server_portv1: int
        :param server_portv2: The server_portv2 of this FederationConfigInfo.  # noqa: E501
        :type server_portv2: int
        :param server_port_enabledv2: The server_port_enabledv2 of this FederationConfigInfo.  # noqa: E501
        :type server_port_enabledv2: bool
        :param truststore_path: The truststore_path of this FederationConfigInfo.  # noqa: E501
        :type truststore_path: str
        :param truststore_pass: The truststore_pass of this FederationConfigInfo.  # noqa: E501
        :type truststore_pass: str
        :param tls_version: The tls_version of this FederationConfigInfo.  # noqa: E501
        :type tls_version: str
        :param web_base_url: The web_base_url of this FederationConfigInfo.  # noqa: E501
        :type web_base_url: str
        :param allow_mission_federation: The allow_mission_federation of this FederationConfigInfo.  # noqa: E501
        :type allow_mission_federation: bool
        :param allow_data_feed_federation: The allow_data_feed_federation of this FederationConfigInfo.  # noqa: E501
        :type allow_data_feed_federation: bool
        :param allow_federated_delete: The allow_federated_delete of this FederationConfigInfo.  # noqa: E501
        :type allow_federated_delete: bool
        :param enable_mission_federation_disruption_tolerance: The enable_mission_federation_disruption_tolerance of this FederationConfigInfo.  # noqa: E501
        :type enable_mission_federation_disruption_tolerance: bool
        :param mission_federation_disruption_tolerance_recency_seconds: The mission_federation_disruption_tolerance_recency_seconds of this FederationConfigInfo.  # noqa: E501
        :type mission_federation_disruption_tolerance_recency_seconds: int
        :param mission_interval: The mission_interval of this FederationConfigInfo.  # noqa: E501
        :type mission_interval: List[Mission]
        :param core_version: The core_version of this FederationConfigInfo.  # noqa: E501
        :type core_version: int
        :param v1_ports: The v1_ports of this FederationConfigInfo.  # noqa: E501
        :type v1_ports: List[FederationPort]
        :param v1_tls: The v1_tls of this FederationConfigInfo.  # noqa: E501
        :type v1_tls: List[V1Tls]
        :param federated_group_mapping: The federated_group_mapping of this FederationConfigInfo.  # noqa: E501
        :type federated_group_mapping: bool
        :param automatic_group_mapping: The automatic_group_mapping of this FederationConfigInfo.  # noqa: E501
        :type automatic_group_mapping: bool
        :param enable_data_package_and_mission_file_filter: The enable_data_package_and_mission_file_filter of this FederationConfigInfo.  # noqa: E501
        :type enable_data_package_and_mission_file_filter: bool
        :param file_extension: The file_extension of this FederationConfigInfo.  # noqa: E501
        :type file_extension: List[str]
        :param enabled: The enabled of this FederationConfigInfo.  # noqa: E501
        :type enabled: bool
        :param enable_mission_federation_file_filter: The enable_mission_federation_file_filter of this FederationConfigInfo.  # noqa: E501
        :type enable_mission_federation_file_filter: bool
        """
        self.swagger_types = {
            'server_port_enabled': bool,
            'server_portv1': int,
            'server_portv2': int,
            'server_port_enabledv2': bool,
            'truststore_path': str,
            'truststore_pass': str,
            'tls_version': str,
            'web_base_url': str,
            'allow_mission_federation': bool,
            'allow_data_feed_federation': bool,
            'allow_federated_delete': bool,
            'enable_mission_federation_disruption_tolerance': bool,
            'mission_federation_disruption_tolerance_recency_seconds': int,
            'mission_interval': List[Mission],
            'core_version': int,
            'v1_ports': List[FederationPort],
            'v1_tls': List[V1Tls],
            'federated_group_mapping': bool,
            'automatic_group_mapping': bool,
            'enable_data_package_and_mission_file_filter': bool,
            'file_extension': List[str],
            'enabled': bool,
            'enable_mission_federation_file_filter': bool
        }

        self.attribute_map = {
            'server_port_enabled': 'serverPortEnabled',
            'server_portv1': 'serverPortv1',
            'server_portv2': 'serverPortv2',
            'server_port_enabledv2': 'serverPortEnabledv2',
            'truststore_path': 'truststorePath',
            'truststore_pass': 'truststorePass',
            'tls_version': 'tlsVersion',
            'web_base_url': 'webBaseURL',
            'allow_mission_federation': 'allowMissionFederation',
            'allow_data_feed_federation': 'allowDataFeedFederation',
            'allow_federated_delete': 'allowFederatedDelete',
            'enable_mission_federation_disruption_tolerance': 'enableMissionFederationDisruptionTolerance',
            'mission_federation_disruption_tolerance_recency_seconds': 'missionFederationDisruptionToleranceRecencySeconds',
            'mission_interval': 'missionInterval',
            'core_version': 'coreVersion',
            'v1_ports': 'v1Ports',
            'v1_tls': 'v1Tls',
            'federated_group_mapping': 'federatedGroupMapping',
            'automatic_group_mapping': 'automaticGroupMapping',
            'enable_data_package_and_mission_file_filter': 'enableDataPackageAndMissionFileFilter',
            'file_extension': 'fileExtension',
            'enabled': 'enabled',
            'enable_mission_federation_file_filter': 'enableMissionFederationFileFilter'
        }
        self._server_port_enabled = server_port_enabled
        self._server_portv1 = server_portv1
        self._server_portv2 = server_portv2
        self._server_port_enabledv2 = server_port_enabledv2
        self._truststore_path = truststore_path
        self._truststore_pass = truststore_pass
        self._tls_version = tls_version
        self._web_base_url = web_base_url
        self._allow_mission_federation = allow_mission_federation
        self._allow_data_feed_federation = allow_data_feed_federation
        self._allow_federated_delete = allow_federated_delete
        self._enable_mission_federation_disruption_tolerance = enable_mission_federation_disruption_tolerance
        self._mission_federation_disruption_tolerance_recency_seconds = mission_federation_disruption_tolerance_recency_seconds
        self._mission_interval = mission_interval
        self._core_version = core_version
        self._v1_ports = v1_ports
        self._v1_tls = v1_tls
        self._federated_group_mapping = federated_group_mapping
        self._automatic_group_mapping = automatic_group_mapping
        self._enable_data_package_and_mission_file_filter = enable_data_package_and_mission_file_filter
        self._file_extension = file_extension
        self._enabled = enabled
        self._enable_mission_federation_file_filter = enable_mission_federation_file_filter

    @classmethod
    def from_dict(cls, dikt) -> 'FederationConfigInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FederationConfigInfo of this FederationConfigInfo.  # noqa: E501
        :rtype: FederationConfigInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_port_enabled(self) -> bool:
        """Gets the server_port_enabled of this FederationConfigInfo.


        :return: The server_port_enabled of this FederationConfigInfo.
        :rtype: bool
        """
        return self._server_port_enabled

    @server_port_enabled.setter
    def server_port_enabled(self, server_port_enabled: bool):
        """Sets the server_port_enabled of this FederationConfigInfo.


        :param server_port_enabled: The server_port_enabled of this FederationConfigInfo.
        :type server_port_enabled: bool
        """

        self._server_port_enabled = server_port_enabled

    @property
    def server_portv1(self) -> int:
        """Gets the server_portv1 of this FederationConfigInfo.


        :return: The server_portv1 of this FederationConfigInfo.
        :rtype: int
        """
        return self._server_portv1

    @server_portv1.setter
    def server_portv1(self, server_portv1: int):
        """Sets the server_portv1 of this FederationConfigInfo.


        :param server_portv1: The server_portv1 of this FederationConfigInfo.
        :type server_portv1: int
        """

        self._server_portv1 = server_portv1

    @property
    def server_portv2(self) -> int:
        """Gets the server_portv2 of this FederationConfigInfo.


        :return: The server_portv2 of this FederationConfigInfo.
        :rtype: int
        """
        return self._server_portv2

    @server_portv2.setter
    def server_portv2(self, server_portv2: int):
        """Sets the server_portv2 of this FederationConfigInfo.


        :param server_portv2: The server_portv2 of this FederationConfigInfo.
        :type server_portv2: int
        """

        self._server_portv2 = server_portv2

    @property
    def server_port_enabledv2(self) -> bool:
        """Gets the server_port_enabledv2 of this FederationConfigInfo.


        :return: The server_port_enabledv2 of this FederationConfigInfo.
        :rtype: bool
        """
        return self._server_port_enabledv2

    @server_port_enabledv2.setter
    def server_port_enabledv2(self, server_port_enabledv2: bool):
        """Sets the server_port_enabledv2 of this FederationConfigInfo.


        :param server_port_enabledv2: The server_port_enabledv2 of this FederationConfigInfo.
        :type server_port_enabledv2: bool
        """

        self._server_port_enabledv2 = server_port_enabledv2

    @property
    def truststore_path(self) -> str:
        """Gets the truststore_path of this FederationConfigInfo.


        :return: The truststore_path of this FederationConfigInfo.
        :rtype: str
        """
        return self._truststore_path

    @truststore_path.setter
    def truststore_path(self, truststore_path: str):
        """Sets the truststore_path of this FederationConfigInfo.


        :param truststore_path: The truststore_path of this FederationConfigInfo.
        :type truststore_path: str
        """

        self._truststore_path = truststore_path

    @property
    def truststore_pass(self) -> str:
        """Gets the truststore_pass of this FederationConfigInfo.


        :return: The truststore_pass of this FederationConfigInfo.
        :rtype: str
        """
        return self._truststore_pass

    @truststore_pass.setter
    def truststore_pass(self, truststore_pass: str):
        """Sets the truststore_pass of this FederationConfigInfo.


        :param truststore_pass: The truststore_pass of this FederationConfigInfo.
        :type truststore_pass: str
        """

        self._truststore_pass = truststore_pass

    @property
    def tls_version(self) -> str:
        """Gets the tls_version of this FederationConfigInfo.


        :return: The tls_version of this FederationConfigInfo.
        :rtype: str
        """
        return self._tls_version

    @tls_version.setter
    def tls_version(self, tls_version: str):
        """Sets the tls_version of this FederationConfigInfo.


        :param tls_version: The tls_version of this FederationConfigInfo.
        :type tls_version: str
        """

        self._tls_version = tls_version

    @property
    def web_base_url(self) -> str:
        """Gets the web_base_url of this FederationConfigInfo.


        :return: The web_base_url of this FederationConfigInfo.
        :rtype: str
        """
        return self._web_base_url

    @web_base_url.setter
    def web_base_url(self, web_base_url: str):
        """Sets the web_base_url of this FederationConfigInfo.


        :param web_base_url: The web_base_url of this FederationConfigInfo.
        :type web_base_url: str
        """

        self._web_base_url = web_base_url

    @property
    def allow_mission_federation(self) -> bool:
        """Gets the allow_mission_federation of this FederationConfigInfo.


        :return: The allow_mission_federation of this FederationConfigInfo.
        :rtype: bool
        """
        return self._allow_mission_federation

    @allow_mission_federation.setter
    def allow_mission_federation(self, allow_mission_federation: bool):
        """Sets the allow_mission_federation of this FederationConfigInfo.


        :param allow_mission_federation: The allow_mission_federation of this FederationConfigInfo.
        :type allow_mission_federation: bool
        """

        self._allow_mission_federation = allow_mission_federation

    @property
    def allow_data_feed_federation(self) -> bool:
        """Gets the allow_data_feed_federation of this FederationConfigInfo.


        :return: The allow_data_feed_federation of this FederationConfigInfo.
        :rtype: bool
        """
        return self._allow_data_feed_federation

    @allow_data_feed_federation.setter
    def allow_data_feed_federation(self, allow_data_feed_federation: bool):
        """Sets the allow_data_feed_federation of this FederationConfigInfo.


        :param allow_data_feed_federation: The allow_data_feed_federation of this FederationConfigInfo.
        :type allow_data_feed_federation: bool
        """

        self._allow_data_feed_federation = allow_data_feed_federation

    @property
    def allow_federated_delete(self) -> bool:
        """Gets the allow_federated_delete of this FederationConfigInfo.


        :return: The allow_federated_delete of this FederationConfigInfo.
        :rtype: bool
        """
        return self._allow_federated_delete

    @allow_federated_delete.setter
    def allow_federated_delete(self, allow_federated_delete: bool):
        """Sets the allow_federated_delete of this FederationConfigInfo.


        :param allow_federated_delete: The allow_federated_delete of this FederationConfigInfo.
        :type allow_federated_delete: bool
        """

        self._allow_federated_delete = allow_federated_delete

    @property
    def enable_mission_federation_disruption_tolerance(self) -> bool:
        """Gets the enable_mission_federation_disruption_tolerance of this FederationConfigInfo.


        :return: The enable_mission_federation_disruption_tolerance of this FederationConfigInfo.
        :rtype: bool
        """
        return self._enable_mission_federation_disruption_tolerance

    @enable_mission_federation_disruption_tolerance.setter
    def enable_mission_federation_disruption_tolerance(self, enable_mission_federation_disruption_tolerance: bool):
        """Sets the enable_mission_federation_disruption_tolerance of this FederationConfigInfo.


        :param enable_mission_federation_disruption_tolerance: The enable_mission_federation_disruption_tolerance of this FederationConfigInfo.
        :type enable_mission_federation_disruption_tolerance: bool
        """

        self._enable_mission_federation_disruption_tolerance = enable_mission_federation_disruption_tolerance

    @property
    def mission_federation_disruption_tolerance_recency_seconds(self) -> int:
        """Gets the mission_federation_disruption_tolerance_recency_seconds of this FederationConfigInfo.


        :return: The mission_federation_disruption_tolerance_recency_seconds of this FederationConfigInfo.
        :rtype: int
        """
        return self._mission_federation_disruption_tolerance_recency_seconds

    @mission_federation_disruption_tolerance_recency_seconds.setter
    def mission_federation_disruption_tolerance_recency_seconds(self, mission_federation_disruption_tolerance_recency_seconds: int):
        """Sets the mission_federation_disruption_tolerance_recency_seconds of this FederationConfigInfo.


        :param mission_federation_disruption_tolerance_recency_seconds: The mission_federation_disruption_tolerance_recency_seconds of this FederationConfigInfo.
        :type mission_federation_disruption_tolerance_recency_seconds: int
        """

        self._mission_federation_disruption_tolerance_recency_seconds = mission_federation_disruption_tolerance_recency_seconds

    @property
    def mission_interval(self) -> List[Mission]:
        """Gets the mission_interval of this FederationConfigInfo.


        :return: The mission_interval of this FederationConfigInfo.
        :rtype: List[Mission]
        """
        return self._mission_interval

    @mission_interval.setter
    def mission_interval(self, mission_interval: List[Mission]):
        """Sets the mission_interval of this FederationConfigInfo.


        :param mission_interval: The mission_interval of this FederationConfigInfo.
        :type mission_interval: List[Mission]
        """

        self._mission_interval = mission_interval

    @property
    def core_version(self) -> int:
        """Gets the core_version of this FederationConfigInfo.


        :return: The core_version of this FederationConfigInfo.
        :rtype: int
        """
        return self._core_version

    @core_version.setter
    def core_version(self, core_version: int):
        """Sets the core_version of this FederationConfigInfo.


        :param core_version: The core_version of this FederationConfigInfo.
        :type core_version: int
        """

        self._core_version = core_version

    @property
    def v1_ports(self) -> List[FederationPort]:
        """Gets the v1_ports of this FederationConfigInfo.


        :return: The v1_ports of this FederationConfigInfo.
        :rtype: List[FederationPort]
        """
        return self._v1_ports

    @v1_ports.setter
    def v1_ports(self, v1_ports: List[FederationPort]):
        """Sets the v1_ports of this FederationConfigInfo.


        :param v1_ports: The v1_ports of this FederationConfigInfo.
        :type v1_ports: List[FederationPort]
        """

        self._v1_ports = v1_ports

    @property
    def v1_tls(self) -> List[V1Tls]:
        """Gets the v1_tls of this FederationConfigInfo.


        :return: The v1_tls of this FederationConfigInfo.
        :rtype: List[V1Tls]
        """
        return self._v1_tls

    @v1_tls.setter
    def v1_tls(self, v1_tls: List[V1Tls]):
        """Sets the v1_tls of this FederationConfigInfo.


        :param v1_tls: The v1_tls of this FederationConfigInfo.
        :type v1_tls: List[V1Tls]
        """

        self._v1_tls = v1_tls

    @property
    def federated_group_mapping(self) -> bool:
        """Gets the federated_group_mapping of this FederationConfigInfo.


        :return: The federated_group_mapping of this FederationConfigInfo.
        :rtype: bool
        """
        return self._federated_group_mapping

    @federated_group_mapping.setter
    def federated_group_mapping(self, federated_group_mapping: bool):
        """Sets the federated_group_mapping of this FederationConfigInfo.


        :param federated_group_mapping: The federated_group_mapping of this FederationConfigInfo.
        :type federated_group_mapping: bool
        """

        self._federated_group_mapping = federated_group_mapping

    @property
    def automatic_group_mapping(self) -> bool:
        """Gets the automatic_group_mapping of this FederationConfigInfo.


        :return: The automatic_group_mapping of this FederationConfigInfo.
        :rtype: bool
        """
        return self._automatic_group_mapping

    @automatic_group_mapping.setter
    def automatic_group_mapping(self, automatic_group_mapping: bool):
        """Sets the automatic_group_mapping of this FederationConfigInfo.


        :param automatic_group_mapping: The automatic_group_mapping of this FederationConfigInfo.
        :type automatic_group_mapping: bool
        """

        self._automatic_group_mapping = automatic_group_mapping

    @property
    def enable_data_package_and_mission_file_filter(self) -> bool:
        """Gets the enable_data_package_and_mission_file_filter of this FederationConfigInfo.


        :return: The enable_data_package_and_mission_file_filter of this FederationConfigInfo.
        :rtype: bool
        """
        return self._enable_data_package_and_mission_file_filter

    @enable_data_package_and_mission_file_filter.setter
    def enable_data_package_and_mission_file_filter(self, enable_data_package_and_mission_file_filter: bool):
        """Sets the enable_data_package_and_mission_file_filter of this FederationConfigInfo.


        :param enable_data_package_and_mission_file_filter: The enable_data_package_and_mission_file_filter of this FederationConfigInfo.
        :type enable_data_package_and_mission_file_filter: bool
        """

        self._enable_data_package_and_mission_file_filter = enable_data_package_and_mission_file_filter

    @property
    def file_extension(self) -> List[str]:
        """Gets the file_extension of this FederationConfigInfo.


        :return: The file_extension of this FederationConfigInfo.
        :rtype: List[str]
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension: List[str]):
        """Sets the file_extension of this FederationConfigInfo.


        :param file_extension: The file_extension of this FederationConfigInfo.
        :type file_extension: List[str]
        """

        self._file_extension = file_extension

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this FederationConfigInfo.


        :return: The enabled of this FederationConfigInfo.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this FederationConfigInfo.


        :param enabled: The enabled of this FederationConfigInfo.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def enable_mission_federation_file_filter(self) -> bool:
        """Gets the enable_mission_federation_file_filter of this FederationConfigInfo.


        :return: The enable_mission_federation_file_filter of this FederationConfigInfo.
        :rtype: bool
        """
        return self._enable_mission_federation_file_filter

    @enable_mission_federation_file_filter.setter
    def enable_mission_federation_file_filter(self, enable_mission_federation_file_filter: bool):
        """Sets the enable_mission_federation_file_filter of this FederationConfigInfo.


        :param enable_mission_federation_file_filter: The enable_mission_federation_file_filter of this FederationConfigInfo.
        :type enable_mission_federation_file_filter: bool
        """

        self._enable_mission_federation_file_filter = enable_mission_federation_file_filter
