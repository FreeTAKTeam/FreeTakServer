# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Ldap(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, filtergroup: List[str]=None, url: str=None, userstring: str=None, updateinterval: int=None, groupprefix: str=None, group_name_extractor_regex: str=None, style: str=None, ldap_security_type: str=None, service_account_dn: str=None, service_account_credential: str=None, group_object_class: str=None, user_object_class: str=None, group_base_rdn: str=None, user_base_rdn: str=None, x509_groups: bool=None, x509_add_anonymous: bool=None, match_group_in_chain: bool=None, post_mission_events_as_public: bool=None, ldaps_truststore: str=None, ldaps_truststore_file: str=None, ldaps_truststore_pass: str=None, read_only_group: str=None, read_group_suffix: str=None, write_group_suffix: str=None, login_with_email: bool=None, callsign_attribute: str=None, color_attribute: str=None, role_attribute: str=None, enable_connection_pool: bool=None, connection_pool_timeout: str=None, dn_attribute_name: str=None):  # noqa: E501
        """Ldap - a model defined in Swagger

        :param filtergroup: The filtergroup of this Ldap.  # noqa: E501
        :type filtergroup: List[str]
        :param url: The url of this Ldap.  # noqa: E501
        :type url: str
        :param userstring: The userstring of this Ldap.  # noqa: E501
        :type userstring: str
        :param updateinterval: The updateinterval of this Ldap.  # noqa: E501
        :type updateinterval: int
        :param groupprefix: The groupprefix of this Ldap.  # noqa: E501
        :type groupprefix: str
        :param group_name_extractor_regex: The group_name_extractor_regex of this Ldap.  # noqa: E501
        :type group_name_extractor_regex: str
        :param style: The style of this Ldap.  # noqa: E501
        :type style: str
        :param ldap_security_type: The ldap_security_type of this Ldap.  # noqa: E501
        :type ldap_security_type: str
        :param service_account_dn: The service_account_dn of this Ldap.  # noqa: E501
        :type service_account_dn: str
        :param service_account_credential: The service_account_credential of this Ldap.  # noqa: E501
        :type service_account_credential: str
        :param group_object_class: The group_object_class of this Ldap.  # noqa: E501
        :type group_object_class: str
        :param user_object_class: The user_object_class of this Ldap.  # noqa: E501
        :type user_object_class: str
        :param group_base_rdn: The group_base_rdn of this Ldap.  # noqa: E501
        :type group_base_rdn: str
        :param user_base_rdn: The user_base_rdn of this Ldap.  # noqa: E501
        :type user_base_rdn: str
        :param x509_groups: The x509_groups of this Ldap.  # noqa: E501
        :type x509_groups: bool
        :param x509_add_anonymous: The x509_add_anonymous of this Ldap.  # noqa: E501
        :type x509_add_anonymous: bool
        :param match_group_in_chain: The match_group_in_chain of this Ldap.  # noqa: E501
        :type match_group_in_chain: bool
        :param post_mission_events_as_public: The post_mission_events_as_public of this Ldap.  # noqa: E501
        :type post_mission_events_as_public: bool
        :param ldaps_truststore: The ldaps_truststore of this Ldap.  # noqa: E501
        :type ldaps_truststore: str
        :param ldaps_truststore_file: The ldaps_truststore_file of this Ldap.  # noqa: E501
        :type ldaps_truststore_file: str
        :param ldaps_truststore_pass: The ldaps_truststore_pass of this Ldap.  # noqa: E501
        :type ldaps_truststore_pass: str
        :param read_only_group: The read_only_group of this Ldap.  # noqa: E501
        :type read_only_group: str
        :param read_group_suffix: The read_group_suffix of this Ldap.  # noqa: E501
        :type read_group_suffix: str
        :param write_group_suffix: The write_group_suffix of this Ldap.  # noqa: E501
        :type write_group_suffix: str
        :param login_with_email: The login_with_email of this Ldap.  # noqa: E501
        :type login_with_email: bool
        :param callsign_attribute: The callsign_attribute of this Ldap.  # noqa: E501
        :type callsign_attribute: str
        :param color_attribute: The color_attribute of this Ldap.  # noqa: E501
        :type color_attribute: str
        :param role_attribute: The role_attribute of this Ldap.  # noqa: E501
        :type role_attribute: str
        :param enable_connection_pool: The enable_connection_pool of this Ldap.  # noqa: E501
        :type enable_connection_pool: bool
        :param connection_pool_timeout: The connection_pool_timeout of this Ldap.  # noqa: E501
        :type connection_pool_timeout: str
        :param dn_attribute_name: The dn_attribute_name of this Ldap.  # noqa: E501
        :type dn_attribute_name: str
        """
        self.swagger_types = {
            'filtergroup': List[str],
            'url': str,
            'userstring': str,
            'updateinterval': int,
            'groupprefix': str,
            'group_name_extractor_regex': str,
            'style': str,
            'ldap_security_type': str,
            'service_account_dn': str,
            'service_account_credential': str,
            'group_object_class': str,
            'user_object_class': str,
            'group_base_rdn': str,
            'user_base_rdn': str,
            'x509_groups': bool,
            'x509_add_anonymous': bool,
            'match_group_in_chain': bool,
            'post_mission_events_as_public': bool,
            'ldaps_truststore': str,
            'ldaps_truststore_file': str,
            'ldaps_truststore_pass': str,
            'read_only_group': str,
            'read_group_suffix': str,
            'write_group_suffix': str,
            'login_with_email': bool,
            'callsign_attribute': str,
            'color_attribute': str,
            'role_attribute': str,
            'enable_connection_pool': bool,
            'connection_pool_timeout': str,
            'dn_attribute_name': str
        }

        self.attribute_map = {
            'filtergroup': 'filtergroup',
            'url': 'url',
            'userstring': 'userstring',
            'updateinterval': 'updateinterval',
            'groupprefix': 'groupprefix',
            'group_name_extractor_regex': 'groupNameExtractorRegex',
            'style': 'style',
            'ldap_security_type': 'ldapSecurityType',
            'service_account_dn': 'serviceAccountDN',
            'service_account_credential': 'serviceAccountCredential',
            'group_object_class': 'groupObjectClass',
            'user_object_class': 'userObjectClass',
            'group_base_rdn': 'groupBaseRDN',
            'user_base_rdn': 'userBaseRDN',
            'x509_groups': 'x509Groups',
            'x509_add_anonymous': 'x509AddAnonymous',
            'match_group_in_chain': 'matchGroupInChain',
            'post_mission_events_as_public': 'postMissionEventsAsPublic',
            'ldaps_truststore': 'ldapsTruststore',
            'ldaps_truststore_file': 'ldapsTruststoreFile',
            'ldaps_truststore_pass': 'ldapsTruststorePass',
            'read_only_group': 'readOnlyGroup',
            'read_group_suffix': 'readGroupSuffix',
            'write_group_suffix': 'writeGroupSuffix',
            'login_with_email': 'loginWithEmail',
            'callsign_attribute': 'callsignAttribute',
            'color_attribute': 'colorAttribute',
            'role_attribute': 'roleAttribute',
            'enable_connection_pool': 'enableConnectionPool',
            'connection_pool_timeout': 'connectionPoolTimeout',
            'dn_attribute_name': 'dnAttributeName'
        }
        self._filtergroup = filtergroup
        self._url = url
        self._userstring = userstring
        self._updateinterval = updateinterval
        self._groupprefix = groupprefix
        self._group_name_extractor_regex = group_name_extractor_regex
        self._style = style
        self._ldap_security_type = ldap_security_type
        self._service_account_dn = service_account_dn
        self._service_account_credential = service_account_credential
        self._group_object_class = group_object_class
        self._user_object_class = user_object_class
        self._group_base_rdn = group_base_rdn
        self._user_base_rdn = user_base_rdn
        self._x509_groups = x509_groups
        self._x509_add_anonymous = x509_add_anonymous
        self._match_group_in_chain = match_group_in_chain
        self._post_mission_events_as_public = post_mission_events_as_public
        self._ldaps_truststore = ldaps_truststore
        self._ldaps_truststore_file = ldaps_truststore_file
        self._ldaps_truststore_pass = ldaps_truststore_pass
        self._read_only_group = read_only_group
        self._read_group_suffix = read_group_suffix
        self._write_group_suffix = write_group_suffix
        self._login_with_email = login_with_email
        self._callsign_attribute = callsign_attribute
        self._color_attribute = color_attribute
        self._role_attribute = role_attribute
        self._enable_connection_pool = enable_connection_pool
        self._connection_pool_timeout = connection_pool_timeout
        self._dn_attribute_name = dn_attribute_name

    @classmethod
    def from_dict(cls, dikt) -> 'Ldap':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Ldap of this Ldap.  # noqa: E501
        :rtype: Ldap
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filtergroup(self) -> List[str]:
        """Gets the filtergroup of this Ldap.


        :return: The filtergroup of this Ldap.
        :rtype: List[str]
        """
        return self._filtergroup

    @filtergroup.setter
    def filtergroup(self, filtergroup: List[str]):
        """Sets the filtergroup of this Ldap.


        :param filtergroup: The filtergroup of this Ldap.
        :type filtergroup: List[str]
        """

        self._filtergroup = filtergroup

    @property
    def url(self) -> str:
        """Gets the url of this Ldap.


        :return: The url of this Ldap.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Ldap.


        :param url: The url of this Ldap.
        :type url: str
        """

        self._url = url

    @property
    def userstring(self) -> str:
        """Gets the userstring of this Ldap.


        :return: The userstring of this Ldap.
        :rtype: str
        """
        return self._userstring

    @userstring.setter
    def userstring(self, userstring: str):
        """Sets the userstring of this Ldap.


        :param userstring: The userstring of this Ldap.
        :type userstring: str
        """

        self._userstring = userstring

    @property
    def updateinterval(self) -> int:
        """Gets the updateinterval of this Ldap.


        :return: The updateinterval of this Ldap.
        :rtype: int
        """
        return self._updateinterval

    @updateinterval.setter
    def updateinterval(self, updateinterval: int):
        """Sets the updateinterval of this Ldap.


        :param updateinterval: The updateinterval of this Ldap.
        :type updateinterval: int
        """

        self._updateinterval = updateinterval

    @property
    def groupprefix(self) -> str:
        """Gets the groupprefix of this Ldap.


        :return: The groupprefix of this Ldap.
        :rtype: str
        """
        return self._groupprefix

    @groupprefix.setter
    def groupprefix(self, groupprefix: str):
        """Sets the groupprefix of this Ldap.


        :param groupprefix: The groupprefix of this Ldap.
        :type groupprefix: str
        """

        self._groupprefix = groupprefix

    @property
    def group_name_extractor_regex(self) -> str:
        """Gets the group_name_extractor_regex of this Ldap.


        :return: The group_name_extractor_regex of this Ldap.
        :rtype: str
        """
        return self._group_name_extractor_regex

    @group_name_extractor_regex.setter
    def group_name_extractor_regex(self, group_name_extractor_regex: str):
        """Sets the group_name_extractor_regex of this Ldap.


        :param group_name_extractor_regex: The group_name_extractor_regex of this Ldap.
        :type group_name_extractor_regex: str
        """

        self._group_name_extractor_regex = group_name_extractor_regex

    @property
    def style(self) -> str:
        """Gets the style of this Ldap.


        :return: The style of this Ldap.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style: str):
        """Sets the style of this Ldap.


        :param style: The style of this Ldap.
        :type style: str
        """
        allowed_values = ["AD", "DS"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def ldap_security_type(self) -> str:
        """Gets the ldap_security_type of this Ldap.


        :return: The ldap_security_type of this Ldap.
        :rtype: str
        """
        return self._ldap_security_type

    @ldap_security_type.setter
    def ldap_security_type(self, ldap_security_type: str):
        """Sets the ldap_security_type of this Ldap.


        :param ldap_security_type: The ldap_security_type of this Ldap.
        :type ldap_security_type: str
        """
        allowed_values = ["NONE", "SIMPLE"]  # noqa: E501
        if ldap_security_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ldap_security_type` ({0}), must be one of {1}"
                .format(ldap_security_type, allowed_values)
            )

        self._ldap_security_type = ldap_security_type

    @property
    def service_account_dn(self) -> str:
        """Gets the service_account_dn of this Ldap.


        :return: The service_account_dn of this Ldap.
        :rtype: str
        """
        return self._service_account_dn

    @service_account_dn.setter
    def service_account_dn(self, service_account_dn: str):
        """Sets the service_account_dn of this Ldap.


        :param service_account_dn: The service_account_dn of this Ldap.
        :type service_account_dn: str
        """

        self._service_account_dn = service_account_dn

    @property
    def service_account_credential(self) -> str:
        """Gets the service_account_credential of this Ldap.


        :return: The service_account_credential of this Ldap.
        :rtype: str
        """
        return self._service_account_credential

    @service_account_credential.setter
    def service_account_credential(self, service_account_credential: str):
        """Sets the service_account_credential of this Ldap.


        :param service_account_credential: The service_account_credential of this Ldap.
        :type service_account_credential: str
        """

        self._service_account_credential = service_account_credential

    @property
    def group_object_class(self) -> str:
        """Gets the group_object_class of this Ldap.


        :return: The group_object_class of this Ldap.
        :rtype: str
        """
        return self._group_object_class

    @group_object_class.setter
    def group_object_class(self, group_object_class: str):
        """Sets the group_object_class of this Ldap.


        :param group_object_class: The group_object_class of this Ldap.
        :type group_object_class: str
        """

        self._group_object_class = group_object_class

    @property
    def user_object_class(self) -> str:
        """Gets the user_object_class of this Ldap.


        :return: The user_object_class of this Ldap.
        :rtype: str
        """
        return self._user_object_class

    @user_object_class.setter
    def user_object_class(self, user_object_class: str):
        """Sets the user_object_class of this Ldap.


        :param user_object_class: The user_object_class of this Ldap.
        :type user_object_class: str
        """

        self._user_object_class = user_object_class

    @property
    def group_base_rdn(self) -> str:
        """Gets the group_base_rdn of this Ldap.


        :return: The group_base_rdn of this Ldap.
        :rtype: str
        """
        return self._group_base_rdn

    @group_base_rdn.setter
    def group_base_rdn(self, group_base_rdn: str):
        """Sets the group_base_rdn of this Ldap.


        :param group_base_rdn: The group_base_rdn of this Ldap.
        :type group_base_rdn: str
        """

        self._group_base_rdn = group_base_rdn

    @property
    def user_base_rdn(self) -> str:
        """Gets the user_base_rdn of this Ldap.


        :return: The user_base_rdn of this Ldap.
        :rtype: str
        """
        return self._user_base_rdn

    @user_base_rdn.setter
    def user_base_rdn(self, user_base_rdn: str):
        """Sets the user_base_rdn of this Ldap.


        :param user_base_rdn: The user_base_rdn of this Ldap.
        :type user_base_rdn: str
        """

        self._user_base_rdn = user_base_rdn

    @property
    def x509_groups(self) -> bool:
        """Gets the x509_groups of this Ldap.


        :return: The x509_groups of this Ldap.
        :rtype: bool
        """
        return self._x509_groups

    @x509_groups.setter
    def x509_groups(self, x509_groups: bool):
        """Sets the x509_groups of this Ldap.


        :param x509_groups: The x509_groups of this Ldap.
        :type x509_groups: bool
        """

        self._x509_groups = x509_groups

    @property
    def x509_add_anonymous(self) -> bool:
        """Gets the x509_add_anonymous of this Ldap.


        :return: The x509_add_anonymous of this Ldap.
        :rtype: bool
        """
        return self._x509_add_anonymous

    @x509_add_anonymous.setter
    def x509_add_anonymous(self, x509_add_anonymous: bool):
        """Sets the x509_add_anonymous of this Ldap.


        :param x509_add_anonymous: The x509_add_anonymous of this Ldap.
        :type x509_add_anonymous: bool
        """

        self._x509_add_anonymous = x509_add_anonymous

    @property
    def match_group_in_chain(self) -> bool:
        """Gets the match_group_in_chain of this Ldap.


        :return: The match_group_in_chain of this Ldap.
        :rtype: bool
        """
        return self._match_group_in_chain

    @match_group_in_chain.setter
    def match_group_in_chain(self, match_group_in_chain: bool):
        """Sets the match_group_in_chain of this Ldap.


        :param match_group_in_chain: The match_group_in_chain of this Ldap.
        :type match_group_in_chain: bool
        """

        self._match_group_in_chain = match_group_in_chain

    @property
    def post_mission_events_as_public(self) -> bool:
        """Gets the post_mission_events_as_public of this Ldap.


        :return: The post_mission_events_as_public of this Ldap.
        :rtype: bool
        """
        return self._post_mission_events_as_public

    @post_mission_events_as_public.setter
    def post_mission_events_as_public(self, post_mission_events_as_public: bool):
        """Sets the post_mission_events_as_public of this Ldap.


        :param post_mission_events_as_public: The post_mission_events_as_public of this Ldap.
        :type post_mission_events_as_public: bool
        """

        self._post_mission_events_as_public = post_mission_events_as_public

    @property
    def ldaps_truststore(self) -> str:
        """Gets the ldaps_truststore of this Ldap.


        :return: The ldaps_truststore of this Ldap.
        :rtype: str
        """
        return self._ldaps_truststore

    @ldaps_truststore.setter
    def ldaps_truststore(self, ldaps_truststore: str):
        """Sets the ldaps_truststore of this Ldap.


        :param ldaps_truststore: The ldaps_truststore of this Ldap.
        :type ldaps_truststore: str
        """

        self._ldaps_truststore = ldaps_truststore

    @property
    def ldaps_truststore_file(self) -> str:
        """Gets the ldaps_truststore_file of this Ldap.


        :return: The ldaps_truststore_file of this Ldap.
        :rtype: str
        """
        return self._ldaps_truststore_file

    @ldaps_truststore_file.setter
    def ldaps_truststore_file(self, ldaps_truststore_file: str):
        """Sets the ldaps_truststore_file of this Ldap.


        :param ldaps_truststore_file: The ldaps_truststore_file of this Ldap.
        :type ldaps_truststore_file: str
        """

        self._ldaps_truststore_file = ldaps_truststore_file

    @property
    def ldaps_truststore_pass(self) -> str:
        """Gets the ldaps_truststore_pass of this Ldap.


        :return: The ldaps_truststore_pass of this Ldap.
        :rtype: str
        """
        return self._ldaps_truststore_pass

    @ldaps_truststore_pass.setter
    def ldaps_truststore_pass(self, ldaps_truststore_pass: str):
        """Sets the ldaps_truststore_pass of this Ldap.


        :param ldaps_truststore_pass: The ldaps_truststore_pass of this Ldap.
        :type ldaps_truststore_pass: str
        """

        self._ldaps_truststore_pass = ldaps_truststore_pass

    @property
    def read_only_group(self) -> str:
        """Gets the read_only_group of this Ldap.


        :return: The read_only_group of this Ldap.
        :rtype: str
        """
        return self._read_only_group

    @read_only_group.setter
    def read_only_group(self, read_only_group: str):
        """Sets the read_only_group of this Ldap.


        :param read_only_group: The read_only_group of this Ldap.
        :type read_only_group: str
        """

        self._read_only_group = read_only_group

    @property
    def read_group_suffix(self) -> str:
        """Gets the read_group_suffix of this Ldap.


        :return: The read_group_suffix of this Ldap.
        :rtype: str
        """
        return self._read_group_suffix

    @read_group_suffix.setter
    def read_group_suffix(self, read_group_suffix: str):
        """Sets the read_group_suffix of this Ldap.


        :param read_group_suffix: The read_group_suffix of this Ldap.
        :type read_group_suffix: str
        """

        self._read_group_suffix = read_group_suffix

    @property
    def write_group_suffix(self) -> str:
        """Gets the write_group_suffix of this Ldap.


        :return: The write_group_suffix of this Ldap.
        :rtype: str
        """
        return self._write_group_suffix

    @write_group_suffix.setter
    def write_group_suffix(self, write_group_suffix: str):
        """Sets the write_group_suffix of this Ldap.


        :param write_group_suffix: The write_group_suffix of this Ldap.
        :type write_group_suffix: str
        """

        self._write_group_suffix = write_group_suffix

    @property
    def login_with_email(self) -> bool:
        """Gets the login_with_email of this Ldap.


        :return: The login_with_email of this Ldap.
        :rtype: bool
        """
        return self._login_with_email

    @login_with_email.setter
    def login_with_email(self, login_with_email: bool):
        """Sets the login_with_email of this Ldap.


        :param login_with_email: The login_with_email of this Ldap.
        :type login_with_email: bool
        """

        self._login_with_email = login_with_email

    @property
    def callsign_attribute(self) -> str:
        """Gets the callsign_attribute of this Ldap.


        :return: The callsign_attribute of this Ldap.
        :rtype: str
        """
        return self._callsign_attribute

    @callsign_attribute.setter
    def callsign_attribute(self, callsign_attribute: str):
        """Sets the callsign_attribute of this Ldap.


        :param callsign_attribute: The callsign_attribute of this Ldap.
        :type callsign_attribute: str
        """

        self._callsign_attribute = callsign_attribute

    @property
    def color_attribute(self) -> str:
        """Gets the color_attribute of this Ldap.


        :return: The color_attribute of this Ldap.
        :rtype: str
        """
        return self._color_attribute

    @color_attribute.setter
    def color_attribute(self, color_attribute: str):
        """Sets the color_attribute of this Ldap.


        :param color_attribute: The color_attribute of this Ldap.
        :type color_attribute: str
        """

        self._color_attribute = color_attribute

    @property
    def role_attribute(self) -> str:
        """Gets the role_attribute of this Ldap.


        :return: The role_attribute of this Ldap.
        :rtype: str
        """
        return self._role_attribute

    @role_attribute.setter
    def role_attribute(self, role_attribute: str):
        """Sets the role_attribute of this Ldap.


        :param role_attribute: The role_attribute of this Ldap.
        :type role_attribute: str
        """

        self._role_attribute = role_attribute

    @property
    def enable_connection_pool(self) -> bool:
        """Gets the enable_connection_pool of this Ldap.


        :return: The enable_connection_pool of this Ldap.
        :rtype: bool
        """
        return self._enable_connection_pool

    @enable_connection_pool.setter
    def enable_connection_pool(self, enable_connection_pool: bool):
        """Sets the enable_connection_pool of this Ldap.


        :param enable_connection_pool: The enable_connection_pool of this Ldap.
        :type enable_connection_pool: bool
        """

        self._enable_connection_pool = enable_connection_pool

    @property
    def connection_pool_timeout(self) -> str:
        """Gets the connection_pool_timeout of this Ldap.


        :return: The connection_pool_timeout of this Ldap.
        :rtype: str
        """
        return self._connection_pool_timeout

    @connection_pool_timeout.setter
    def connection_pool_timeout(self, connection_pool_timeout: str):
        """Sets the connection_pool_timeout of this Ldap.


        :param connection_pool_timeout: The connection_pool_timeout of this Ldap.
        :type connection_pool_timeout: str
        """

        self._connection_pool_timeout = connection_pool_timeout

    @property
    def dn_attribute_name(self) -> str:
        """Gets the dn_attribute_name of this Ldap.


        :return: The dn_attribute_name of this Ldap.
        :rtype: str
        """
        return self._dn_attribute_name

    @dn_attribute_name.setter
    def dn_attribute_name(self, dn_attribute_name: str):
        """Sets the dn_attribute_name of this Ldap.


        :param dn_attribute_name: The dn_attribute_name of this Ldap.
        :type dn_attribute_name: str
        """

        self._dn_attribute_name = dn_attribute_name
