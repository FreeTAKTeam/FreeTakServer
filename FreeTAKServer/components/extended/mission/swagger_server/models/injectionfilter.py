# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.uid_inject import UidInject  # noqa: F401,E501
from swagger_server import util


class Injectionfilter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uid_inject: List[UidInject]=None, enable: bool=None):  # noqa: E501
        """Injectionfilter - a model defined in Swagger

        :param uid_inject: The uid_inject of this Injectionfilter.  # noqa: E501
        :type uid_inject: List[UidInject]
        :param enable: The enable of this Injectionfilter.  # noqa: E501
        :type enable: bool
        """
        self.swagger_types = {
            'uid_inject': List[UidInject],
            'enable': bool
        }

        self.attribute_map = {
            'uid_inject': 'uidInject',
            'enable': 'enable'
        }
        self._uid_inject = uid_inject
        self._enable = enable

    @classmethod
    def from_dict(cls, dikt) -> 'Injectionfilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Injectionfilter of this Injectionfilter.  # noqa: E501
        :rtype: Injectionfilter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid_inject(self) -> List[UidInject]:
        """Gets the uid_inject of this Injectionfilter.


        :return: The uid_inject of this Injectionfilter.
        :rtype: List[UidInject]
        """
        return self._uid_inject

    @uid_inject.setter
    def uid_inject(self, uid_inject: List[UidInject]):
        """Sets the uid_inject of this Injectionfilter.


        :param uid_inject: The uid_inject of this Injectionfilter.
        :type uid_inject: List[UidInject]
        """

        self._uid_inject = uid_inject

    @property
    def enable(self) -> bool:
        """Gets the enable of this Injectionfilter.


        :return: The enable of this Injectionfilter.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable: bool):
        """Sets the enable of this Injectionfilter.


        :param enable: The enable of this Injectionfilter.
        :type enable: bool
        """

        self._enable = enable
