# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.contact_api import ContactApi  # noqa: F401,E501
from swagger_server.models.dropfilter import Dropfilter  # noqa: F401,E501
from swagger_server.models.flowtag import Flowtag  # noqa: F401,E501
from swagger_server.models.geospatial_filter import GeospatialFilter  # noqa: F401,E501
from swagger_server.models.injectionfilter import Injectionfilter  # noqa: F401,E501
from swagger_server.models.qos import Qos  # noqa: F401,E501
from swagger_server.models.scrubber import Scrubber  # noqa: F401,E501
from swagger_server.models.streamingbroker import Streamingbroker  # noqa: F401,E501
from swagger_server.models.thumbnail import Thumbnail  # noqa: F401,E501
from swagger_server.models.urladd import Urladd  # noqa: F401,E501
from swagger_server import util


class Filter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, thumbnail: Thumbnail=None, urladd: Urladd=None, flowtag: Flowtag=None, streamingbroker: Streamingbroker=None, dropfilter: Dropfilter=None, injectionfilter: Injectionfilter=None, scrubber: Scrubber=None, geospatial_filter: GeospatialFilter=None, qos: Qos=None, contact_api: List[ContactApi]=None):  # noqa: E501
        """Filter - a model defined in Swagger

        :param thumbnail: The thumbnail of this Filter.  # noqa: E501
        :type thumbnail: Thumbnail
        :param urladd: The urladd of this Filter.  # noqa: E501
        :type urladd: Urladd
        :param flowtag: The flowtag of this Filter.  # noqa: E501
        :type flowtag: Flowtag
        :param streamingbroker: The streamingbroker of this Filter.  # noqa: E501
        :type streamingbroker: Streamingbroker
        :param dropfilter: The dropfilter of this Filter.  # noqa: E501
        :type dropfilter: Dropfilter
        :param injectionfilter: The injectionfilter of this Filter.  # noqa: E501
        :type injectionfilter: Injectionfilter
        :param scrubber: The scrubber of this Filter.  # noqa: E501
        :type scrubber: Scrubber
        :param geospatial_filter: The geospatial_filter of this Filter.  # noqa: E501
        :type geospatial_filter: GeospatialFilter
        :param qos: The qos of this Filter.  # noqa: E501
        :type qos: Qos
        :param contact_api: The contact_api of this Filter.  # noqa: E501
        :type contact_api: List[ContactApi]
        """
        self.swagger_types = {
            'thumbnail': Thumbnail,
            'urladd': Urladd,
            'flowtag': Flowtag,
            'streamingbroker': Streamingbroker,
            'dropfilter': Dropfilter,
            'injectionfilter': Injectionfilter,
            'scrubber': Scrubber,
            'geospatial_filter': GeospatialFilter,
            'qos': Qos,
            'contact_api': List[ContactApi]
        }

        self.attribute_map = {
            'thumbnail': 'thumbnail',
            'urladd': 'urladd',
            'flowtag': 'flowtag',
            'streamingbroker': 'streamingbroker',
            'dropfilter': 'dropfilter',
            'injectionfilter': 'injectionfilter',
            'scrubber': 'scrubber',
            'geospatial_filter': 'geospatialFilter',
            'qos': 'qos',
            'contact_api': 'contactApi'
        }
        self._thumbnail = thumbnail
        self._urladd = urladd
        self._flowtag = flowtag
        self._streamingbroker = streamingbroker
        self._dropfilter = dropfilter
        self._injectionfilter = injectionfilter
        self._scrubber = scrubber
        self._geospatial_filter = geospatial_filter
        self._qos = qos
        self._contact_api = contact_api

    @classmethod
    def from_dict(cls, dikt) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Filter of this Filter.  # noqa: E501
        :rtype: Filter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def thumbnail(self) -> Thumbnail:
        """Gets the thumbnail of this Filter.


        :return: The thumbnail of this Filter.
        :rtype: Thumbnail
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail: Thumbnail):
        """Sets the thumbnail of this Filter.


        :param thumbnail: The thumbnail of this Filter.
        :type thumbnail: Thumbnail
        """

        self._thumbnail = thumbnail

    @property
    def urladd(self) -> Urladd:
        """Gets the urladd of this Filter.


        :return: The urladd of this Filter.
        :rtype: Urladd
        """
        return self._urladd

    @urladd.setter
    def urladd(self, urladd: Urladd):
        """Sets the urladd of this Filter.


        :param urladd: The urladd of this Filter.
        :type urladd: Urladd
        """

        self._urladd = urladd

    @property
    def flowtag(self) -> Flowtag:
        """Gets the flowtag of this Filter.


        :return: The flowtag of this Filter.
        :rtype: Flowtag
        """
        return self._flowtag

    @flowtag.setter
    def flowtag(self, flowtag: Flowtag):
        """Sets the flowtag of this Filter.


        :param flowtag: The flowtag of this Filter.
        :type flowtag: Flowtag
        """

        self._flowtag = flowtag

    @property
    def streamingbroker(self) -> Streamingbroker:
        """Gets the streamingbroker of this Filter.


        :return: The streamingbroker of this Filter.
        :rtype: Streamingbroker
        """
        return self._streamingbroker

    @streamingbroker.setter
    def streamingbroker(self, streamingbroker: Streamingbroker):
        """Sets the streamingbroker of this Filter.


        :param streamingbroker: The streamingbroker of this Filter.
        :type streamingbroker: Streamingbroker
        """

        self._streamingbroker = streamingbroker

    @property
    def dropfilter(self) -> Dropfilter:
        """Gets the dropfilter of this Filter.


        :return: The dropfilter of this Filter.
        :rtype: Dropfilter
        """
        return self._dropfilter

    @dropfilter.setter
    def dropfilter(self, dropfilter: Dropfilter):
        """Sets the dropfilter of this Filter.


        :param dropfilter: The dropfilter of this Filter.
        :type dropfilter: Dropfilter
        """

        self._dropfilter = dropfilter

    @property
    def injectionfilter(self) -> Injectionfilter:
        """Gets the injectionfilter of this Filter.


        :return: The injectionfilter of this Filter.
        :rtype: Injectionfilter
        """
        return self._injectionfilter

    @injectionfilter.setter
    def injectionfilter(self, injectionfilter: Injectionfilter):
        """Sets the injectionfilter of this Filter.


        :param injectionfilter: The injectionfilter of this Filter.
        :type injectionfilter: Injectionfilter
        """

        self._injectionfilter = injectionfilter

    @property
    def scrubber(self) -> Scrubber:
        """Gets the scrubber of this Filter.


        :return: The scrubber of this Filter.
        :rtype: Scrubber
        """
        return self._scrubber

    @scrubber.setter
    def scrubber(self, scrubber: Scrubber):
        """Sets the scrubber of this Filter.


        :param scrubber: The scrubber of this Filter.
        :type scrubber: Scrubber
        """

        self._scrubber = scrubber

    @property
    def geospatial_filter(self) -> GeospatialFilter:
        """Gets the geospatial_filter of this Filter.


        :return: The geospatial_filter of this Filter.
        :rtype: GeospatialFilter
        """
        return self._geospatial_filter

    @geospatial_filter.setter
    def geospatial_filter(self, geospatial_filter: GeospatialFilter):
        """Sets the geospatial_filter of this Filter.


        :param geospatial_filter: The geospatial_filter of this Filter.
        :type geospatial_filter: GeospatialFilter
        """

        self._geospatial_filter = geospatial_filter

    @property
    def qos(self) -> Qos:
        """Gets the qos of this Filter.


        :return: The qos of this Filter.
        :rtype: Qos
        """
        return self._qos

    @qos.setter
    def qos(self, qos: Qos):
        """Sets the qos of this Filter.


        :param qos: The qos of this Filter.
        :type qos: Qos
        """

        self._qos = qos

    @property
    def contact_api(self) -> List[ContactApi]:
        """Gets the contact_api of this Filter.


        :return: The contact_api of this Filter.
        :rtype: List[ContactApi]
        """
        return self._contact_api

    @contact_api.setter
    def contact_api(self, contact_api: List[ContactApi]):
        """Sets the contact_api of this Filter.


        :param contact_api: The contact_api of this Filter.
        :type contact_api: List[ContactApi]
        """

        self._contact_api = contact_api
