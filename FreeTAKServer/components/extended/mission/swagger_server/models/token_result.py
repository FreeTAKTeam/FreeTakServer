# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TokenResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, client_id: str=None, token: str=None, username: str=None, expires: datetime=None):  # noqa: E501
        """TokenResult - a model defined in Swagger

        :param client_id: The client_id of this TokenResult.  # noqa: E501
        :type client_id: str
        :param token: The token of this TokenResult.  # noqa: E501
        :type token: str
        :param username: The username of this TokenResult.  # noqa: E501
        :type username: str
        :param expires: The expires of this TokenResult.  # noqa: E501
        :type expires: datetime
        """
        self.swagger_types = {
            'client_id': str,
            'token': str,
            'username': str,
            'expires': datetime
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'token': 'token',
            'username': 'username',
            'expires': 'expires'
        }
        self._client_id = client_id
        self._token = token
        self._username = username
        self._expires = expires

    @classmethod
    def from_dict(cls, dikt) -> 'TokenResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TokenResult of this TokenResult.  # noqa: E501
        :rtype: TokenResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self) -> str:
        """Gets the client_id of this TokenResult.


        :return: The client_id of this TokenResult.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: str):
        """Sets the client_id of this TokenResult.


        :param client_id: The client_id of this TokenResult.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def token(self) -> str:
        """Gets the token of this TokenResult.


        :return: The token of this TokenResult.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this TokenResult.


        :param token: The token of this TokenResult.
        :type token: str
        """

        self._token = token

    @property
    def username(self) -> str:
        """Gets the username of this TokenResult.


        :return: The username of this TokenResult.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this TokenResult.


        :param username: The username of this TokenResult.
        :type username: str
        """

        self._username = username

    @property
    def expires(self) -> datetime:
        """Gets the expires of this TokenResult.


        :return: The expires of this TokenResult.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires: datetime):
        """Sets the expires of this TokenResult.


        :param expires: The expires of this TokenResult.
        :type expires: datetime
        """

        self._expires = expires
