# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FederateCAGroupAssociation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ca_id: str=None, group: str=None, direction: str=None):  # noqa: E501
        """FederateCAGroupAssociation - a model defined in Swagger

        :param ca_id: The ca_id of this FederateCAGroupAssociation.  # noqa: E501
        :type ca_id: str
        :param group: The group of this FederateCAGroupAssociation.  # noqa: E501
        :type group: str
        :param direction: The direction of this FederateCAGroupAssociation.  # noqa: E501
        :type direction: str
        """
        self.swagger_types = {
            'ca_id': str,
            'group': str,
            'direction': str
        }

        self.attribute_map = {
            'ca_id': 'caId',
            'group': 'group',
            'direction': 'direction'
        }
        self._ca_id = ca_id
        self._group = group
        self._direction = direction

    @classmethod
    def from_dict(cls, dikt) -> 'FederateCAGroupAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FederateCAGroupAssociation of this FederateCAGroupAssociation.  # noqa: E501
        :rtype: FederateCAGroupAssociation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_id(self) -> str:
        """Gets the ca_id of this FederateCAGroupAssociation.


        :return: The ca_id of this FederateCAGroupAssociation.
        :rtype: str
        """
        return self._ca_id

    @ca_id.setter
    def ca_id(self, ca_id: str):
        """Sets the ca_id of this FederateCAGroupAssociation.


        :param ca_id: The ca_id of this FederateCAGroupAssociation.
        :type ca_id: str
        """

        self._ca_id = ca_id

    @property
    def group(self) -> str:
        """Gets the group of this FederateCAGroupAssociation.


        :return: The group of this FederateCAGroupAssociation.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group: str):
        """Sets the group of this FederateCAGroupAssociation.


        :param group: The group of this FederateCAGroupAssociation.
        :type group: str
        """

        self._group = group

    @property
    def direction(self) -> str:
        """Gets the direction of this FederateCAGroupAssociation.


        :return: The direction of this FederateCAGroupAssociation.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str):
        """Sets the direction of this FederateCAGroupAssociation.


        :param direction: The direction of this FederateCAGroupAssociation.
        :type direction: str
        """
        allowed_values = ["INBOUND", "OUTBOUND", "BOTH"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction
