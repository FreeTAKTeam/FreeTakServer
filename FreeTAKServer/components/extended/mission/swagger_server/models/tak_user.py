# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TAKUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, user_name: str=None, email_address: str=None, first_name: str=None, last_name: str=None, phone_number: str=None, organization: str=None, token: str=None, state: str=None, group_vector: str=None, activated: bool=None):  # noqa: E501
        """TAKUser - a model defined in Swagger

        :param id: The id of this TAKUser.  # noqa: E501
        :type id: int
        :param user_name: The user_name of this TAKUser.  # noqa: E501
        :type user_name: str
        :param email_address: The email_address of this TAKUser.  # noqa: E501
        :type email_address: str
        :param first_name: The first_name of this TAKUser.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this TAKUser.  # noqa: E501
        :type last_name: str
        :param phone_number: The phone_number of this TAKUser.  # noqa: E501
        :type phone_number: str
        :param organization: The organization of this TAKUser.  # noqa: E501
        :type organization: str
        :param token: The token of this TAKUser.  # noqa: E501
        :type token: str
        :param state: The state of this TAKUser.  # noqa: E501
        :type state: str
        :param group_vector: The group_vector of this TAKUser.  # noqa: E501
        :type group_vector: str
        :param activated: The activated of this TAKUser.  # noqa: E501
        :type activated: bool
        """
        self.swagger_types = {
            'id': int,
            'user_name': str,
            'email_address': str,
            'first_name': str,
            'last_name': str,
            'phone_number': str,
            'organization': str,
            'token': str,
            'state': str,
            'group_vector': str,
            'activated': bool
        }

        self.attribute_map = {
            'id': 'id',
            'user_name': 'userName',
            'email_address': 'emailAddress',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'phone_number': 'phoneNumber',
            'organization': 'organization',
            'token': 'token',
            'state': 'state',
            'group_vector': 'groupVector',
            'activated': 'activated'
        }
        self._id = id
        self._user_name = user_name
        self._email_address = email_address
        self._first_name = first_name
        self._last_name = last_name
        self._phone_number = phone_number
        self._organization = organization
        self._token = token
        self._state = state
        self._group_vector = group_vector
        self._activated = activated

    @classmethod
    def from_dict(cls, dikt) -> 'TAKUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TAKUser of this TAKUser.  # noqa: E501
        :rtype: TAKUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this TAKUser.


        :return: The id of this TAKUser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this TAKUser.


        :param id: The id of this TAKUser.
        :type id: int
        """

        self._id = id

    @property
    def user_name(self) -> str:
        """Gets the user_name of this TAKUser.


        :return: The user_name of this TAKUser.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this TAKUser.


        :param user_name: The user_name of this TAKUser.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def email_address(self) -> str:
        """Gets the email_address of this TAKUser.


        :return: The email_address of this TAKUser.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address: str):
        """Sets the email_address of this TAKUser.


        :param email_address: The email_address of this TAKUser.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def first_name(self) -> str:
        """Gets the first_name of this TAKUser.


        :return: The first_name of this TAKUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this TAKUser.


        :param first_name: The first_name of this TAKUser.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this TAKUser.


        :return: The last_name of this TAKUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this TAKUser.


        :param last_name: The last_name of this TAKUser.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone_number(self) -> str:
        """Gets the phone_number of this TAKUser.


        :return: The phone_number of this TAKUser.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number: str):
        """Sets the phone_number of this TAKUser.


        :param phone_number: The phone_number of this TAKUser.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def organization(self) -> str:
        """Gets the organization of this TAKUser.


        :return: The organization of this TAKUser.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: str):
        """Sets the organization of this TAKUser.


        :param organization: The organization of this TAKUser.
        :type organization: str
        """

        self._organization = organization

    @property
    def token(self) -> str:
        """Gets the token of this TAKUser.


        :return: The token of this TAKUser.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this TAKUser.


        :param token: The token of this TAKUser.
        :type token: str
        """

        self._token = token

    @property
    def state(self) -> str:
        """Gets the state of this TAKUser.


        :return: The state of this TAKUser.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this TAKUser.


        :param state: The state of this TAKUser.
        :type state: str
        """

        self._state = state

    @property
    def group_vector(self) -> str:
        """Gets the group_vector of this TAKUser.


        :return: The group_vector of this TAKUser.
        :rtype: str
        """
        return self._group_vector

    @group_vector.setter
    def group_vector(self, group_vector: str):
        """Sets the group_vector of this TAKUser.


        :param group_vector: The group_vector of this TAKUser.
        :type group_vector: str
        """

        self._group_vector = group_vector

    @property
    def activated(self) -> bool:
        """Gets the activated of this TAKUser.


        :return: The activated of this TAKUser.
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated: bool):
        """Sets the activated of this TAKUser.


        :param activated: The activated of this TAKUser.
        :type activated: bool
        """

        self._activated = activated
