# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.connection_info_cert import ConnectionInfoCert  # noqa: F401,E501
from swagger_server.models.connection_info_read_count import ConnectionInfoReadCount  # noqa: F401,E501
from swagger_server.models.input import Input  # noqa: F401,E501
from swagger_server import util


class ConnectionInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, connection_id: str=None, node_id: str=None, port: int=None, address: str=None, tls: bool=None, input: Input=None, cert: ConnectionInfoCert=None, ca_cert: ConnectionInfoCert=None, client: bool=None, handler: object=None, read_count: ConnectionInfoReadCount=None, processed_count: ConnectionInfoReadCount=None):  # noqa: E501
        """ConnectionInfo - a model defined in Swagger

        :param connection_id: The connection_id of this ConnectionInfo.  # noqa: E501
        :type connection_id: str
        :param node_id: The node_id of this ConnectionInfo.  # noqa: E501
        :type node_id: str
        :param port: The port of this ConnectionInfo.  # noqa: E501
        :type port: int
        :param address: The address of this ConnectionInfo.  # noqa: E501
        :type address: str
        :param tls: The tls of this ConnectionInfo.  # noqa: E501
        :type tls: bool
        :param input: The input of this ConnectionInfo.  # noqa: E501
        :type input: Input
        :param cert: The cert of this ConnectionInfo.  # noqa: E501
        :type cert: ConnectionInfoCert
        :param ca_cert: The ca_cert of this ConnectionInfo.  # noqa: E501
        :type ca_cert: ConnectionInfoCert
        :param client: The client of this ConnectionInfo.  # noqa: E501
        :type client: bool
        :param handler: The handler of this ConnectionInfo.  # noqa: E501
        :type handler: object
        :param read_count: The read_count of this ConnectionInfo.  # noqa: E501
        :type read_count: ConnectionInfoReadCount
        :param processed_count: The processed_count of this ConnectionInfo.  # noqa: E501
        :type processed_count: ConnectionInfoReadCount
        """
        self.swagger_types = {
            'connection_id': str,
            'node_id': str,
            'port': int,
            'address': str,
            'tls': bool,
            'input': Input,
            'cert': ConnectionInfoCert,
            'ca_cert': ConnectionInfoCert,
            'client': bool,
            'handler': object,
            'read_count': ConnectionInfoReadCount,
            'processed_count': ConnectionInfoReadCount
        }

        self.attribute_map = {
            'connection_id': 'connectionId',
            'node_id': 'nodeId',
            'port': 'port',
            'address': 'address',
            'tls': 'tls',
            'input': 'input',
            'cert': 'cert',
            'ca_cert': 'caCert',
            'client': 'client',
            'handler': 'handler',
            'read_count': 'readCount',
            'processed_count': 'processedCount'
        }
        self._connection_id = connection_id
        self._node_id = node_id
        self._port = port
        self._address = address
        self._tls = tls
        self._input = input
        self._cert = cert
        self._ca_cert = ca_cert
        self._client = client
        self._handler = handler
        self._read_count = read_count
        self._processed_count = processed_count

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConnectionInfo of this ConnectionInfo.  # noqa: E501
        :rtype: ConnectionInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_id(self) -> str:
        """Gets the connection_id of this ConnectionInfo.


        :return: The connection_id of this ConnectionInfo.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id: str):
        """Sets the connection_id of this ConnectionInfo.


        :param connection_id: The connection_id of this ConnectionInfo.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def node_id(self) -> str:
        """Gets the node_id of this ConnectionInfo.


        :return: The node_id of this ConnectionInfo.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: str):
        """Sets the node_id of this ConnectionInfo.


        :param node_id: The node_id of this ConnectionInfo.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def port(self) -> int:
        """Gets the port of this ConnectionInfo.


        :return: The port of this ConnectionInfo.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this ConnectionInfo.


        :param port: The port of this ConnectionInfo.
        :type port: int
        """

        self._port = port

    @property
    def address(self) -> str:
        """Gets the address of this ConnectionInfo.


        :return: The address of this ConnectionInfo.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this ConnectionInfo.


        :param address: The address of this ConnectionInfo.
        :type address: str
        """

        self._address = address

    @property
    def tls(self) -> bool:
        """Gets the tls of this ConnectionInfo.


        :return: The tls of this ConnectionInfo.
        :rtype: bool
        """
        return self._tls

    @tls.setter
    def tls(self, tls: bool):
        """Sets the tls of this ConnectionInfo.


        :param tls: The tls of this ConnectionInfo.
        :type tls: bool
        """

        self._tls = tls

    @property
    def input(self) -> Input:
        """Gets the input of this ConnectionInfo.


        :return: The input of this ConnectionInfo.
        :rtype: Input
        """
        return self._input

    @input.setter
    def input(self, input: Input):
        """Sets the input of this ConnectionInfo.


        :param input: The input of this ConnectionInfo.
        :type input: Input
        """

        self._input = input

    @property
    def cert(self) -> ConnectionInfoCert:
        """Gets the cert of this ConnectionInfo.


        :return: The cert of this ConnectionInfo.
        :rtype: ConnectionInfoCert
        """
        return self._cert

    @cert.setter
    def cert(self, cert: ConnectionInfoCert):
        """Sets the cert of this ConnectionInfo.


        :param cert: The cert of this ConnectionInfo.
        :type cert: ConnectionInfoCert
        """

        self._cert = cert

    @property
    def ca_cert(self) -> ConnectionInfoCert:
        """Gets the ca_cert of this ConnectionInfo.


        :return: The ca_cert of this ConnectionInfo.
        :rtype: ConnectionInfoCert
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert: ConnectionInfoCert):
        """Sets the ca_cert of this ConnectionInfo.


        :param ca_cert: The ca_cert of this ConnectionInfo.
        :type ca_cert: ConnectionInfoCert
        """

        self._ca_cert = ca_cert

    @property
    def client(self) -> bool:
        """Gets the client of this ConnectionInfo.


        :return: The client of this ConnectionInfo.
        :rtype: bool
        """
        return self._client

    @client.setter
    def client(self, client: bool):
        """Sets the client of this ConnectionInfo.


        :param client: The client of this ConnectionInfo.
        :type client: bool
        """

        self._client = client

    @property
    def handler(self) -> object:
        """Gets the handler of this ConnectionInfo.


        :return: The handler of this ConnectionInfo.
        :rtype: object
        """
        return self._handler

    @handler.setter
    def handler(self, handler: object):
        """Sets the handler of this ConnectionInfo.


        :param handler: The handler of this ConnectionInfo.
        :type handler: object
        """

        self._handler = handler

    @property
    def read_count(self) -> ConnectionInfoReadCount:
        """Gets the read_count of this ConnectionInfo.


        :return: The read_count of this ConnectionInfo.
        :rtype: ConnectionInfoReadCount
        """
        return self._read_count

    @read_count.setter
    def read_count(self, read_count: ConnectionInfoReadCount):
        """Sets the read_count of this ConnectionInfo.


        :param read_count: The read_count of this ConnectionInfo.
        :type read_count: ConnectionInfoReadCount
        """

        self._read_count = read_count

    @property
    def processed_count(self) -> ConnectionInfoReadCount:
        """Gets the processed_count of this ConnectionInfo.


        :return: The processed_count of this ConnectionInfo.
        :rtype: ConnectionInfoReadCount
        """
        return self._processed_count

    @processed_count.setter
    def processed_count(self, processed_count: ConnectionInfoReadCount):
        """Sets the processed_count of this ConnectionInfo.


        :param processed_count: The processed_count of this ConnectionInfo.
        :type processed_count: ConnectionInfoReadCount
        """

        self._processed_count = processed_count
