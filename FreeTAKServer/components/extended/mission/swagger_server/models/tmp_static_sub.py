# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TmpStaticSub(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uid: str=None, protocol: str=None, subaddr: str=None, subport: str=None, to: str=None, xpath: str=None, filter_groups: str=None, iface: str=None):  # noqa: E501
        """TmpStaticSub - a model defined in Swagger

        :param uid: The uid of this TmpStaticSub.  # noqa: E501
        :type uid: str
        :param protocol: The protocol of this TmpStaticSub.  # noqa: E501
        :type protocol: str
        :param subaddr: The subaddr of this TmpStaticSub.  # noqa: E501
        :type subaddr: str
        :param subport: The subport of this TmpStaticSub.  # noqa: E501
        :type subport: str
        :param to: The to of this TmpStaticSub.  # noqa: E501
        :type to: str
        :param xpath: The xpath of this TmpStaticSub.  # noqa: E501
        :type xpath: str
        :param filter_groups: The filter_groups of this TmpStaticSub.  # noqa: E501
        :type filter_groups: str
        :param iface: The iface of this TmpStaticSub.  # noqa: E501
        :type iface: str
        """
        self.swagger_types = {
            'uid': str,
            'protocol': str,
            'subaddr': str,
            'subport': str,
            'to': str,
            'xpath': str,
            'filter_groups': str,
            'iface': str
        }

        self.attribute_map = {
            'uid': 'uid',
            'protocol': 'protocol',
            'subaddr': 'subaddr',
            'subport': 'subport',
            'to': 'to',
            'xpath': 'xpath',
            'filter_groups': 'filterGroups',
            'iface': 'iface'
        }
        self._uid = uid
        self._protocol = protocol
        self._subaddr = subaddr
        self._subport = subport
        self._to = to
        self._xpath = xpath
        self._filter_groups = filter_groups
        self._iface = iface

    @classmethod
    def from_dict(cls, dikt) -> 'TmpStaticSub':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tmpStaticSub of this TmpStaticSub.  # noqa: E501
        :rtype: TmpStaticSub
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self) -> str:
        """Gets the uid of this TmpStaticSub.


        :return: The uid of this TmpStaticSub.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this TmpStaticSub.


        :param uid: The uid of this TmpStaticSub.
        :type uid: str
        """

        self._uid = uid

    @property
    def protocol(self) -> str:
        """Gets the protocol of this TmpStaticSub.


        :return: The protocol of this TmpStaticSub.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this TmpStaticSub.


        :param protocol: The protocol of this TmpStaticSub.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def subaddr(self) -> str:
        """Gets the subaddr of this TmpStaticSub.


        :return: The subaddr of this TmpStaticSub.
        :rtype: str
        """
        return self._subaddr

    @subaddr.setter
    def subaddr(self, subaddr: str):
        """Sets the subaddr of this TmpStaticSub.


        :param subaddr: The subaddr of this TmpStaticSub.
        :type subaddr: str
        """

        self._subaddr = subaddr

    @property
    def subport(self) -> str:
        """Gets the subport of this TmpStaticSub.


        :return: The subport of this TmpStaticSub.
        :rtype: str
        """
        return self._subport

    @subport.setter
    def subport(self, subport: str):
        """Sets the subport of this TmpStaticSub.


        :param subport: The subport of this TmpStaticSub.
        :type subport: str
        """

        self._subport = subport

    @property
    def to(self) -> str:
        """Gets the to of this TmpStaticSub.


        :return: The to of this TmpStaticSub.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this TmpStaticSub.


        :param to: The to of this TmpStaticSub.
        :type to: str
        """

        self._to = to

    @property
    def xpath(self) -> str:
        """Gets the xpath of this TmpStaticSub.


        :return: The xpath of this TmpStaticSub.
        :rtype: str
        """
        return self._xpath

    @xpath.setter
    def xpath(self, xpath: str):
        """Sets the xpath of this TmpStaticSub.


        :param xpath: The xpath of this TmpStaticSub.
        :type xpath: str
        """

        self._xpath = xpath

    @property
    def filter_groups(self) -> str:
        """Gets the filter_groups of this TmpStaticSub.


        :return: The filter_groups of this TmpStaticSub.
        :rtype: str
        """
        return self._filter_groups

    @filter_groups.setter
    def filter_groups(self, filter_groups: str):
        """Sets the filter_groups of this TmpStaticSub.


        :param filter_groups: The filter_groups of this TmpStaticSub.
        :type filter_groups: str
        """

        self._filter_groups = filter_groups

    @property
    def iface(self) -> str:
        """Gets the iface of this TmpStaticSub.


        :return: The iface of this TmpStaticSub.
        :rtype: str
        """
        return self._iface

    @iface.setter
    def iface(self, iface: str):
        """Sets the iface of this TmpStaticSub.


        :param iface: The iface of this TmpStaticSub.
        :type iface: str
        """

        self._iface = iface
