# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RemoteSubscriptionMetrics(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, app_framerate: str=None, battery: str=None, battery_status: str=None, battery_temp: str=None, device_data_rx: str=None, device_data_tx: str=None, heap_current_size: str=None, heap_free_size: str=None, heap_max_size: str=None, ip_address: str=None, storage_available: str=None, storage_total: str=None):  # noqa: E501
        """RemoteSubscriptionMetrics - a model defined in Swagger

        :param app_framerate: The app_framerate of this RemoteSubscriptionMetrics.  # noqa: E501
        :type app_framerate: str
        :param battery: The battery of this RemoteSubscriptionMetrics.  # noqa: E501
        :type battery: str
        :param battery_status: The battery_status of this RemoteSubscriptionMetrics.  # noqa: E501
        :type battery_status: str
        :param battery_temp: The battery_temp of this RemoteSubscriptionMetrics.  # noqa: E501
        :type battery_temp: str
        :param device_data_rx: The device_data_rx of this RemoteSubscriptionMetrics.  # noqa: E501
        :type device_data_rx: str
        :param device_data_tx: The device_data_tx of this RemoteSubscriptionMetrics.  # noqa: E501
        :type device_data_tx: str
        :param heap_current_size: The heap_current_size of this RemoteSubscriptionMetrics.  # noqa: E501
        :type heap_current_size: str
        :param heap_free_size: The heap_free_size of this RemoteSubscriptionMetrics.  # noqa: E501
        :type heap_free_size: str
        :param heap_max_size: The heap_max_size of this RemoteSubscriptionMetrics.  # noqa: E501
        :type heap_max_size: str
        :param ip_address: The ip_address of this RemoteSubscriptionMetrics.  # noqa: E501
        :type ip_address: str
        :param storage_available: The storage_available of this RemoteSubscriptionMetrics.  # noqa: E501
        :type storage_available: str
        :param storage_total: The storage_total of this RemoteSubscriptionMetrics.  # noqa: E501
        :type storage_total: str
        """
        self.swagger_types = {
            'app_framerate': str,
            'battery': str,
            'battery_status': str,
            'battery_temp': str,
            'device_data_rx': str,
            'device_data_tx': str,
            'heap_current_size': str,
            'heap_free_size': str,
            'heap_max_size': str,
            'ip_address': str,
            'storage_available': str,
            'storage_total': str
        }

        self.attribute_map = {
            'app_framerate': 'appFramerate',
            'battery': 'battery',
            'battery_status': 'batteryStatus',
            'battery_temp': 'batteryTemp',
            'device_data_rx': 'deviceDataRx',
            'device_data_tx': 'deviceDataTx',
            'heap_current_size': 'heapCurrentSize',
            'heap_free_size': 'heapFreeSize',
            'heap_max_size': 'heapMaxSize',
            'ip_address': 'ipAddress',
            'storage_available': 'storageAvailable',
            'storage_total': 'storageTotal'
        }
        self._app_framerate = app_framerate
        self._battery = battery
        self._battery_status = battery_status
        self._battery_temp = battery_temp
        self._device_data_rx = device_data_rx
        self._device_data_tx = device_data_tx
        self._heap_current_size = heap_current_size
        self._heap_free_size = heap_free_size
        self._heap_max_size = heap_max_size
        self._ip_address = ip_address
        self._storage_available = storage_available
        self._storage_total = storage_total

    @classmethod
    def from_dict(cls, dikt) -> 'RemoteSubscriptionMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RemoteSubscriptionMetrics of this RemoteSubscriptionMetrics.  # noqa: E501
        :rtype: RemoteSubscriptionMetrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_framerate(self) -> str:
        """Gets the app_framerate of this RemoteSubscriptionMetrics.


        :return: The app_framerate of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._app_framerate

    @app_framerate.setter
    def app_framerate(self, app_framerate: str):
        """Sets the app_framerate of this RemoteSubscriptionMetrics.


        :param app_framerate: The app_framerate of this RemoteSubscriptionMetrics.
        :type app_framerate: str
        """

        self._app_framerate = app_framerate

    @property
    def battery(self) -> str:
        """Gets the battery of this RemoteSubscriptionMetrics.


        :return: The battery of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._battery

    @battery.setter
    def battery(self, battery: str):
        """Sets the battery of this RemoteSubscriptionMetrics.


        :param battery: The battery of this RemoteSubscriptionMetrics.
        :type battery: str
        """

        self._battery = battery

    @property
    def battery_status(self) -> str:
        """Gets the battery_status of this RemoteSubscriptionMetrics.


        :return: The battery_status of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._battery_status

    @battery_status.setter
    def battery_status(self, battery_status: str):
        """Sets the battery_status of this RemoteSubscriptionMetrics.


        :param battery_status: The battery_status of this RemoteSubscriptionMetrics.
        :type battery_status: str
        """

        self._battery_status = battery_status

    @property
    def battery_temp(self) -> str:
        """Gets the battery_temp of this RemoteSubscriptionMetrics.


        :return: The battery_temp of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._battery_temp

    @battery_temp.setter
    def battery_temp(self, battery_temp: str):
        """Sets the battery_temp of this RemoteSubscriptionMetrics.


        :param battery_temp: The battery_temp of this RemoteSubscriptionMetrics.
        :type battery_temp: str
        """

        self._battery_temp = battery_temp

    @property
    def device_data_rx(self) -> str:
        """Gets the device_data_rx of this RemoteSubscriptionMetrics.


        :return: The device_data_rx of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._device_data_rx

    @device_data_rx.setter
    def device_data_rx(self, device_data_rx: str):
        """Sets the device_data_rx of this RemoteSubscriptionMetrics.


        :param device_data_rx: The device_data_rx of this RemoteSubscriptionMetrics.
        :type device_data_rx: str
        """

        self._device_data_rx = device_data_rx

    @property
    def device_data_tx(self) -> str:
        """Gets the device_data_tx of this RemoteSubscriptionMetrics.


        :return: The device_data_tx of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._device_data_tx

    @device_data_tx.setter
    def device_data_tx(self, device_data_tx: str):
        """Sets the device_data_tx of this RemoteSubscriptionMetrics.


        :param device_data_tx: The device_data_tx of this RemoteSubscriptionMetrics.
        :type device_data_tx: str
        """

        self._device_data_tx = device_data_tx

    @property
    def heap_current_size(self) -> str:
        """Gets the heap_current_size of this RemoteSubscriptionMetrics.


        :return: The heap_current_size of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._heap_current_size

    @heap_current_size.setter
    def heap_current_size(self, heap_current_size: str):
        """Sets the heap_current_size of this RemoteSubscriptionMetrics.


        :param heap_current_size: The heap_current_size of this RemoteSubscriptionMetrics.
        :type heap_current_size: str
        """

        self._heap_current_size = heap_current_size

    @property
    def heap_free_size(self) -> str:
        """Gets the heap_free_size of this RemoteSubscriptionMetrics.


        :return: The heap_free_size of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._heap_free_size

    @heap_free_size.setter
    def heap_free_size(self, heap_free_size: str):
        """Sets the heap_free_size of this RemoteSubscriptionMetrics.


        :param heap_free_size: The heap_free_size of this RemoteSubscriptionMetrics.
        :type heap_free_size: str
        """

        self._heap_free_size = heap_free_size

    @property
    def heap_max_size(self) -> str:
        """Gets the heap_max_size of this RemoteSubscriptionMetrics.


        :return: The heap_max_size of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._heap_max_size

    @heap_max_size.setter
    def heap_max_size(self, heap_max_size: str):
        """Sets the heap_max_size of this RemoteSubscriptionMetrics.


        :param heap_max_size: The heap_max_size of this RemoteSubscriptionMetrics.
        :type heap_max_size: str
        """

        self._heap_max_size = heap_max_size

    @property
    def ip_address(self) -> str:
        """Gets the ip_address of this RemoteSubscriptionMetrics.


        :return: The ip_address of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address: str):
        """Sets the ip_address of this RemoteSubscriptionMetrics.


        :param ip_address: The ip_address of this RemoteSubscriptionMetrics.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def storage_available(self) -> str:
        """Gets the storage_available of this RemoteSubscriptionMetrics.


        :return: The storage_available of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._storage_available

    @storage_available.setter
    def storage_available(self, storage_available: str):
        """Sets the storage_available of this RemoteSubscriptionMetrics.


        :param storage_available: The storage_available of this RemoteSubscriptionMetrics.
        :type storage_available: str
        """

        self._storage_available = storage_available

    @property
    def storage_total(self) -> str:
        """Gets the storage_total of this RemoteSubscriptionMetrics.


        :return: The storage_total of this RemoteSubscriptionMetrics.
        :rtype: str
        """
        return self._storage_total

    @storage_total.setter
    def storage_total(self, storage_total: str):
        """Sets the storage_total of this RemoteSubscriptionMetrics.


        :param storage_total: The storage_total of this RemoteSubscriptionMetrics.
        :type storage_total: str
        """

        self._storage_total = storage_total
