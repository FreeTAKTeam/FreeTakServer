# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.certificate_config import CertificateConfig  # noqa: F401,E501
from swagger_server.models.microsoft_ca_config import MicrosoftCAConfig  # noqa: F401,E501
from swagger_server.models.tak_server_ca_config import TAKServerCAConfig  # noqa: F401,E501
from swagger_server import util


class CertificateSigning(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, certificate_config: CertificateConfig=None, microsoft_ca_config: MicrosoftCAConfig=None, ca: str=None, takserver_ca_config: TAKServerCAConfig=None):  # noqa: E501
        """CertificateSigning - a model defined in Swagger

        :param certificate_config: The certificate_config of this CertificateSigning.  # noqa: E501
        :type certificate_config: CertificateConfig
        :param microsoft_ca_config: The microsoft_ca_config of this CertificateSigning.  # noqa: E501
        :type microsoft_ca_config: MicrosoftCAConfig
        :param ca: The ca of this CertificateSigning.  # noqa: E501
        :type ca: str
        :param takserver_ca_config: The takserver_ca_config of this CertificateSigning.  # noqa: E501
        :type takserver_ca_config: TAKServerCAConfig
        """
        self.swagger_types = {
            'certificate_config': CertificateConfig,
            'microsoft_ca_config': MicrosoftCAConfig,
            'ca': str,
            'takserver_ca_config': TAKServerCAConfig
        }

        self.attribute_map = {
            'certificate_config': 'certificateConfig',
            'microsoft_ca_config': 'microsoftCAConfig',
            'ca': 'ca',
            'takserver_ca_config': 'takserverCAConfig'
        }
        self._certificate_config = certificate_config
        self._microsoft_ca_config = microsoft_ca_config
        self._ca = ca
        self._takserver_ca_config = takserver_ca_config

    @classmethod
    def from_dict(cls, dikt) -> 'CertificateSigning':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CertificateSigning of this CertificateSigning.  # noqa: E501
        :rtype: CertificateSigning
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_config(self) -> CertificateConfig:
        """Gets the certificate_config of this CertificateSigning.


        :return: The certificate_config of this CertificateSigning.
        :rtype: CertificateConfig
        """
        return self._certificate_config

    @certificate_config.setter
    def certificate_config(self, certificate_config: CertificateConfig):
        """Sets the certificate_config of this CertificateSigning.


        :param certificate_config: The certificate_config of this CertificateSigning.
        :type certificate_config: CertificateConfig
        """
        if certificate_config is None:
            raise ValueError("Invalid value for `certificate_config`, must not be `None`")  # noqa: E501

        self._certificate_config = certificate_config

    @property
    def microsoft_ca_config(self) -> MicrosoftCAConfig:
        """Gets the microsoft_ca_config of this CertificateSigning.


        :return: The microsoft_ca_config of this CertificateSigning.
        :rtype: MicrosoftCAConfig
        """
        return self._microsoft_ca_config

    @microsoft_ca_config.setter
    def microsoft_ca_config(self, microsoft_ca_config: MicrosoftCAConfig):
        """Sets the microsoft_ca_config of this CertificateSigning.


        :param microsoft_ca_config: The microsoft_ca_config of this CertificateSigning.
        :type microsoft_ca_config: MicrosoftCAConfig
        """

        self._microsoft_ca_config = microsoft_ca_config

    @property
    def ca(self) -> str:
        """Gets the ca of this CertificateSigning.


        :return: The ca of this CertificateSigning.
        :rtype: str
        """
        return self._ca

    @ca.setter
    def ca(self, ca: str):
        """Sets the ca of this CertificateSigning.


        :param ca: The ca of this CertificateSigning.
        :type ca: str
        """
        allowed_values = ["MICROSOFT_CA", "TAK_SERVER"]  # noqa: E501
        if ca not in allowed_values:
            raise ValueError(
                "Invalid value for `ca` ({0}), must be one of {1}"
                .format(ca, allowed_values)
            )

        self._ca = ca

    @property
    def takserver_ca_config(self) -> TAKServerCAConfig:
        """Gets the takserver_ca_config of this CertificateSigning.


        :return: The takserver_ca_config of this CertificateSigning.
        :rtype: TAKServerCAConfig
        """
        return self._takserver_ca_config

    @takserver_ca_config.setter
    def takserver_ca_config(self, takserver_ca_config: TAKServerCAConfig):
        """Sets the takserver_ca_config of this CertificateSigning.


        :param takserver_ca_config: The takserver_ca_config of this CertificateSigning.
        :type takserver_ca_config: TAKServerCAConfig
        """

        self._takserver_ca_config = takserver_ca_config
