# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.whitelist import Whitelist  # noqa: F401,E501
from swagger_server import util


class Email(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, whitelist: List[Whitelist]=None, log_alerts_extension: List[str]=None, host: str=None, port: int=None, username: str=None, password: str=None, _from: str=None, support_name: str=None, support_email: str=None, registration_port: int=None, log_alerts_enabled: bool=None, log_alerts_to: str=None, log_alerts_subject: str=None):  # noqa: E501
        """Email - a model defined in Swagger

        :param whitelist: The whitelist of this Email.  # noqa: E501
        :type whitelist: List[Whitelist]
        :param log_alerts_extension: The log_alerts_extension of this Email.  # noqa: E501
        :type log_alerts_extension: List[str]
        :param host: The host of this Email.  # noqa: E501
        :type host: str
        :param port: The port of this Email.  # noqa: E501
        :type port: int
        :param username: The username of this Email.  # noqa: E501
        :type username: str
        :param password: The password of this Email.  # noqa: E501
        :type password: str
        :param _from: The _from of this Email.  # noqa: E501
        :type _from: str
        :param support_name: The support_name of this Email.  # noqa: E501
        :type support_name: str
        :param support_email: The support_email of this Email.  # noqa: E501
        :type support_email: str
        :param registration_port: The registration_port of this Email.  # noqa: E501
        :type registration_port: int
        :param log_alerts_enabled: The log_alerts_enabled of this Email.  # noqa: E501
        :type log_alerts_enabled: bool
        :param log_alerts_to: The log_alerts_to of this Email.  # noqa: E501
        :type log_alerts_to: str
        :param log_alerts_subject: The log_alerts_subject of this Email.  # noqa: E501
        :type log_alerts_subject: str
        """
        self.swagger_types = {
            'whitelist': List[Whitelist],
            'log_alerts_extension': List[str],
            'host': str,
            'port': int,
            'username': str,
            'password': str,
            '_from': str,
            'support_name': str,
            'support_email': str,
            'registration_port': int,
            'log_alerts_enabled': bool,
            'log_alerts_to': str,
            'log_alerts_subject': str
        }

        self.attribute_map = {
            'whitelist': 'whitelist',
            'log_alerts_extension': 'logAlertsExtension',
            'host': 'host',
            'port': 'port',
            'username': 'username',
            'password': 'password',
            '_from': 'from',
            'support_name': 'supportName',
            'support_email': 'supportEmail',
            'registration_port': 'registrationPort',
            'log_alerts_enabled': 'logAlertsEnabled',
            'log_alerts_to': 'logAlertsTo',
            'log_alerts_subject': 'logAlertsSubject'
        }
        self._whitelist = whitelist
        self._log_alerts_extension = log_alerts_extension
        self._host = host
        self._port = port
        self._username = username
        self._password = password
        self.__from = _from
        self._support_name = support_name
        self._support_email = support_email
        self._registration_port = registration_port
        self._log_alerts_enabled = log_alerts_enabled
        self._log_alerts_to = log_alerts_to
        self._log_alerts_subject = log_alerts_subject

    @classmethod
    def from_dict(cls, dikt) -> 'Email':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Email of this Email.  # noqa: E501
        :rtype: Email
        """
        return util.deserialize_model(dikt, cls)

    @property
    def whitelist(self) -> List[Whitelist]:
        """Gets the whitelist of this Email.


        :return: The whitelist of this Email.
        :rtype: List[Whitelist]
        """
        return self._whitelist

    @whitelist.setter
    def whitelist(self, whitelist: List[Whitelist]):
        """Sets the whitelist of this Email.


        :param whitelist: The whitelist of this Email.
        :type whitelist: List[Whitelist]
        """

        self._whitelist = whitelist

    @property
    def log_alerts_extension(self) -> List[str]:
        """Gets the log_alerts_extension of this Email.


        :return: The log_alerts_extension of this Email.
        :rtype: List[str]
        """
        return self._log_alerts_extension

    @log_alerts_extension.setter
    def log_alerts_extension(self, log_alerts_extension: List[str]):
        """Sets the log_alerts_extension of this Email.


        :param log_alerts_extension: The log_alerts_extension of this Email.
        :type log_alerts_extension: List[str]
        """

        self._log_alerts_extension = log_alerts_extension

    @property
    def host(self) -> str:
        """Gets the host of this Email.


        :return: The host of this Email.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this Email.


        :param host: The host of this Email.
        :type host: str
        """

        self._host = host

    @property
    def port(self) -> int:
        """Gets the port of this Email.


        :return: The port of this Email.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this Email.


        :param port: The port of this Email.
        :type port: int
        """

        self._port = port

    @property
    def username(self) -> str:
        """Gets the username of this Email.


        :return: The username of this Email.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Email.


        :param username: The username of this Email.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this Email.


        :return: The password of this Email.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this Email.


        :param password: The password of this Email.
        :type password: str
        """

        self._password = password

    @property
    def _from(self) -> str:
        """Gets the _from of this Email.


        :return: The _from of this Email.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this Email.


        :param _from: The _from of this Email.
        :type _from: str
        """

        self.__from = _from

    @property
    def support_name(self) -> str:
        """Gets the support_name of this Email.


        :return: The support_name of this Email.
        :rtype: str
        """
        return self._support_name

    @support_name.setter
    def support_name(self, support_name: str):
        """Sets the support_name of this Email.


        :param support_name: The support_name of this Email.
        :type support_name: str
        """

        self._support_name = support_name

    @property
    def support_email(self) -> str:
        """Gets the support_email of this Email.


        :return: The support_email of this Email.
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email: str):
        """Sets the support_email of this Email.


        :param support_email: The support_email of this Email.
        :type support_email: str
        """

        self._support_email = support_email

    @property
    def registration_port(self) -> int:
        """Gets the registration_port of this Email.


        :return: The registration_port of this Email.
        :rtype: int
        """
        return self._registration_port

    @registration_port.setter
    def registration_port(self, registration_port: int):
        """Sets the registration_port of this Email.


        :param registration_port: The registration_port of this Email.
        :type registration_port: int
        """

        self._registration_port = registration_port

    @property
    def log_alerts_enabled(self) -> bool:
        """Gets the log_alerts_enabled of this Email.


        :return: The log_alerts_enabled of this Email.
        :rtype: bool
        """
        return self._log_alerts_enabled

    @log_alerts_enabled.setter
    def log_alerts_enabled(self, log_alerts_enabled: bool):
        """Sets the log_alerts_enabled of this Email.


        :param log_alerts_enabled: The log_alerts_enabled of this Email.
        :type log_alerts_enabled: bool
        """

        self._log_alerts_enabled = log_alerts_enabled

    @property
    def log_alerts_to(self) -> str:
        """Gets the log_alerts_to of this Email.


        :return: The log_alerts_to of this Email.
        :rtype: str
        """
        return self._log_alerts_to

    @log_alerts_to.setter
    def log_alerts_to(self, log_alerts_to: str):
        """Sets the log_alerts_to of this Email.


        :param log_alerts_to: The log_alerts_to of this Email.
        :type log_alerts_to: str
        """

        self._log_alerts_to = log_alerts_to

    @property
    def log_alerts_subject(self) -> str:
        """Gets the log_alerts_subject of this Email.


        :return: The log_alerts_subject of this Email.
        :rtype: str
        """
        return self._log_alerts_subject

    @log_alerts_subject.setter
    def log_alerts_subject(self, log_alerts_subject: str):
        """Sets the log_alerts_subject of this Email.


        :param log_alerts_subject: The log_alerts_subject of this Email.
        :type log_alerts_subject: str
        """

        self._log_alerts_subject = log_alerts_subject
