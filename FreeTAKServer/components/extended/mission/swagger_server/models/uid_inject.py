# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UidInject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uid: str=None, to_inject: str=None):  # noqa: E501
        """UidInject - a model defined in Swagger

        :param uid: The uid of this UidInject.  # noqa: E501
        :type uid: str
        :param to_inject: The to_inject of this UidInject.  # noqa: E501
        :type to_inject: str
        """
        self.swagger_types = {
            'uid': str,
            'to_inject': str
        }

        self.attribute_map = {
            'uid': 'uid',
            'to_inject': 'toInject'
        }
        self._uid = uid
        self._to_inject = to_inject

    @classmethod
    def from_dict(cls, dikt) -> 'UidInject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UidInject of this UidInject.  # noqa: E501
        :rtype: UidInject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self) -> str:
        """Gets the uid of this UidInject.


        :return: The uid of this UidInject.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this UidInject.


        :param uid: The uid of this UidInject.
        :type uid: str
        """

        self._uid = uid

    @property
    def to_inject(self) -> str:
        """Gets the to_inject of this UidInject.


        :return: The to_inject of this UidInject.
        :rtype: str
        """
        return self._to_inject

    @to_inject.setter
    def to_inject(self, to_inject: str):
        """Sets the to_inject of this UidInject.


        :param to_inject: The to_inject of this UidInject.
        :type to_inject: str
        """

        self._to_inject = to_inject
