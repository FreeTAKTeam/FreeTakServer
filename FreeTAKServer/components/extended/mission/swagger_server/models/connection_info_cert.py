# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.connection_info_cert_issuer_dn import ConnectionInfoCertIssuerDN  # noqa: F401,E501
from swagger_server.models.connection_info_cert_public_key import ConnectionInfoCertPublicKey  # noqa: F401,E501
from swagger_server.models.connection_info_cert_subject_x500_principal import ConnectionInfoCertSubjectX500Principal  # noqa: F401,E501
from swagger_server import util


class ConnectionInfoCert(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, subject_x500_principal: ConnectionInfoCertSubjectX500Principal=None, issuer_x500_principal: ConnectionInfoCertSubjectX500Principal=None, signature: List[bytearray]=None, basic_constraints: int=None, version: int=None, issuer_dn: ConnectionInfoCertIssuerDN=None, subject_dn: ConnectionInfoCertIssuerDN=None, sig_alg_oid: str=None, sig_alg_params: List[bytearray]=None, issuer_unique_id: List[bool]=None, subject_unique_id: List[bool]=None, key_usage: List[bool]=None, subject_alternative_names: List[List[object]]=None, issuer_alternative_names: List[List[object]]=None, serial_number: int=None, extended_key_usage: List[str]=None, tbscertificate: List[bytearray]=None, sig_alg_name: str=None, not_after: datetime=None, not_before: datetime=None, critical_extension_oids: List[str]=None, non_critical_extension_oids: List[str]=None, encoded: List[bytearray]=None, public_key: ConnectionInfoCertPublicKey=None):  # noqa: E501
        """ConnectionInfoCert - a model defined in Swagger

        :param type: The type of this ConnectionInfoCert.  # noqa: E501
        :type type: str
        :param subject_x500_principal: The subject_x500_principal of this ConnectionInfoCert.  # noqa: E501
        :type subject_x500_principal: ConnectionInfoCertSubjectX500Principal
        :param issuer_x500_principal: The issuer_x500_principal of this ConnectionInfoCert.  # noqa: E501
        :type issuer_x500_principal: ConnectionInfoCertSubjectX500Principal
        :param signature: The signature of this ConnectionInfoCert.  # noqa: E501
        :type signature: List[bytearray]
        :param basic_constraints: The basic_constraints of this ConnectionInfoCert.  # noqa: E501
        :type basic_constraints: int
        :param version: The version of this ConnectionInfoCert.  # noqa: E501
        :type version: int
        :param issuer_dn: The issuer_dn of this ConnectionInfoCert.  # noqa: E501
        :type issuer_dn: ConnectionInfoCertIssuerDN
        :param subject_dn: The subject_dn of this ConnectionInfoCert.  # noqa: E501
        :type subject_dn: ConnectionInfoCertIssuerDN
        :param sig_alg_oid: The sig_alg_oid of this ConnectionInfoCert.  # noqa: E501
        :type sig_alg_oid: str
        :param sig_alg_params: The sig_alg_params of this ConnectionInfoCert.  # noqa: E501
        :type sig_alg_params: List[bytearray]
        :param issuer_unique_id: The issuer_unique_id of this ConnectionInfoCert.  # noqa: E501
        :type issuer_unique_id: List[bool]
        :param subject_unique_id: The subject_unique_id of this ConnectionInfoCert.  # noqa: E501
        :type subject_unique_id: List[bool]
        :param key_usage: The key_usage of this ConnectionInfoCert.  # noqa: E501
        :type key_usage: List[bool]
        :param subject_alternative_names: The subject_alternative_names of this ConnectionInfoCert.  # noqa: E501
        :type subject_alternative_names: List[List[object]]
        :param issuer_alternative_names: The issuer_alternative_names of this ConnectionInfoCert.  # noqa: E501
        :type issuer_alternative_names: List[List[object]]
        :param serial_number: The serial_number of this ConnectionInfoCert.  # noqa: E501
        :type serial_number: int
        :param extended_key_usage: The extended_key_usage of this ConnectionInfoCert.  # noqa: E501
        :type extended_key_usage: List[str]
        :param tbscertificate: The tbscertificate of this ConnectionInfoCert.  # noqa: E501
        :type tbscertificate: List[bytearray]
        :param sig_alg_name: The sig_alg_name of this ConnectionInfoCert.  # noqa: E501
        :type sig_alg_name: str
        :param not_after: The not_after of this ConnectionInfoCert.  # noqa: E501
        :type not_after: datetime
        :param not_before: The not_before of this ConnectionInfoCert.  # noqa: E501
        :type not_before: datetime
        :param critical_extension_oids: The critical_extension_oids of this ConnectionInfoCert.  # noqa: E501
        :type critical_extension_oids: List[str]
        :param non_critical_extension_oids: The non_critical_extension_oids of this ConnectionInfoCert.  # noqa: E501
        :type non_critical_extension_oids: List[str]
        :param encoded: The encoded of this ConnectionInfoCert.  # noqa: E501
        :type encoded: List[bytearray]
        :param public_key: The public_key of this ConnectionInfoCert.  # noqa: E501
        :type public_key: ConnectionInfoCertPublicKey
        """
        self.swagger_types = {
            'type': str,
            'subject_x500_principal': ConnectionInfoCertSubjectX500Principal,
            'issuer_x500_principal': ConnectionInfoCertSubjectX500Principal,
            'signature': List[bytearray],
            'basic_constraints': int,
            'version': int,
            'issuer_dn': ConnectionInfoCertIssuerDN,
            'subject_dn': ConnectionInfoCertIssuerDN,
            'sig_alg_oid': str,
            'sig_alg_params': List[bytearray],
            'issuer_unique_id': List[bool],
            'subject_unique_id': List[bool],
            'key_usage': List[bool],
            'subject_alternative_names': List[List[object]],
            'issuer_alternative_names': List[List[object]],
            'serial_number': int,
            'extended_key_usage': List[str],
            'tbscertificate': List[bytearray],
            'sig_alg_name': str,
            'not_after': datetime,
            'not_before': datetime,
            'critical_extension_oids': List[str],
            'non_critical_extension_oids': List[str],
            'encoded': List[bytearray],
            'public_key': ConnectionInfoCertPublicKey
        }

        self.attribute_map = {
            'type': 'type',
            'subject_x500_principal': 'subjectX500Principal',
            'issuer_x500_principal': 'issuerX500Principal',
            'signature': 'signature',
            'basic_constraints': 'basicConstraints',
            'version': 'version',
            'issuer_dn': 'issuerDN',
            'subject_dn': 'subjectDN',
            'sig_alg_oid': 'sigAlgOID',
            'sig_alg_params': 'sigAlgParams',
            'issuer_unique_id': 'issuerUniqueID',
            'subject_unique_id': 'subjectUniqueID',
            'key_usage': 'keyUsage',
            'subject_alternative_names': 'subjectAlternativeNames',
            'issuer_alternative_names': 'issuerAlternativeNames',
            'serial_number': 'serialNumber',
            'extended_key_usage': 'extendedKeyUsage',
            'tbscertificate': 'tbscertificate',
            'sig_alg_name': 'sigAlgName',
            'not_after': 'notAfter',
            'not_before': 'notBefore',
            'critical_extension_oids': 'criticalExtensionOIDs',
            'non_critical_extension_oids': 'nonCriticalExtensionOIDs',
            'encoded': 'encoded',
            'public_key': 'publicKey'
        }
        self._type = type
        self._subject_x500_principal = subject_x500_principal
        self._issuer_x500_principal = issuer_x500_principal
        self._signature = signature
        self._basic_constraints = basic_constraints
        self._version = version
        self._issuer_dn = issuer_dn
        self._subject_dn = subject_dn
        self._sig_alg_oid = sig_alg_oid
        self._sig_alg_params = sig_alg_params
        self._issuer_unique_id = issuer_unique_id
        self._subject_unique_id = subject_unique_id
        self._key_usage = key_usage
        self._subject_alternative_names = subject_alternative_names
        self._issuer_alternative_names = issuer_alternative_names
        self._serial_number = serial_number
        self._extended_key_usage = extended_key_usage
        self._tbscertificate = tbscertificate
        self._sig_alg_name = sig_alg_name
        self._not_after = not_after
        self._not_before = not_before
        self._critical_extension_oids = critical_extension_oids
        self._non_critical_extension_oids = non_critical_extension_oids
        self._encoded = encoded
        self._public_key = public_key

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectionInfoCert':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConnectionInfo_cert of this ConnectionInfoCert.  # noqa: E501
        :rtype: ConnectionInfoCert
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ConnectionInfoCert.


        :return: The type of this ConnectionInfoCert.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ConnectionInfoCert.


        :param type: The type of this ConnectionInfoCert.
        :type type: str
        """

        self._type = type

    @property
    def subject_x500_principal(self) -> ConnectionInfoCertSubjectX500Principal:
        """Gets the subject_x500_principal of this ConnectionInfoCert.


        :return: The subject_x500_principal of this ConnectionInfoCert.
        :rtype: ConnectionInfoCertSubjectX500Principal
        """
        return self._subject_x500_principal

    @subject_x500_principal.setter
    def subject_x500_principal(self, subject_x500_principal: ConnectionInfoCertSubjectX500Principal):
        """Sets the subject_x500_principal of this ConnectionInfoCert.


        :param subject_x500_principal: The subject_x500_principal of this ConnectionInfoCert.
        :type subject_x500_principal: ConnectionInfoCertSubjectX500Principal
        """

        self._subject_x500_principal = subject_x500_principal

    @property
    def issuer_x500_principal(self) -> ConnectionInfoCertSubjectX500Principal:
        """Gets the issuer_x500_principal of this ConnectionInfoCert.


        :return: The issuer_x500_principal of this ConnectionInfoCert.
        :rtype: ConnectionInfoCertSubjectX500Principal
        """
        return self._issuer_x500_principal

    @issuer_x500_principal.setter
    def issuer_x500_principal(self, issuer_x500_principal: ConnectionInfoCertSubjectX500Principal):
        """Sets the issuer_x500_principal of this ConnectionInfoCert.


        :param issuer_x500_principal: The issuer_x500_principal of this ConnectionInfoCert.
        :type issuer_x500_principal: ConnectionInfoCertSubjectX500Principal
        """

        self._issuer_x500_principal = issuer_x500_principal

    @property
    def signature(self) -> List[bytearray]:
        """Gets the signature of this ConnectionInfoCert.


        :return: The signature of this ConnectionInfoCert.
        :rtype: List[bytearray]
        """
        return self._signature

    @signature.setter
    def signature(self, signature: List[bytearray]):
        """Sets the signature of this ConnectionInfoCert.


        :param signature: The signature of this ConnectionInfoCert.
        :type signature: List[bytearray]
        """

        self._signature = signature

    @property
    def basic_constraints(self) -> int:
        """Gets the basic_constraints of this ConnectionInfoCert.


        :return: The basic_constraints of this ConnectionInfoCert.
        :rtype: int
        """
        return self._basic_constraints

    @basic_constraints.setter
    def basic_constraints(self, basic_constraints: int):
        """Sets the basic_constraints of this ConnectionInfoCert.


        :param basic_constraints: The basic_constraints of this ConnectionInfoCert.
        :type basic_constraints: int
        """

        self._basic_constraints = basic_constraints

    @property
    def version(self) -> int:
        """Gets the version of this ConnectionInfoCert.


        :return: The version of this ConnectionInfoCert.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this ConnectionInfoCert.


        :param version: The version of this ConnectionInfoCert.
        :type version: int
        """

        self._version = version

    @property
    def issuer_dn(self) -> ConnectionInfoCertIssuerDN:
        """Gets the issuer_dn of this ConnectionInfoCert.


        :return: The issuer_dn of this ConnectionInfoCert.
        :rtype: ConnectionInfoCertIssuerDN
        """
        return self._issuer_dn

    @issuer_dn.setter
    def issuer_dn(self, issuer_dn: ConnectionInfoCertIssuerDN):
        """Sets the issuer_dn of this ConnectionInfoCert.


        :param issuer_dn: The issuer_dn of this ConnectionInfoCert.
        :type issuer_dn: ConnectionInfoCertIssuerDN
        """

        self._issuer_dn = issuer_dn

    @property
    def subject_dn(self) -> ConnectionInfoCertIssuerDN:
        """Gets the subject_dn of this ConnectionInfoCert.


        :return: The subject_dn of this ConnectionInfoCert.
        :rtype: ConnectionInfoCertIssuerDN
        """
        return self._subject_dn

    @subject_dn.setter
    def subject_dn(self, subject_dn: ConnectionInfoCertIssuerDN):
        """Sets the subject_dn of this ConnectionInfoCert.


        :param subject_dn: The subject_dn of this ConnectionInfoCert.
        :type subject_dn: ConnectionInfoCertIssuerDN
        """

        self._subject_dn = subject_dn

    @property
    def sig_alg_oid(self) -> str:
        """Gets the sig_alg_oid of this ConnectionInfoCert.


        :return: The sig_alg_oid of this ConnectionInfoCert.
        :rtype: str
        """
        return self._sig_alg_oid

    @sig_alg_oid.setter
    def sig_alg_oid(self, sig_alg_oid: str):
        """Sets the sig_alg_oid of this ConnectionInfoCert.


        :param sig_alg_oid: The sig_alg_oid of this ConnectionInfoCert.
        :type sig_alg_oid: str
        """

        self._sig_alg_oid = sig_alg_oid

    @property
    def sig_alg_params(self) -> List[bytearray]:
        """Gets the sig_alg_params of this ConnectionInfoCert.


        :return: The sig_alg_params of this ConnectionInfoCert.
        :rtype: List[bytearray]
        """
        return self._sig_alg_params

    @sig_alg_params.setter
    def sig_alg_params(self, sig_alg_params: List[bytearray]):
        """Sets the sig_alg_params of this ConnectionInfoCert.


        :param sig_alg_params: The sig_alg_params of this ConnectionInfoCert.
        :type sig_alg_params: List[bytearray]
        """

        self._sig_alg_params = sig_alg_params

    @property
    def issuer_unique_id(self) -> List[bool]:
        """Gets the issuer_unique_id of this ConnectionInfoCert.


        :return: The issuer_unique_id of this ConnectionInfoCert.
        :rtype: List[bool]
        """
        return self._issuer_unique_id

    @issuer_unique_id.setter
    def issuer_unique_id(self, issuer_unique_id: List[bool]):
        """Sets the issuer_unique_id of this ConnectionInfoCert.


        :param issuer_unique_id: The issuer_unique_id of this ConnectionInfoCert.
        :type issuer_unique_id: List[bool]
        """

        self._issuer_unique_id = issuer_unique_id

    @property
    def subject_unique_id(self) -> List[bool]:
        """Gets the subject_unique_id of this ConnectionInfoCert.


        :return: The subject_unique_id of this ConnectionInfoCert.
        :rtype: List[bool]
        """
        return self._subject_unique_id

    @subject_unique_id.setter
    def subject_unique_id(self, subject_unique_id: List[bool]):
        """Sets the subject_unique_id of this ConnectionInfoCert.


        :param subject_unique_id: The subject_unique_id of this ConnectionInfoCert.
        :type subject_unique_id: List[bool]
        """

        self._subject_unique_id = subject_unique_id

    @property
    def key_usage(self) -> List[bool]:
        """Gets the key_usage of this ConnectionInfoCert.


        :return: The key_usage of this ConnectionInfoCert.
        :rtype: List[bool]
        """
        return self._key_usage

    @key_usage.setter
    def key_usage(self, key_usage: List[bool]):
        """Sets the key_usage of this ConnectionInfoCert.


        :param key_usage: The key_usage of this ConnectionInfoCert.
        :type key_usage: List[bool]
        """

        self._key_usage = key_usage

    @property
    def subject_alternative_names(self) -> List[List[object]]:
        """Gets the subject_alternative_names of this ConnectionInfoCert.


        :return: The subject_alternative_names of this ConnectionInfoCert.
        :rtype: List[List[object]]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names: List[List[object]]):
        """Sets the subject_alternative_names of this ConnectionInfoCert.


        :param subject_alternative_names: The subject_alternative_names of this ConnectionInfoCert.
        :type subject_alternative_names: List[List[object]]
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def issuer_alternative_names(self) -> List[List[object]]:
        """Gets the issuer_alternative_names of this ConnectionInfoCert.


        :return: The issuer_alternative_names of this ConnectionInfoCert.
        :rtype: List[List[object]]
        """
        return self._issuer_alternative_names

    @issuer_alternative_names.setter
    def issuer_alternative_names(self, issuer_alternative_names: List[List[object]]):
        """Sets the issuer_alternative_names of this ConnectionInfoCert.


        :param issuer_alternative_names: The issuer_alternative_names of this ConnectionInfoCert.
        :type issuer_alternative_names: List[List[object]]
        """

        self._issuer_alternative_names = issuer_alternative_names

    @property
    def serial_number(self) -> int:
        """Gets the serial_number of this ConnectionInfoCert.


        :return: The serial_number of this ConnectionInfoCert.
        :rtype: int
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number: int):
        """Sets the serial_number of this ConnectionInfoCert.


        :param serial_number: The serial_number of this ConnectionInfoCert.
        :type serial_number: int
        """

        self._serial_number = serial_number

    @property
    def extended_key_usage(self) -> List[str]:
        """Gets the extended_key_usage of this ConnectionInfoCert.


        :return: The extended_key_usage of this ConnectionInfoCert.
        :rtype: List[str]
        """
        return self._extended_key_usage

    @extended_key_usage.setter
    def extended_key_usage(self, extended_key_usage: List[str]):
        """Sets the extended_key_usage of this ConnectionInfoCert.


        :param extended_key_usage: The extended_key_usage of this ConnectionInfoCert.
        :type extended_key_usage: List[str]
        """

        self._extended_key_usage = extended_key_usage

    @property
    def tbscertificate(self) -> List[bytearray]:
        """Gets the tbscertificate of this ConnectionInfoCert.


        :return: The tbscertificate of this ConnectionInfoCert.
        :rtype: List[bytearray]
        """
        return self._tbscertificate

    @tbscertificate.setter
    def tbscertificate(self, tbscertificate: List[bytearray]):
        """Sets the tbscertificate of this ConnectionInfoCert.


        :param tbscertificate: The tbscertificate of this ConnectionInfoCert.
        :type tbscertificate: List[bytearray]
        """

        self._tbscertificate = tbscertificate

    @property
    def sig_alg_name(self) -> str:
        """Gets the sig_alg_name of this ConnectionInfoCert.


        :return: The sig_alg_name of this ConnectionInfoCert.
        :rtype: str
        """
        return self._sig_alg_name

    @sig_alg_name.setter
    def sig_alg_name(self, sig_alg_name: str):
        """Sets the sig_alg_name of this ConnectionInfoCert.


        :param sig_alg_name: The sig_alg_name of this ConnectionInfoCert.
        :type sig_alg_name: str
        """

        self._sig_alg_name = sig_alg_name

    @property
    def not_after(self) -> datetime:
        """Gets the not_after of this ConnectionInfoCert.


        :return: The not_after of this ConnectionInfoCert.
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after: datetime):
        """Sets the not_after of this ConnectionInfoCert.


        :param not_after: The not_after of this ConnectionInfoCert.
        :type not_after: datetime
        """

        self._not_after = not_after

    @property
    def not_before(self) -> datetime:
        """Gets the not_before of this ConnectionInfoCert.


        :return: The not_before of this ConnectionInfoCert.
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before: datetime):
        """Sets the not_before of this ConnectionInfoCert.


        :param not_before: The not_before of this ConnectionInfoCert.
        :type not_before: datetime
        """

        self._not_before = not_before

    @property
    def critical_extension_oids(self) -> List[str]:
        """Gets the critical_extension_oids of this ConnectionInfoCert.


        :return: The critical_extension_oids of this ConnectionInfoCert.
        :rtype: List[str]
        """
        return self._critical_extension_oids

    @critical_extension_oids.setter
    def critical_extension_oids(self, critical_extension_oids: List[str]):
        """Sets the critical_extension_oids of this ConnectionInfoCert.


        :param critical_extension_oids: The critical_extension_oids of this ConnectionInfoCert.
        :type critical_extension_oids: List[str]
        """

        self._critical_extension_oids = critical_extension_oids

    @property
    def non_critical_extension_oids(self) -> List[str]:
        """Gets the non_critical_extension_oids of this ConnectionInfoCert.


        :return: The non_critical_extension_oids of this ConnectionInfoCert.
        :rtype: List[str]
        """
        return self._non_critical_extension_oids

    @non_critical_extension_oids.setter
    def non_critical_extension_oids(self, non_critical_extension_oids: List[str]):
        """Sets the non_critical_extension_oids of this ConnectionInfoCert.


        :param non_critical_extension_oids: The non_critical_extension_oids of this ConnectionInfoCert.
        :type non_critical_extension_oids: List[str]
        """

        self._non_critical_extension_oids = non_critical_extension_oids

    @property
    def encoded(self) -> List[bytearray]:
        """Gets the encoded of this ConnectionInfoCert.


        :return: The encoded of this ConnectionInfoCert.
        :rtype: List[bytearray]
        """
        return self._encoded

    @encoded.setter
    def encoded(self, encoded: List[bytearray]):
        """Sets the encoded of this ConnectionInfoCert.


        :param encoded: The encoded of this ConnectionInfoCert.
        :type encoded: List[bytearray]
        """

        self._encoded = encoded

    @property
    def public_key(self) -> ConnectionInfoCertPublicKey:
        """Gets the public_key of this ConnectionInfoCert.


        :return: The public_key of this ConnectionInfoCert.
        :rtype: ConnectionInfoCertPublicKey
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key: ConnectionInfoCertPublicKey):
        """Sets the public_key of this ConnectionInfoCert.


        :param public_key: The public_key of this ConnectionInfoCert.
        :type public_key: ConnectionInfoCertPublicKey
        """

        self._public_key = public_key
