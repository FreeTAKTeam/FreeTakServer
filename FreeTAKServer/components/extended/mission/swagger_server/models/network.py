# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.announce import Announce  # noqa: F401,E501
from swagger_server.models.connector import Connector  # noqa: F401,E501
from swagger_server.models.data_feed import DataFeed  # noqa: F401,E501
from swagger_server.models.filter import Filter  # noqa: F401,E501
from swagger_server.models.input import Input  # noqa: F401,E501
from swagger_server import util


class Network(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, filter: Filter=None, input: List[Input]=None, datafeed: List[DataFeed]=None, connector: List[Connector]=None, announce: Announce=None, multicast_ttl: int=None, server_id: str=None, enterprise_sync_size_limit_mb: int=None, mission_package_auto_extract_size_limit_mb: int=None, http_session_timeout_minutes: int=None, ext_web_content_dir: str=None, tak_server_host: str=None, use_linux_epoll: bool=None, allow_all_origins: bool=None, esync_enable_cache: int=None, esync_enable_cot_filter: bool=None, esync_cot_filter: str=None, version: str=None, web_ciphers: str=None, tomcat_max_pool: int=None, cloudwatch_namespace: str=None, cloudwatch_metrics_batch_size: int=None, cloudwatch_enable: bool=None, cloudwatch_name: str=None, mission_cop_tool: str=None):  # noqa: E501
        """Network - a model defined in Swagger

        :param filter: The filter of this Network.  # noqa: E501
        :type filter: Filter
        :param input: The input of this Network.  # noqa: E501
        :type input: List[Input]
        :param datafeed: The datafeed of this Network.  # noqa: E501
        :type datafeed: List[DataFeed]
        :param connector: The connector of this Network.  # noqa: E501
        :type connector: List[Connector]
        :param announce: The announce of this Network.  # noqa: E501
        :type announce: Announce
        :param multicast_ttl: The multicast_ttl of this Network.  # noqa: E501
        :type multicast_ttl: int
        :param server_id: The server_id of this Network.  # noqa: E501
        :type server_id: str
        :param enterprise_sync_size_limit_mb: The enterprise_sync_size_limit_mb of this Network.  # noqa: E501
        :type enterprise_sync_size_limit_mb: int
        :param mission_package_auto_extract_size_limit_mb: The mission_package_auto_extract_size_limit_mb of this Network.  # noqa: E501
        :type mission_package_auto_extract_size_limit_mb: int
        :param http_session_timeout_minutes: The http_session_timeout_minutes of this Network.  # noqa: E501
        :type http_session_timeout_minutes: int
        :param ext_web_content_dir: The ext_web_content_dir of this Network.  # noqa: E501
        :type ext_web_content_dir: str
        :param tak_server_host: The tak_server_host of this Network.  # noqa: E501
        :type tak_server_host: str
        :param use_linux_epoll: The use_linux_epoll of this Network.  # noqa: E501
        :type use_linux_epoll: bool
        :param allow_all_origins: The allow_all_origins of this Network.  # noqa: E501
        :type allow_all_origins: bool
        :param esync_enable_cache: The esync_enable_cache of this Network.  # noqa: E501
        :type esync_enable_cache: int
        :param esync_enable_cot_filter: The esync_enable_cot_filter of this Network.  # noqa: E501
        :type esync_enable_cot_filter: bool
        :param esync_cot_filter: The esync_cot_filter of this Network.  # noqa: E501
        :type esync_cot_filter: str
        :param version: The version of this Network.  # noqa: E501
        :type version: str
        :param web_ciphers: The web_ciphers of this Network.  # noqa: E501
        :type web_ciphers: str
        :param tomcat_max_pool: The tomcat_max_pool of this Network.  # noqa: E501
        :type tomcat_max_pool: int
        :param cloudwatch_namespace: The cloudwatch_namespace of this Network.  # noqa: E501
        :type cloudwatch_namespace: str
        :param cloudwatch_metrics_batch_size: The cloudwatch_metrics_batch_size of this Network.  # noqa: E501
        :type cloudwatch_metrics_batch_size: int
        :param cloudwatch_enable: The cloudwatch_enable of this Network.  # noqa: E501
        :type cloudwatch_enable: bool
        :param cloudwatch_name: The cloudwatch_name of this Network.  # noqa: E501
        :type cloudwatch_name: str
        :param mission_cop_tool: The mission_cop_tool of this Network.  # noqa: E501
        :type mission_cop_tool: str
        """
        self.swagger_types = {
            'filter': Filter,
            'input': List[Input],
            'datafeed': List[DataFeed],
            'connector': List[Connector],
            'announce': Announce,
            'multicast_ttl': int,
            'server_id': str,
            'enterprise_sync_size_limit_mb': int,
            'mission_package_auto_extract_size_limit_mb': int,
            'http_session_timeout_minutes': int,
            'ext_web_content_dir': str,
            'tak_server_host': str,
            'use_linux_epoll': bool,
            'allow_all_origins': bool,
            'esync_enable_cache': int,
            'esync_enable_cot_filter': bool,
            'esync_cot_filter': str,
            'version': str,
            'web_ciphers': str,
            'tomcat_max_pool': int,
            'cloudwatch_namespace': str,
            'cloudwatch_metrics_batch_size': int,
            'cloudwatch_enable': bool,
            'cloudwatch_name': str,
            'mission_cop_tool': str
        }

        self.attribute_map = {
            'filter': 'filter',
            'input': 'input',
            'datafeed': 'datafeed',
            'connector': 'connector',
            'announce': 'announce',
            'multicast_ttl': 'multicastTTL',
            'server_id': 'serverId',
            'enterprise_sync_size_limit_mb': 'enterpriseSyncSizeLimitMB',
            'mission_package_auto_extract_size_limit_mb': 'missionPackageAutoExtractSizeLimitMB',
            'http_session_timeout_minutes': 'httpSessionTimeoutMinutes',
            'ext_web_content_dir': 'extWebContentDir',
            'tak_server_host': 'takServerHost',
            'use_linux_epoll': 'useLinuxEpoll',
            'allow_all_origins': 'allowAllOrigins',
            'esync_enable_cache': 'esyncEnableCache',
            'esync_enable_cot_filter': 'esyncEnableCotFilter',
            'esync_cot_filter': 'esyncCotFilter',
            'version': 'version',
            'web_ciphers': 'webCiphers',
            'tomcat_max_pool': 'tomcatMaxPool',
            'cloudwatch_namespace': 'cloudwatchNamespace',
            'cloudwatch_metrics_batch_size': 'cloudwatchMetricsBatchSize',
            'cloudwatch_enable': 'cloudwatchEnable',
            'cloudwatch_name': 'cloudwatchName',
            'mission_cop_tool': 'missionCopTool'
        }
        self._filter = filter
        self._input = input
        self._datafeed = datafeed
        self._connector = connector
        self._announce = announce
        self._multicast_ttl = multicast_ttl
        self._server_id = server_id
        self._enterprise_sync_size_limit_mb = enterprise_sync_size_limit_mb
        self._mission_package_auto_extract_size_limit_mb = mission_package_auto_extract_size_limit_mb
        self._http_session_timeout_minutes = http_session_timeout_minutes
        self._ext_web_content_dir = ext_web_content_dir
        self._tak_server_host = tak_server_host
        self._use_linux_epoll = use_linux_epoll
        self._allow_all_origins = allow_all_origins
        self._esync_enable_cache = esync_enable_cache
        self._esync_enable_cot_filter = esync_enable_cot_filter
        self._esync_cot_filter = esync_cot_filter
        self._version = version
        self._web_ciphers = web_ciphers
        self._tomcat_max_pool = tomcat_max_pool
        self._cloudwatch_namespace = cloudwatch_namespace
        self._cloudwatch_metrics_batch_size = cloudwatch_metrics_batch_size
        self._cloudwatch_enable = cloudwatch_enable
        self._cloudwatch_name = cloudwatch_name
        self._mission_cop_tool = mission_cop_tool

    @classmethod
    def from_dict(cls, dikt) -> 'Network':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Network of this Network.  # noqa: E501
        :rtype: Network
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self) -> Filter:
        """Gets the filter of this Network.


        :return: The filter of this Network.
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter: Filter):
        """Sets the filter of this Network.


        :param filter: The filter of this Network.
        :type filter: Filter
        """

        self._filter = filter

    @property
    def input(self) -> List[Input]:
        """Gets the input of this Network.


        :return: The input of this Network.
        :rtype: List[Input]
        """
        return self._input

    @input.setter
    def input(self, input: List[Input]):
        """Sets the input of this Network.


        :param input: The input of this Network.
        :type input: List[Input]
        """

        self._input = input

    @property
    def datafeed(self) -> List[DataFeed]:
        """Gets the datafeed of this Network.


        :return: The datafeed of this Network.
        :rtype: List[DataFeed]
        """
        return self._datafeed

    @datafeed.setter
    def datafeed(self, datafeed: List[DataFeed]):
        """Sets the datafeed of this Network.


        :param datafeed: The datafeed of this Network.
        :type datafeed: List[DataFeed]
        """

        self._datafeed = datafeed

    @property
    def connector(self) -> List[Connector]:
        """Gets the connector of this Network.


        :return: The connector of this Network.
        :rtype: List[Connector]
        """
        return self._connector

    @connector.setter
    def connector(self, connector: List[Connector]):
        """Sets the connector of this Network.


        :param connector: The connector of this Network.
        :type connector: List[Connector]
        """

        self._connector = connector

    @property
    def announce(self) -> Announce:
        """Gets the announce of this Network.


        :return: The announce of this Network.
        :rtype: Announce
        """
        return self._announce

    @announce.setter
    def announce(self, announce: Announce):
        """Sets the announce of this Network.


        :param announce: The announce of this Network.
        :type announce: Announce
        """

        self._announce = announce

    @property
    def multicast_ttl(self) -> int:
        """Gets the multicast_ttl of this Network.


        :return: The multicast_ttl of this Network.
        :rtype: int
        """
        return self._multicast_ttl

    @multicast_ttl.setter
    def multicast_ttl(self, multicast_ttl: int):
        """Sets the multicast_ttl of this Network.


        :param multicast_ttl: The multicast_ttl of this Network.
        :type multicast_ttl: int
        """

        self._multicast_ttl = multicast_ttl

    @property
    def server_id(self) -> str:
        """Gets the server_id of this Network.


        :return: The server_id of this Network.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id: str):
        """Sets the server_id of this Network.


        :param server_id: The server_id of this Network.
        :type server_id: str
        """

        self._server_id = server_id

    @property
    def enterprise_sync_size_limit_mb(self) -> int:
        """Gets the enterprise_sync_size_limit_mb of this Network.


        :return: The enterprise_sync_size_limit_mb of this Network.
        :rtype: int
        """
        return self._enterprise_sync_size_limit_mb

    @enterprise_sync_size_limit_mb.setter
    def enterprise_sync_size_limit_mb(self, enterprise_sync_size_limit_mb: int):
        """Sets the enterprise_sync_size_limit_mb of this Network.


        :param enterprise_sync_size_limit_mb: The enterprise_sync_size_limit_mb of this Network.
        :type enterprise_sync_size_limit_mb: int
        """

        self._enterprise_sync_size_limit_mb = enterprise_sync_size_limit_mb

    @property
    def mission_package_auto_extract_size_limit_mb(self) -> int:
        """Gets the mission_package_auto_extract_size_limit_mb of this Network.


        :return: The mission_package_auto_extract_size_limit_mb of this Network.
        :rtype: int
        """
        return self._mission_package_auto_extract_size_limit_mb

    @mission_package_auto_extract_size_limit_mb.setter
    def mission_package_auto_extract_size_limit_mb(self, mission_package_auto_extract_size_limit_mb: int):
        """Sets the mission_package_auto_extract_size_limit_mb of this Network.


        :param mission_package_auto_extract_size_limit_mb: The mission_package_auto_extract_size_limit_mb of this Network.
        :type mission_package_auto_extract_size_limit_mb: int
        """

        self._mission_package_auto_extract_size_limit_mb = mission_package_auto_extract_size_limit_mb

    @property
    def http_session_timeout_minutes(self) -> int:
        """Gets the http_session_timeout_minutes of this Network.


        :return: The http_session_timeout_minutes of this Network.
        :rtype: int
        """
        return self._http_session_timeout_minutes

    @http_session_timeout_minutes.setter
    def http_session_timeout_minutes(self, http_session_timeout_minutes: int):
        """Sets the http_session_timeout_minutes of this Network.


        :param http_session_timeout_minutes: The http_session_timeout_minutes of this Network.
        :type http_session_timeout_minutes: int
        """

        self._http_session_timeout_minutes = http_session_timeout_minutes

    @property
    def ext_web_content_dir(self) -> str:
        """Gets the ext_web_content_dir of this Network.


        :return: The ext_web_content_dir of this Network.
        :rtype: str
        """
        return self._ext_web_content_dir

    @ext_web_content_dir.setter
    def ext_web_content_dir(self, ext_web_content_dir: str):
        """Sets the ext_web_content_dir of this Network.


        :param ext_web_content_dir: The ext_web_content_dir of this Network.
        :type ext_web_content_dir: str
        """

        self._ext_web_content_dir = ext_web_content_dir

    @property
    def tak_server_host(self) -> str:
        """Gets the tak_server_host of this Network.


        :return: The tak_server_host of this Network.
        :rtype: str
        """
        return self._tak_server_host

    @tak_server_host.setter
    def tak_server_host(self, tak_server_host: str):
        """Sets the tak_server_host of this Network.


        :param tak_server_host: The tak_server_host of this Network.
        :type tak_server_host: str
        """

        self._tak_server_host = tak_server_host

    @property
    def use_linux_epoll(self) -> bool:
        """Gets the use_linux_epoll of this Network.


        :return: The use_linux_epoll of this Network.
        :rtype: bool
        """
        return self._use_linux_epoll

    @use_linux_epoll.setter
    def use_linux_epoll(self, use_linux_epoll: bool):
        """Sets the use_linux_epoll of this Network.


        :param use_linux_epoll: The use_linux_epoll of this Network.
        :type use_linux_epoll: bool
        """

        self._use_linux_epoll = use_linux_epoll

    @property
    def allow_all_origins(self) -> bool:
        """Gets the allow_all_origins of this Network.


        :return: The allow_all_origins of this Network.
        :rtype: bool
        """
        return self._allow_all_origins

    @allow_all_origins.setter
    def allow_all_origins(self, allow_all_origins: bool):
        """Sets the allow_all_origins of this Network.


        :param allow_all_origins: The allow_all_origins of this Network.
        :type allow_all_origins: bool
        """

        self._allow_all_origins = allow_all_origins

    @property
    def esync_enable_cache(self) -> int:
        """Gets the esync_enable_cache of this Network.


        :return: The esync_enable_cache of this Network.
        :rtype: int
        """
        return self._esync_enable_cache

    @esync_enable_cache.setter
    def esync_enable_cache(self, esync_enable_cache: int):
        """Sets the esync_enable_cache of this Network.


        :param esync_enable_cache: The esync_enable_cache of this Network.
        :type esync_enable_cache: int
        """

        self._esync_enable_cache = esync_enable_cache

    @property
    def esync_enable_cot_filter(self) -> bool:
        """Gets the esync_enable_cot_filter of this Network.


        :return: The esync_enable_cot_filter of this Network.
        :rtype: bool
        """
        return self._esync_enable_cot_filter

    @esync_enable_cot_filter.setter
    def esync_enable_cot_filter(self, esync_enable_cot_filter: bool):
        """Sets the esync_enable_cot_filter of this Network.


        :param esync_enable_cot_filter: The esync_enable_cot_filter of this Network.
        :type esync_enable_cot_filter: bool
        """

        self._esync_enable_cot_filter = esync_enable_cot_filter

    @property
    def esync_cot_filter(self) -> str:
        """Gets the esync_cot_filter of this Network.


        :return: The esync_cot_filter of this Network.
        :rtype: str
        """
        return self._esync_cot_filter

    @esync_cot_filter.setter
    def esync_cot_filter(self, esync_cot_filter: str):
        """Sets the esync_cot_filter of this Network.


        :param esync_cot_filter: The esync_cot_filter of this Network.
        :type esync_cot_filter: str
        """

        self._esync_cot_filter = esync_cot_filter

    @property
    def version(self) -> str:
        """Gets the version of this Network.


        :return: The version of this Network.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this Network.


        :param version: The version of this Network.
        :type version: str
        """

        self._version = version

    @property
    def web_ciphers(self) -> str:
        """Gets the web_ciphers of this Network.


        :return: The web_ciphers of this Network.
        :rtype: str
        """
        return self._web_ciphers

    @web_ciphers.setter
    def web_ciphers(self, web_ciphers: str):
        """Sets the web_ciphers of this Network.


        :param web_ciphers: The web_ciphers of this Network.
        :type web_ciphers: str
        """

        self._web_ciphers = web_ciphers

    @property
    def tomcat_max_pool(self) -> int:
        """Gets the tomcat_max_pool of this Network.


        :return: The tomcat_max_pool of this Network.
        :rtype: int
        """
        return self._tomcat_max_pool

    @tomcat_max_pool.setter
    def tomcat_max_pool(self, tomcat_max_pool: int):
        """Sets the tomcat_max_pool of this Network.


        :param tomcat_max_pool: The tomcat_max_pool of this Network.
        :type tomcat_max_pool: int
        """

        self._tomcat_max_pool = tomcat_max_pool

    @property
    def cloudwatch_namespace(self) -> str:
        """Gets the cloudwatch_namespace of this Network.


        :return: The cloudwatch_namespace of this Network.
        :rtype: str
        """
        return self._cloudwatch_namespace

    @cloudwatch_namespace.setter
    def cloudwatch_namespace(self, cloudwatch_namespace: str):
        """Sets the cloudwatch_namespace of this Network.


        :param cloudwatch_namespace: The cloudwatch_namespace of this Network.
        :type cloudwatch_namespace: str
        """

        self._cloudwatch_namespace = cloudwatch_namespace

    @property
    def cloudwatch_metrics_batch_size(self) -> int:
        """Gets the cloudwatch_metrics_batch_size of this Network.


        :return: The cloudwatch_metrics_batch_size of this Network.
        :rtype: int
        """
        return self._cloudwatch_metrics_batch_size

    @cloudwatch_metrics_batch_size.setter
    def cloudwatch_metrics_batch_size(self, cloudwatch_metrics_batch_size: int):
        """Sets the cloudwatch_metrics_batch_size of this Network.


        :param cloudwatch_metrics_batch_size: The cloudwatch_metrics_batch_size of this Network.
        :type cloudwatch_metrics_batch_size: int
        """

        self._cloudwatch_metrics_batch_size = cloudwatch_metrics_batch_size

    @property
    def cloudwatch_enable(self) -> bool:
        """Gets the cloudwatch_enable of this Network.


        :return: The cloudwatch_enable of this Network.
        :rtype: bool
        """
        return self._cloudwatch_enable

    @cloudwatch_enable.setter
    def cloudwatch_enable(self, cloudwatch_enable: bool):
        """Sets the cloudwatch_enable of this Network.


        :param cloudwatch_enable: The cloudwatch_enable of this Network.
        :type cloudwatch_enable: bool
        """

        self._cloudwatch_enable = cloudwatch_enable

    @property
    def cloudwatch_name(self) -> str:
        """Gets the cloudwatch_name of this Network.


        :return: The cloudwatch_name of this Network.
        :rtype: str
        """
        return self._cloudwatch_name

    @cloudwatch_name.setter
    def cloudwatch_name(self, cloudwatch_name: str):
        """Sets the cloudwatch_name of this Network.


        :param cloudwatch_name: The cloudwatch_name of this Network.
        :type cloudwatch_name: str
        """

        self._cloudwatch_name = cloudwatch_name

    @property
    def mission_cop_tool(self) -> str:
        """Gets the mission_cop_tool of this Network.


        :return: The mission_cop_tool of this Network.
        :rtype: str
        """
        return self._mission_cop_tool

    @mission_cop_tool.setter
    def mission_cop_tool(self, mission_cop_tool: str):
        """Sets the mission_cop_tool of this Network.


        :param mission_cop_tool: The mission_cop_tool of this Network.
        :type mission_cop_tool: str
        """

        self._mission_cop_tool = mission_cop_tool
