# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RateLimitRule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, client_threshold_count: int=None, reporting_rate_limit_seconds: int=None):  # noqa: E501
        """RateLimitRule - a model defined in Swagger

        :param client_threshold_count: The client_threshold_count of this RateLimitRule.  # noqa: E501
        :type client_threshold_count: int
        :param reporting_rate_limit_seconds: The reporting_rate_limit_seconds of this RateLimitRule.  # noqa: E501
        :type reporting_rate_limit_seconds: int
        """
        self.swagger_types = {
            'client_threshold_count': int,
            'reporting_rate_limit_seconds': int
        }

        self.attribute_map = {
            'client_threshold_count': 'clientThresholdCount',
            'reporting_rate_limit_seconds': 'reportingRateLimitSeconds'
        }
        self._client_threshold_count = client_threshold_count
        self._reporting_rate_limit_seconds = reporting_rate_limit_seconds

    @classmethod
    def from_dict(cls, dikt) -> 'RateLimitRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RateLimitRule of this RateLimitRule.  # noqa: E501
        :rtype: RateLimitRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_threshold_count(self) -> int:
        """Gets the client_threshold_count of this RateLimitRule.


        :return: The client_threshold_count of this RateLimitRule.
        :rtype: int
        """
        return self._client_threshold_count

    @client_threshold_count.setter
    def client_threshold_count(self, client_threshold_count: int):
        """Sets the client_threshold_count of this RateLimitRule.


        :param client_threshold_count: The client_threshold_count of this RateLimitRule.
        :type client_threshold_count: int
        """

        self._client_threshold_count = client_threshold_count

    @property
    def reporting_rate_limit_seconds(self) -> int:
        """Gets the reporting_rate_limit_seconds of this RateLimitRule.


        :return: The reporting_rate_limit_seconds of this RateLimitRule.
        :rtype: int
        """
        return self._reporting_rate_limit_seconds

    @reporting_rate_limit_seconds.setter
    def reporting_rate_limit_seconds(self, reporting_rate_limit_seconds: int):
        """Sets the reporting_rate_limit_seconds of this RateLimitRule.


        :param reporting_rate_limit_seconds: The reporting_rate_limit_seconds of this RateLimitRule.
        :type reporting_rate_limit_seconds: int
        """

        self._reporting_rate_limit_seconds = reporting_rate_limit_seconds
