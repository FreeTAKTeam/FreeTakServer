# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Federate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, inbound_group_mapping: List[str]=None, inbound_group: List[str]=None, outbound_group: List[str]=None, id: str=None, name: str=None, notes: str=None, share_alerts: bool=None, archive: bool=None, federated_group_mapping: bool=None, automatic_group_mapping: bool=None):  # noqa: E501
        """Federate - a model defined in Swagger

        :param inbound_group_mapping: The inbound_group_mapping of this Federate.  # noqa: E501
        :type inbound_group_mapping: List[str]
        :param inbound_group: The inbound_group of this Federate.  # noqa: E501
        :type inbound_group: List[str]
        :param outbound_group: The outbound_group of this Federate.  # noqa: E501
        :type outbound_group: List[str]
        :param id: The id of this Federate.  # noqa: E501
        :type id: str
        :param name: The name of this Federate.  # noqa: E501
        :type name: str
        :param notes: The notes of this Federate.  # noqa: E501
        :type notes: str
        :param share_alerts: The share_alerts of this Federate.  # noqa: E501
        :type share_alerts: bool
        :param archive: The archive of this Federate.  # noqa: E501
        :type archive: bool
        :param federated_group_mapping: The federated_group_mapping of this Federate.  # noqa: E501
        :type federated_group_mapping: bool
        :param automatic_group_mapping: The automatic_group_mapping of this Federate.  # noqa: E501
        :type automatic_group_mapping: bool
        """
        self.swagger_types = {
            'inbound_group_mapping': List[str],
            'inbound_group': List[str],
            'outbound_group': List[str],
            'id': str,
            'name': str,
            'notes': str,
            'share_alerts': bool,
            'archive': bool,
            'federated_group_mapping': bool,
            'automatic_group_mapping': bool
        }

        self.attribute_map = {
            'inbound_group_mapping': 'inboundGroupMapping',
            'inbound_group': 'inboundGroup',
            'outbound_group': 'outboundGroup',
            'id': 'id',
            'name': 'name',
            'notes': 'notes',
            'share_alerts': 'shareAlerts',
            'archive': 'archive',
            'federated_group_mapping': 'federatedGroupMapping',
            'automatic_group_mapping': 'automaticGroupMapping'
        }
        self._inbound_group_mapping = inbound_group_mapping
        self._inbound_group = inbound_group
        self._outbound_group = outbound_group
        self._id = id
        self._name = name
        self._notes = notes
        self._share_alerts = share_alerts
        self._archive = archive
        self._federated_group_mapping = federated_group_mapping
        self._automatic_group_mapping = automatic_group_mapping

    @classmethod
    def from_dict(cls, dikt) -> 'Federate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Federate of this Federate.  # noqa: E501
        :rtype: Federate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inbound_group_mapping(self) -> List[str]:
        """Gets the inbound_group_mapping of this Federate.


        :return: The inbound_group_mapping of this Federate.
        :rtype: List[str]
        """
        return self._inbound_group_mapping

    @inbound_group_mapping.setter
    def inbound_group_mapping(self, inbound_group_mapping: List[str]):
        """Sets the inbound_group_mapping of this Federate.


        :param inbound_group_mapping: The inbound_group_mapping of this Federate.
        :type inbound_group_mapping: List[str]
        """

        self._inbound_group_mapping = inbound_group_mapping

    @property
    def inbound_group(self) -> List[str]:
        """Gets the inbound_group of this Federate.


        :return: The inbound_group of this Federate.
        :rtype: List[str]
        """
        return self._inbound_group

    @inbound_group.setter
    def inbound_group(self, inbound_group: List[str]):
        """Sets the inbound_group of this Federate.


        :param inbound_group: The inbound_group of this Federate.
        :type inbound_group: List[str]
        """

        self._inbound_group = inbound_group

    @property
    def outbound_group(self) -> List[str]:
        """Gets the outbound_group of this Federate.


        :return: The outbound_group of this Federate.
        :rtype: List[str]
        """
        return self._outbound_group

    @outbound_group.setter
    def outbound_group(self, outbound_group: List[str]):
        """Sets the outbound_group of this Federate.


        :param outbound_group: The outbound_group of this Federate.
        :type outbound_group: List[str]
        """

        self._outbound_group = outbound_group

    @property
    def id(self) -> str:
        """Gets the id of this Federate.


        :return: The id of this Federate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Federate.


        :param id: The id of this Federate.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Federate.


        :return: The name of this Federate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Federate.


        :param name: The name of this Federate.
        :type name: str
        """

        self._name = name

    @property
    def notes(self) -> str:
        """Gets the notes of this Federate.


        :return: The notes of this Federate.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this Federate.


        :param notes: The notes of this Federate.
        :type notes: str
        """

        self._notes = notes

    @property
    def share_alerts(self) -> bool:
        """Gets the share_alerts of this Federate.


        :return: The share_alerts of this Federate.
        :rtype: bool
        """
        return self._share_alerts

    @share_alerts.setter
    def share_alerts(self, share_alerts: bool):
        """Sets the share_alerts of this Federate.


        :param share_alerts: The share_alerts of this Federate.
        :type share_alerts: bool
        """

        self._share_alerts = share_alerts

    @property
    def archive(self) -> bool:
        """Gets the archive of this Federate.


        :return: The archive of this Federate.
        :rtype: bool
        """
        return self._archive

    @archive.setter
    def archive(self, archive: bool):
        """Sets the archive of this Federate.


        :param archive: The archive of this Federate.
        :type archive: bool
        """

        self._archive = archive

    @property
    def federated_group_mapping(self) -> bool:
        """Gets the federated_group_mapping of this Federate.


        :return: The federated_group_mapping of this Federate.
        :rtype: bool
        """
        return self._federated_group_mapping

    @federated_group_mapping.setter
    def federated_group_mapping(self, federated_group_mapping: bool):
        """Sets the federated_group_mapping of this Federate.


        :param federated_group_mapping: The federated_group_mapping of this Federate.
        :type federated_group_mapping: bool
        """

        self._federated_group_mapping = federated_group_mapping

    @property
    def automatic_group_mapping(self) -> bool:
        """Gets the automatic_group_mapping of this Federate.


        :return: The automatic_group_mapping of this Federate.
        :rtype: bool
        """
        return self._automatic_group_mapping

    @automatic_group_mapping.setter
    def automatic_group_mapping(self, automatic_group_mapping: bool):
        """Sets the automatic_group_mapping of this Federate.


        :param automatic_group_mapping: The automatic_group_mapping of this Federate.
        :type automatic_group_mapping: bool
        """

        self._automatic_group_mapping = automatic_group_mapping
