# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ServerConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, version: str=None, api: str=None, hostname: str=None):  # noqa: E501
        """ServerConfig - a model defined in Swagger

        :param version: The version of this ServerConfig.  # noqa: E501
        :type version: str
        :param api: The api of this ServerConfig.  # noqa: E501
        :type api: str
        :param hostname: The hostname of this ServerConfig.  # noqa: E501
        :type hostname: str
        """
        self.swagger_types = {
            'version': str,
            'api': str,
            'hostname': str
        }

        self.attribute_map = {
            'version': 'version',
            'api': 'api',
            'hostname': 'hostname'
        }
        self._version = version
        self._api = api
        self._hostname = hostname

    @classmethod
    def from_dict(cls, dikt) -> 'ServerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServerConfig of this ServerConfig.  # noqa: E501
        :rtype: ServerConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self) -> str:
        """Gets the version of this ServerConfig.


        :return: The version of this ServerConfig.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this ServerConfig.


        :param version: The version of this ServerConfig.
        :type version: str
        """

        self._version = version

    @property
    def api(self) -> str:
        """Gets the api of this ServerConfig.


        :return: The api of this ServerConfig.
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api: str):
        """Sets the api of this ServerConfig.


        :param api: The api of this ServerConfig.
        :type api: str
        """

        self._api = api

    @property
    def hostname(self) -> str:
        """Gets the hostname of this ServerConfig.


        :return: The hostname of this ServerConfig.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname: str):
        """Sets the hostname of this ServerConfig.


        :param hostname: The hostname of this ServerConfig.
        :type hostname: str
        """

        self._hostname = hostname
