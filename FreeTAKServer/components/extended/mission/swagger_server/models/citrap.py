# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Citrap(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, enable_notifications: bool=None, notification_cot: str=None, nonsubscriber_cot_filter: str=None, search_radius: int=None, search_secago: int=None):  # noqa: E501
        """Citrap - a model defined in Swagger

        :param enable_notifications: The enable_notifications of this Citrap.  # noqa: E501
        :type enable_notifications: bool
        :param notification_cot: The notification_cot of this Citrap.  # noqa: E501
        :type notification_cot: str
        :param nonsubscriber_cot_filter: The nonsubscriber_cot_filter of this Citrap.  # noqa: E501
        :type nonsubscriber_cot_filter: str
        :param search_radius: The search_radius of this Citrap.  # noqa: E501
        :type search_radius: int
        :param search_secago: The search_secago of this Citrap.  # noqa: E501
        :type search_secago: int
        """
        self.swagger_types = {
            'enable_notifications': bool,
            'notification_cot': str,
            'nonsubscriber_cot_filter': str,
            'search_radius': int,
            'search_secago': int
        }

        self.attribute_map = {
            'enable_notifications': 'enableNotifications',
            'notification_cot': 'notificationCot',
            'nonsubscriber_cot_filter': 'nonsubscriberCotFilter',
            'search_radius': 'searchRadius',
            'search_secago': 'searchSecago'
        }
        self._enable_notifications = enable_notifications
        self._notification_cot = notification_cot
        self._nonsubscriber_cot_filter = nonsubscriber_cot_filter
        self._search_radius = search_radius
        self._search_secago = search_secago

    @classmethod
    def from_dict(cls, dikt) -> 'Citrap':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Citrap of this Citrap.  # noqa: E501
        :rtype: Citrap
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_notifications(self) -> bool:
        """Gets the enable_notifications of this Citrap.


        :return: The enable_notifications of this Citrap.
        :rtype: bool
        """
        return self._enable_notifications

    @enable_notifications.setter
    def enable_notifications(self, enable_notifications: bool):
        """Sets the enable_notifications of this Citrap.


        :param enable_notifications: The enable_notifications of this Citrap.
        :type enable_notifications: bool
        """

        self._enable_notifications = enable_notifications

    @property
    def notification_cot(self) -> str:
        """Gets the notification_cot of this Citrap.


        :return: The notification_cot of this Citrap.
        :rtype: str
        """
        return self._notification_cot

    @notification_cot.setter
    def notification_cot(self, notification_cot: str):
        """Sets the notification_cot of this Citrap.


        :param notification_cot: The notification_cot of this Citrap.
        :type notification_cot: str
        """

        self._notification_cot = notification_cot

    @property
    def nonsubscriber_cot_filter(self) -> str:
        """Gets the nonsubscriber_cot_filter of this Citrap.


        :return: The nonsubscriber_cot_filter of this Citrap.
        :rtype: str
        """
        return self._nonsubscriber_cot_filter

    @nonsubscriber_cot_filter.setter
    def nonsubscriber_cot_filter(self, nonsubscriber_cot_filter: str):
        """Sets the nonsubscriber_cot_filter of this Citrap.


        :param nonsubscriber_cot_filter: The nonsubscriber_cot_filter of this Citrap.
        :type nonsubscriber_cot_filter: str
        """

        self._nonsubscriber_cot_filter = nonsubscriber_cot_filter

    @property
    def search_radius(self) -> int:
        """Gets the search_radius of this Citrap.


        :return: The search_radius of this Citrap.
        :rtype: int
        """
        return self._search_radius

    @search_radius.setter
    def search_radius(self, search_radius: int):
        """Sets the search_radius of this Citrap.


        :param search_radius: The search_radius of this Citrap.
        :type search_radius: int
        """

        self._search_radius = search_radius

    @property
    def search_secago(self) -> int:
        """Gets the search_secago of this Citrap.


        :return: The search_secago of this Citrap.
        :rtype: int
        """
        return self._search_secago

    @search_secago.setter
    def search_secago(self, search_secago: int):
        """Sets the search_secago of this Citrap.


        :param search_secago: The search_secago of this Citrap.
        :type search_secago: int
        """

        self._search_secago = search_secago
