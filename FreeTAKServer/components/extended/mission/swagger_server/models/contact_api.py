# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ContactApi(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, group_name: str=None, write_only: bool=None):  # noqa: E501
        """ContactApi - a model defined in Swagger

        :param group_name: The group_name of this ContactApi.  # noqa: E501
        :type group_name: str
        :param write_only: The write_only of this ContactApi.  # noqa: E501
        :type write_only: bool
        """
        self.swagger_types = {
            'group_name': str,
            'write_only': bool
        }

        self.attribute_map = {
            'group_name': 'groupName',
            'write_only': 'writeOnly'
        }
        self._group_name = group_name
        self._write_only = write_only

    @classmethod
    def from_dict(cls, dikt) -> 'ContactApi':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContactApi of this ContactApi.  # noqa: E501
        :rtype: ContactApi
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self) -> str:
        """Gets the group_name of this ContactApi.


        :return: The group_name of this ContactApi.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name: str):
        """Sets the group_name of this ContactApi.


        :param group_name: The group_name of this ContactApi.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def write_only(self) -> bool:
        """Gets the write_only of this ContactApi.


        :return: The write_only of this ContactApi.
        :rtype: bool
        """
        return self._write_only

    @write_only.setter
    def write_only(self, write_only: bool):
        """Sets the write_only of this ContactApi.


        :param write_only: The write_only of this ContactApi.
        :type write_only: bool
        """

        self._write_only = write_only
