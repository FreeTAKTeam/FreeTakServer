# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.missions import Missions  # noqa: F401,E501
from swagger_server import util


class ChecklistDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, uid: str=None, description: str=None, start_time: str=None, template_name: str=None, creator_uid: str=None, creator_callsign: str=None, missions: Missions=None):  # noqa: E501
        """ChecklistDetails - a model defined in Swagger

        :param name: The name of this ChecklistDetails.  # noqa: E501
        :type name: str
        :param uid: The uid of this ChecklistDetails.  # noqa: E501
        :type uid: str
        :param description: The description of this ChecklistDetails.  # noqa: E501
        :type description: str
        :param start_time: The start_time of this ChecklistDetails.  # noqa: E501
        :type start_time: str
        :param template_name: The template_name of this ChecklistDetails.  # noqa: E501
        :type template_name: str
        :param creator_uid: The creator_uid of this ChecklistDetails.  # noqa: E501
        :type creator_uid: str
        :param creator_callsign: The creator_callsign of this ChecklistDetails.  # noqa: E501
        :type creator_callsign: str
        :param missions: The missions of this ChecklistDetails.  # noqa: E501
        :type missions: Missions
        """
        self.swagger_types = {
            'name': str,
            'uid': str,
            'description': str,
            'start_time': str,
            'template_name': str,
            'creator_uid': str,
            'creator_callsign': str,
            'missions': Missions
        }

        self.attribute_map = {
            'name': 'name',
            'uid': 'uid',
            'description': 'description',
            'start_time': 'startTime',
            'template_name': 'templateName',
            'creator_uid': 'creatorUid',
            'creator_callsign': 'creatorCallsign',
            'missions': 'missions'
        }
        self._name = name
        self._uid = uid
        self._description = description
        self._start_time = start_time
        self._template_name = template_name
        self._creator_uid = creator_uid
        self._creator_callsign = creator_callsign
        self._missions = missions

    @classmethod
    def from_dict(cls, dikt) -> 'ChecklistDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChecklistDetails of this ChecklistDetails.  # noqa: E501
        :rtype: ChecklistDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ChecklistDetails.


        :return: The name of this ChecklistDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ChecklistDetails.


        :param name: The name of this ChecklistDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def uid(self) -> str:
        """Gets the uid of this ChecklistDetails.


        :return: The uid of this ChecklistDetails.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this ChecklistDetails.


        :param uid: The uid of this ChecklistDetails.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def description(self) -> str:
        """Gets the description of this ChecklistDetails.


        :return: The description of this ChecklistDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ChecklistDetails.


        :param description: The description of this ChecklistDetails.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def start_time(self) -> str:
        """Gets the start_time of this ChecklistDetails.


        :return: The start_time of this ChecklistDetails.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this ChecklistDetails.


        :param start_time: The start_time of this ChecklistDetails.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def template_name(self) -> str:
        """Gets the template_name of this ChecklistDetails.


        :return: The template_name of this ChecklistDetails.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name: str):
        """Sets the template_name of this ChecklistDetails.


        :param template_name: The template_name of this ChecklistDetails.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")  # noqa: E501

        self._template_name = template_name

    @property
    def creator_uid(self) -> str:
        """Gets the creator_uid of this ChecklistDetails.


        :return: The creator_uid of this ChecklistDetails.
        :rtype: str
        """
        return self._creator_uid

    @creator_uid.setter
    def creator_uid(self, creator_uid: str):
        """Sets the creator_uid of this ChecklistDetails.


        :param creator_uid: The creator_uid of this ChecklistDetails.
        :type creator_uid: str
        """
        if creator_uid is None:
            raise ValueError("Invalid value for `creator_uid`, must not be `None`")  # noqa: E501

        self._creator_uid = creator_uid

    @property
    def creator_callsign(self) -> str:
        """Gets the creator_callsign of this ChecklistDetails.


        :return: The creator_callsign of this ChecklistDetails.
        :rtype: str
        """
        return self._creator_callsign

    @creator_callsign.setter
    def creator_callsign(self, creator_callsign: str):
        """Sets the creator_callsign of this ChecklistDetails.


        :param creator_callsign: The creator_callsign of this ChecklistDetails.
        :type creator_callsign: str
        """
        if creator_callsign is None:
            raise ValueError("Invalid value for `creator_callsign`, must not be `None`")  # noqa: E501

        self._creator_callsign = creator_callsign

    @property
    def missions(self) -> Missions:
        """Gets the missions of this ChecklistDetails.


        :return: The missions of this ChecklistDetails.
        :rtype: Missions
        """
        return self._missions

    @missions.setter
    def missions(self, missions: Missions):
        """Sets the missions of this ChecklistDetails.


        :param missions: The missions of this ChecklistDetails.
        :type missions: Missions
        """
        if missions is None:
            raise ValueError("Invalid value for `missions`, must not be `None`")  # noqa: E501

        self._missions = missions
