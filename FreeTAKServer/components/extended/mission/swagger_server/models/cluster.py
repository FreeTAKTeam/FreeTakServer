# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, enabled: bool=None, nats_url: str=None, nats_cluster_id: str=None, kubernetes: bool=None, cache_config: bool=None, metrics_interval_seconds: int=None):  # noqa: E501
        """Cluster - a model defined in Swagger

        :param enabled: The enabled of this Cluster.  # noqa: E501
        :type enabled: bool
        :param nats_url: The nats_url of this Cluster.  # noqa: E501
        :type nats_url: str
        :param nats_cluster_id: The nats_cluster_id of this Cluster.  # noqa: E501
        :type nats_cluster_id: str
        :param kubernetes: The kubernetes of this Cluster.  # noqa: E501
        :type kubernetes: bool
        :param cache_config: The cache_config of this Cluster.  # noqa: E501
        :type cache_config: bool
        :param metrics_interval_seconds: The metrics_interval_seconds of this Cluster.  # noqa: E501
        :type metrics_interval_seconds: int
        """
        self.swagger_types = {
            'enabled': bool,
            'nats_url': str,
            'nats_cluster_id': str,
            'kubernetes': bool,
            'cache_config': bool,
            'metrics_interval_seconds': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'nats_url': 'natsURL',
            'nats_cluster_id': 'natsClusterID',
            'kubernetes': 'kubernetes',
            'cache_config': 'cacheConfig',
            'metrics_interval_seconds': 'metricsIntervalSeconds'
        }
        self._enabled = enabled
        self._nats_url = nats_url
        self._nats_cluster_id = nats_cluster_id
        self._kubernetes = kubernetes
        self._cache_config = cache_config
        self._metrics_interval_seconds = metrics_interval_seconds

    @classmethod
    def from_dict(cls, dikt) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cluster of this Cluster.  # noqa: E501
        :rtype: Cluster
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this Cluster.


        :return: The enabled of this Cluster.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this Cluster.


        :param enabled: The enabled of this Cluster.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def nats_url(self) -> str:
        """Gets the nats_url of this Cluster.


        :return: The nats_url of this Cluster.
        :rtype: str
        """
        return self._nats_url

    @nats_url.setter
    def nats_url(self, nats_url: str):
        """Sets the nats_url of this Cluster.


        :param nats_url: The nats_url of this Cluster.
        :type nats_url: str
        """

        self._nats_url = nats_url

    @property
    def nats_cluster_id(self) -> str:
        """Gets the nats_cluster_id of this Cluster.


        :return: The nats_cluster_id of this Cluster.
        :rtype: str
        """
        return self._nats_cluster_id

    @nats_cluster_id.setter
    def nats_cluster_id(self, nats_cluster_id: str):
        """Sets the nats_cluster_id of this Cluster.


        :param nats_cluster_id: The nats_cluster_id of this Cluster.
        :type nats_cluster_id: str
        """

        self._nats_cluster_id = nats_cluster_id

    @property
    def kubernetes(self) -> bool:
        """Gets the kubernetes of this Cluster.


        :return: The kubernetes of this Cluster.
        :rtype: bool
        """
        return self._kubernetes

    @kubernetes.setter
    def kubernetes(self, kubernetes: bool):
        """Sets the kubernetes of this Cluster.


        :param kubernetes: The kubernetes of this Cluster.
        :type kubernetes: bool
        """

        self._kubernetes = kubernetes

    @property
    def cache_config(self) -> bool:
        """Gets the cache_config of this Cluster.


        :return: The cache_config of this Cluster.
        :rtype: bool
        """
        return self._cache_config

    @cache_config.setter
    def cache_config(self, cache_config: bool):
        """Sets the cache_config of this Cluster.


        :param cache_config: The cache_config of this Cluster.
        :type cache_config: bool
        """

        self._cache_config = cache_config

    @property
    def metrics_interval_seconds(self) -> int:
        """Gets the metrics_interval_seconds of this Cluster.


        :return: The metrics_interval_seconds of this Cluster.
        :rtype: int
        """
        return self._metrics_interval_seconds

    @metrics_interval_seconds.setter
    def metrics_interval_seconds(self, metrics_interval_seconds: int):
        """Sets the metrics_interval_seconds of this Cluster.


        :param metrics_interval_seconds: The metrics_interval_seconds of this Cluster.
        :type metrics_interval_seconds: int
        """

        self._metrics_interval_seconds = metrics_interval_seconds
