# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.priority import Priority  # noqa: F401,E501
from swagger_server import util


class Queue(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, priority: Priority=None, monitor: bool=None, capacity: int=None, pub_sub_capacity: int=None, outbound_capacity: int=None, inbound_capacity: int=None, codec_wrapper_capacity: int=None, tcp_write_queue_capacity: int=None, disconnect_on_full: bool=None, max_write_queue_size: int=None, default_exec_queue_size: int=None, default_max_pool_size: int=None, default_max_pool_factor: int=None, message_write_queue_size: int=None, message_write_executor_queue_size: int=None, codec_view_pending_capacity: int=None, queue_size_initial: int=None, queue_size_increment: int=None, core_executor_capacity: int=None, throw_on_assertion_fail: bool=None, disconnect_on_pending_exceeded: bool=None, flush_interval: int=None, websocket_send_buffer_size_limit: int=None, websocket_max_binary_message_buffer_size: int=None, websocket_max_session_idle_timeout: int=None, websocket_send_timeout_ms: int=None, mission_uid_limit: int=None, mission_content_limit: int=None, near_cache_max_size: int=None, cot_cache_max_size: int=None, cot_cache_batch_size: int=None, cot_cache_max_memory_size: int=None, spring_cache_max_size: int=None, spring_cache_batch_size: int=None, spring_cache_max_memory_size: int=None, spring_cache_size_scaling_factor: int=None, on_heap_enabled: bool=None, cache_off_heap_max_size_bytes: int=None, cache_off_heap_initial_size_bytes: int=None, cache_off_heap_default_percentage: float=None, enable_cache_warmer: bool=None, ignite_pool_size: int=None, cache_cot_in_repository: bool=None, enable_cache_persistence: bool=None, message_timestamp_cache_size_items: int=None, enable_store_forward_chat: bool=None, store_forward_query_buffer_ms: int=None, store_forward_send_buffer_ms: int=None, enable_client_endpoint_cache: bool=None, contact_cache_update_rate_limit_seconds: int=None, contact_cache_recency_limit_seconds: int=None, plugin_datafeed_cache_seconds: int=None):  # noqa: E501
        """Queue - a model defined in Swagger

        :param priority: The priority of this Queue.  # noqa: E501
        :type priority: Priority
        :param monitor: The monitor of this Queue.  # noqa: E501
        :type monitor: bool
        :param capacity: The capacity of this Queue.  # noqa: E501
        :type capacity: int
        :param pub_sub_capacity: The pub_sub_capacity of this Queue.  # noqa: E501
        :type pub_sub_capacity: int
        :param outbound_capacity: The outbound_capacity of this Queue.  # noqa: E501
        :type outbound_capacity: int
        :param inbound_capacity: The inbound_capacity of this Queue.  # noqa: E501
        :type inbound_capacity: int
        :param codec_wrapper_capacity: The codec_wrapper_capacity of this Queue.  # noqa: E501
        :type codec_wrapper_capacity: int
        :param tcp_write_queue_capacity: The tcp_write_queue_capacity of this Queue.  # noqa: E501
        :type tcp_write_queue_capacity: int
        :param disconnect_on_full: The disconnect_on_full of this Queue.  # noqa: E501
        :type disconnect_on_full: bool
        :param max_write_queue_size: The max_write_queue_size of this Queue.  # noqa: E501
        :type max_write_queue_size: int
        :param default_exec_queue_size: The default_exec_queue_size of this Queue.  # noqa: E501
        :type default_exec_queue_size: int
        :param default_max_pool_size: The default_max_pool_size of this Queue.  # noqa: E501
        :type default_max_pool_size: int
        :param default_max_pool_factor: The default_max_pool_factor of this Queue.  # noqa: E501
        :type default_max_pool_factor: int
        :param message_write_queue_size: The message_write_queue_size of this Queue.  # noqa: E501
        :type message_write_queue_size: int
        :param message_write_executor_queue_size: The message_write_executor_queue_size of this Queue.  # noqa: E501
        :type message_write_executor_queue_size: int
        :param codec_view_pending_capacity: The codec_view_pending_capacity of this Queue.  # noqa: E501
        :type codec_view_pending_capacity: int
        :param queue_size_initial: The queue_size_initial of this Queue.  # noqa: E501
        :type queue_size_initial: int
        :param queue_size_increment: The queue_size_increment of this Queue.  # noqa: E501
        :type queue_size_increment: int
        :param core_executor_capacity: The core_executor_capacity of this Queue.  # noqa: E501
        :type core_executor_capacity: int
        :param throw_on_assertion_fail: The throw_on_assertion_fail of this Queue.  # noqa: E501
        :type throw_on_assertion_fail: bool
        :param disconnect_on_pending_exceeded: The disconnect_on_pending_exceeded of this Queue.  # noqa: E501
        :type disconnect_on_pending_exceeded: bool
        :param flush_interval: The flush_interval of this Queue.  # noqa: E501
        :type flush_interval: int
        :param websocket_send_buffer_size_limit: The websocket_send_buffer_size_limit of this Queue.  # noqa: E501
        :type websocket_send_buffer_size_limit: int
        :param websocket_max_binary_message_buffer_size: The websocket_max_binary_message_buffer_size of this Queue.  # noqa: E501
        :type websocket_max_binary_message_buffer_size: int
        :param websocket_max_session_idle_timeout: The websocket_max_session_idle_timeout of this Queue.  # noqa: E501
        :type websocket_max_session_idle_timeout: int
        :param websocket_send_timeout_ms: The websocket_send_timeout_ms of this Queue.  # noqa: E501
        :type websocket_send_timeout_ms: int
        :param mission_uid_limit: The mission_uid_limit of this Queue.  # noqa: E501
        :type mission_uid_limit: int
        :param mission_content_limit: The mission_content_limit of this Queue.  # noqa: E501
        :type mission_content_limit: int
        :param near_cache_max_size: The near_cache_max_size of this Queue.  # noqa: E501
        :type near_cache_max_size: int
        :param cot_cache_max_size: The cot_cache_max_size of this Queue.  # noqa: E501
        :type cot_cache_max_size: int
        :param cot_cache_batch_size: The cot_cache_batch_size of this Queue.  # noqa: E501
        :type cot_cache_batch_size: int
        :param cot_cache_max_memory_size: The cot_cache_max_memory_size of this Queue.  # noqa: E501
        :type cot_cache_max_memory_size: int
        :param spring_cache_max_size: The spring_cache_max_size of this Queue.  # noqa: E501
        :type spring_cache_max_size: int
        :param spring_cache_batch_size: The spring_cache_batch_size of this Queue.  # noqa: E501
        :type spring_cache_batch_size: int
        :param spring_cache_max_memory_size: The spring_cache_max_memory_size of this Queue.  # noqa: E501
        :type spring_cache_max_memory_size: int
        :param spring_cache_size_scaling_factor: The spring_cache_size_scaling_factor of this Queue.  # noqa: E501
        :type spring_cache_size_scaling_factor: int
        :param on_heap_enabled: The on_heap_enabled of this Queue.  # noqa: E501
        :type on_heap_enabled: bool
        :param cache_off_heap_max_size_bytes: The cache_off_heap_max_size_bytes of this Queue.  # noqa: E501
        :type cache_off_heap_max_size_bytes: int
        :param cache_off_heap_initial_size_bytes: The cache_off_heap_initial_size_bytes of this Queue.  # noqa: E501
        :type cache_off_heap_initial_size_bytes: int
        :param cache_off_heap_default_percentage: The cache_off_heap_default_percentage of this Queue.  # noqa: E501
        :type cache_off_heap_default_percentage: float
        :param enable_cache_warmer: The enable_cache_warmer of this Queue.  # noqa: E501
        :type enable_cache_warmer: bool
        :param ignite_pool_size: The ignite_pool_size of this Queue.  # noqa: E501
        :type ignite_pool_size: int
        :param cache_cot_in_repository: The cache_cot_in_repository of this Queue.  # noqa: E501
        :type cache_cot_in_repository: bool
        :param enable_cache_persistence: The enable_cache_persistence of this Queue.  # noqa: E501
        :type enable_cache_persistence: bool
        :param message_timestamp_cache_size_items: The message_timestamp_cache_size_items of this Queue.  # noqa: E501
        :type message_timestamp_cache_size_items: int
        :param enable_store_forward_chat: The enable_store_forward_chat of this Queue.  # noqa: E501
        :type enable_store_forward_chat: bool
        :param store_forward_query_buffer_ms: The store_forward_query_buffer_ms of this Queue.  # noqa: E501
        :type store_forward_query_buffer_ms: int
        :param store_forward_send_buffer_ms: The store_forward_send_buffer_ms of this Queue.  # noqa: E501
        :type store_forward_send_buffer_ms: int
        :param enable_client_endpoint_cache: The enable_client_endpoint_cache of this Queue.  # noqa: E501
        :type enable_client_endpoint_cache: bool
        :param contact_cache_update_rate_limit_seconds: The contact_cache_update_rate_limit_seconds of this Queue.  # noqa: E501
        :type contact_cache_update_rate_limit_seconds: int
        :param contact_cache_recency_limit_seconds: The contact_cache_recency_limit_seconds of this Queue.  # noqa: E501
        :type contact_cache_recency_limit_seconds: int
        :param plugin_datafeed_cache_seconds: The plugin_datafeed_cache_seconds of this Queue.  # noqa: E501
        :type plugin_datafeed_cache_seconds: int
        """
        self.swagger_types = {
            'priority': Priority,
            'monitor': bool,
            'capacity': int,
            'pub_sub_capacity': int,
            'outbound_capacity': int,
            'inbound_capacity': int,
            'codec_wrapper_capacity': int,
            'tcp_write_queue_capacity': int,
            'disconnect_on_full': bool,
            'max_write_queue_size': int,
            'default_exec_queue_size': int,
            'default_max_pool_size': int,
            'default_max_pool_factor': int,
            'message_write_queue_size': int,
            'message_write_executor_queue_size': int,
            'codec_view_pending_capacity': int,
            'queue_size_initial': int,
            'queue_size_increment': int,
            'core_executor_capacity': int,
            'throw_on_assertion_fail': bool,
            'disconnect_on_pending_exceeded': bool,
            'flush_interval': int,
            'websocket_send_buffer_size_limit': int,
            'websocket_max_binary_message_buffer_size': int,
            'websocket_max_session_idle_timeout': int,
            'websocket_send_timeout_ms': int,
            'mission_uid_limit': int,
            'mission_content_limit': int,
            'near_cache_max_size': int,
            'cot_cache_max_size': int,
            'cot_cache_batch_size': int,
            'cot_cache_max_memory_size': int,
            'spring_cache_max_size': int,
            'spring_cache_batch_size': int,
            'spring_cache_max_memory_size': int,
            'spring_cache_size_scaling_factor': int,
            'on_heap_enabled': bool,
            'cache_off_heap_max_size_bytes': int,
            'cache_off_heap_initial_size_bytes': int,
            'cache_off_heap_default_percentage': float,
            'enable_cache_warmer': bool,
            'ignite_pool_size': int,
            'cache_cot_in_repository': bool,
            'enable_cache_persistence': bool,
            'message_timestamp_cache_size_items': int,
            'enable_store_forward_chat': bool,
            'store_forward_query_buffer_ms': int,
            'store_forward_send_buffer_ms': int,
            'enable_client_endpoint_cache': bool,
            'contact_cache_update_rate_limit_seconds': int,
            'contact_cache_recency_limit_seconds': int,
            'plugin_datafeed_cache_seconds': int
        }

        self.attribute_map = {
            'priority': 'priority',
            'monitor': 'monitor',
            'capacity': 'capacity',
            'pub_sub_capacity': 'pubSubCapacity',
            'outbound_capacity': 'outboundCapacity',
            'inbound_capacity': 'inboundCapacity',
            'codec_wrapper_capacity': 'codecWrapperCapacity',
            'tcp_write_queue_capacity': 'tcpWriteQueueCapacity',
            'disconnect_on_full': 'disconnectOnFull',
            'max_write_queue_size': 'maxWriteQueueSize',
            'default_exec_queue_size': 'defaultExecQueueSize',
            'default_max_pool_size': 'defaultMaxPoolSize',
            'default_max_pool_factor': 'defaultMaxPoolFactor',
            'message_write_queue_size': 'messageWriteQueueSize',
            'message_write_executor_queue_size': 'messageWriteExecutorQueueSize',
            'codec_view_pending_capacity': 'codecViewPendingCapacity',
            'queue_size_initial': 'queueSizeInitial',
            'queue_size_increment': 'queueSizeIncrement',
            'core_executor_capacity': 'coreExecutorCapacity',
            'throw_on_assertion_fail': 'throwOnAssertionFail',
            'disconnect_on_pending_exceeded': 'disconnectOnPendingExceeded',
            'flush_interval': 'flushInterval',
            'websocket_send_buffer_size_limit': 'websocketSendBufferSizeLimit',
            'websocket_max_binary_message_buffer_size': 'websocketMaxBinaryMessageBufferSize',
            'websocket_max_session_idle_timeout': 'websocketMaxSessionIdleTimeout',
            'websocket_send_timeout_ms': 'websocketSendTimeoutMs',
            'mission_uid_limit': 'missionUidLimit',
            'mission_content_limit': 'missionContentLimit',
            'near_cache_max_size': 'nearCacheMaxSize',
            'cot_cache_max_size': 'cotCacheMaxSize',
            'cot_cache_batch_size': 'cotCacheBatchSize',
            'cot_cache_max_memory_size': 'cotCacheMaxMemorySize',
            'spring_cache_max_size': 'springCacheMaxSize',
            'spring_cache_batch_size': 'springCacheBatchSize',
            'spring_cache_max_memory_size': 'springCacheMaxMemorySize',
            'spring_cache_size_scaling_factor': 'springCacheSizeScalingFactor',
            'on_heap_enabled': 'onHeapEnabled',
            'cache_off_heap_max_size_bytes': 'cacheOffHeapMaxSizeBytes',
            'cache_off_heap_initial_size_bytes': 'cacheOffHeapInitialSizeBytes',
            'cache_off_heap_default_percentage': 'cacheOffHeapDefaultPercentage',
            'enable_cache_warmer': 'enableCacheWarmer',
            'ignite_pool_size': 'ignitePoolSize',
            'cache_cot_in_repository': 'cacheCotInRepository',
            'enable_cache_persistence': 'enableCachePersistence',
            'message_timestamp_cache_size_items': 'messageTimestampCacheSizeItems',
            'enable_store_forward_chat': 'enableStoreForwardChat',
            'store_forward_query_buffer_ms': 'storeForwardQueryBufferMs',
            'store_forward_send_buffer_ms': 'storeForwardSendBufferMs',
            'enable_client_endpoint_cache': 'enableClientEndpointCache',
            'contact_cache_update_rate_limit_seconds': 'contactCacheUpdateRateLimitSeconds',
            'contact_cache_recency_limit_seconds': 'contactCacheRecencyLimitSeconds',
            'plugin_datafeed_cache_seconds': 'pluginDatafeedCacheSeconds'
        }
        self._priority = priority
        self._monitor = monitor
        self._capacity = capacity
        self._pub_sub_capacity = pub_sub_capacity
        self._outbound_capacity = outbound_capacity
        self._inbound_capacity = inbound_capacity
        self._codec_wrapper_capacity = codec_wrapper_capacity
        self._tcp_write_queue_capacity = tcp_write_queue_capacity
        self._disconnect_on_full = disconnect_on_full
        self._max_write_queue_size = max_write_queue_size
        self._default_exec_queue_size = default_exec_queue_size
        self._default_max_pool_size = default_max_pool_size
        self._default_max_pool_factor = default_max_pool_factor
        self._message_write_queue_size = message_write_queue_size
        self._message_write_executor_queue_size = message_write_executor_queue_size
        self._codec_view_pending_capacity = codec_view_pending_capacity
        self._queue_size_initial = queue_size_initial
        self._queue_size_increment = queue_size_increment
        self._core_executor_capacity = core_executor_capacity
        self._throw_on_assertion_fail = throw_on_assertion_fail
        self._disconnect_on_pending_exceeded = disconnect_on_pending_exceeded
        self._flush_interval = flush_interval
        self._websocket_send_buffer_size_limit = websocket_send_buffer_size_limit
        self._websocket_max_binary_message_buffer_size = websocket_max_binary_message_buffer_size
        self._websocket_max_session_idle_timeout = websocket_max_session_idle_timeout
        self._websocket_send_timeout_ms = websocket_send_timeout_ms
        self._mission_uid_limit = mission_uid_limit
        self._mission_content_limit = mission_content_limit
        self._near_cache_max_size = near_cache_max_size
        self._cot_cache_max_size = cot_cache_max_size
        self._cot_cache_batch_size = cot_cache_batch_size
        self._cot_cache_max_memory_size = cot_cache_max_memory_size
        self._spring_cache_max_size = spring_cache_max_size
        self._spring_cache_batch_size = spring_cache_batch_size
        self._spring_cache_max_memory_size = spring_cache_max_memory_size
        self._spring_cache_size_scaling_factor = spring_cache_size_scaling_factor
        self._on_heap_enabled = on_heap_enabled
        self._cache_off_heap_max_size_bytes = cache_off_heap_max_size_bytes
        self._cache_off_heap_initial_size_bytes = cache_off_heap_initial_size_bytes
        self._cache_off_heap_default_percentage = cache_off_heap_default_percentage
        self._enable_cache_warmer = enable_cache_warmer
        self._ignite_pool_size = ignite_pool_size
        self._cache_cot_in_repository = cache_cot_in_repository
        self._enable_cache_persistence = enable_cache_persistence
        self._message_timestamp_cache_size_items = message_timestamp_cache_size_items
        self._enable_store_forward_chat = enable_store_forward_chat
        self._store_forward_query_buffer_ms = store_forward_query_buffer_ms
        self._store_forward_send_buffer_ms = store_forward_send_buffer_ms
        self._enable_client_endpoint_cache = enable_client_endpoint_cache
        self._contact_cache_update_rate_limit_seconds = contact_cache_update_rate_limit_seconds
        self._contact_cache_recency_limit_seconds = contact_cache_recency_limit_seconds
        self._plugin_datafeed_cache_seconds = plugin_datafeed_cache_seconds

    @classmethod
    def from_dict(cls, dikt) -> 'Queue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Queue of this Queue.  # noqa: E501
        :rtype: Queue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def priority(self) -> Priority:
        """Gets the priority of this Queue.


        :return: The priority of this Queue.
        :rtype: Priority
        """
        return self._priority

    @priority.setter
    def priority(self, priority: Priority):
        """Sets the priority of this Queue.


        :param priority: The priority of this Queue.
        :type priority: Priority
        """

        self._priority = priority

    @property
    def monitor(self) -> bool:
        """Gets the monitor of this Queue.


        :return: The monitor of this Queue.
        :rtype: bool
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor: bool):
        """Sets the monitor of this Queue.


        :param monitor: The monitor of this Queue.
        :type monitor: bool
        """

        self._monitor = monitor

    @property
    def capacity(self) -> int:
        """Gets the capacity of this Queue.


        :return: The capacity of this Queue.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: int):
        """Sets the capacity of this Queue.


        :param capacity: The capacity of this Queue.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def pub_sub_capacity(self) -> int:
        """Gets the pub_sub_capacity of this Queue.


        :return: The pub_sub_capacity of this Queue.
        :rtype: int
        """
        return self._pub_sub_capacity

    @pub_sub_capacity.setter
    def pub_sub_capacity(self, pub_sub_capacity: int):
        """Sets the pub_sub_capacity of this Queue.


        :param pub_sub_capacity: The pub_sub_capacity of this Queue.
        :type pub_sub_capacity: int
        """

        self._pub_sub_capacity = pub_sub_capacity

    @property
    def outbound_capacity(self) -> int:
        """Gets the outbound_capacity of this Queue.


        :return: The outbound_capacity of this Queue.
        :rtype: int
        """
        return self._outbound_capacity

    @outbound_capacity.setter
    def outbound_capacity(self, outbound_capacity: int):
        """Sets the outbound_capacity of this Queue.


        :param outbound_capacity: The outbound_capacity of this Queue.
        :type outbound_capacity: int
        """

        self._outbound_capacity = outbound_capacity

    @property
    def inbound_capacity(self) -> int:
        """Gets the inbound_capacity of this Queue.


        :return: The inbound_capacity of this Queue.
        :rtype: int
        """
        return self._inbound_capacity

    @inbound_capacity.setter
    def inbound_capacity(self, inbound_capacity: int):
        """Sets the inbound_capacity of this Queue.


        :param inbound_capacity: The inbound_capacity of this Queue.
        :type inbound_capacity: int
        """

        self._inbound_capacity = inbound_capacity

    @property
    def codec_wrapper_capacity(self) -> int:
        """Gets the codec_wrapper_capacity of this Queue.


        :return: The codec_wrapper_capacity of this Queue.
        :rtype: int
        """
        return self._codec_wrapper_capacity

    @codec_wrapper_capacity.setter
    def codec_wrapper_capacity(self, codec_wrapper_capacity: int):
        """Sets the codec_wrapper_capacity of this Queue.


        :param codec_wrapper_capacity: The codec_wrapper_capacity of this Queue.
        :type codec_wrapper_capacity: int
        """

        self._codec_wrapper_capacity = codec_wrapper_capacity

    @property
    def tcp_write_queue_capacity(self) -> int:
        """Gets the tcp_write_queue_capacity of this Queue.


        :return: The tcp_write_queue_capacity of this Queue.
        :rtype: int
        """
        return self._tcp_write_queue_capacity

    @tcp_write_queue_capacity.setter
    def tcp_write_queue_capacity(self, tcp_write_queue_capacity: int):
        """Sets the tcp_write_queue_capacity of this Queue.


        :param tcp_write_queue_capacity: The tcp_write_queue_capacity of this Queue.
        :type tcp_write_queue_capacity: int
        """

        self._tcp_write_queue_capacity = tcp_write_queue_capacity

    @property
    def disconnect_on_full(self) -> bool:
        """Gets the disconnect_on_full of this Queue.


        :return: The disconnect_on_full of this Queue.
        :rtype: bool
        """
        return self._disconnect_on_full

    @disconnect_on_full.setter
    def disconnect_on_full(self, disconnect_on_full: bool):
        """Sets the disconnect_on_full of this Queue.


        :param disconnect_on_full: The disconnect_on_full of this Queue.
        :type disconnect_on_full: bool
        """

        self._disconnect_on_full = disconnect_on_full

    @property
    def max_write_queue_size(self) -> int:
        """Gets the max_write_queue_size of this Queue.


        :return: The max_write_queue_size of this Queue.
        :rtype: int
        """
        return self._max_write_queue_size

    @max_write_queue_size.setter
    def max_write_queue_size(self, max_write_queue_size: int):
        """Sets the max_write_queue_size of this Queue.


        :param max_write_queue_size: The max_write_queue_size of this Queue.
        :type max_write_queue_size: int
        """

        self._max_write_queue_size = max_write_queue_size

    @property
    def default_exec_queue_size(self) -> int:
        """Gets the default_exec_queue_size of this Queue.


        :return: The default_exec_queue_size of this Queue.
        :rtype: int
        """
        return self._default_exec_queue_size

    @default_exec_queue_size.setter
    def default_exec_queue_size(self, default_exec_queue_size: int):
        """Sets the default_exec_queue_size of this Queue.


        :param default_exec_queue_size: The default_exec_queue_size of this Queue.
        :type default_exec_queue_size: int
        """

        self._default_exec_queue_size = default_exec_queue_size

    @property
    def default_max_pool_size(self) -> int:
        """Gets the default_max_pool_size of this Queue.


        :return: The default_max_pool_size of this Queue.
        :rtype: int
        """
        return self._default_max_pool_size

    @default_max_pool_size.setter
    def default_max_pool_size(self, default_max_pool_size: int):
        """Sets the default_max_pool_size of this Queue.


        :param default_max_pool_size: The default_max_pool_size of this Queue.
        :type default_max_pool_size: int
        """

        self._default_max_pool_size = default_max_pool_size

    @property
    def default_max_pool_factor(self) -> int:
        """Gets the default_max_pool_factor of this Queue.


        :return: The default_max_pool_factor of this Queue.
        :rtype: int
        """
        return self._default_max_pool_factor

    @default_max_pool_factor.setter
    def default_max_pool_factor(self, default_max_pool_factor: int):
        """Sets the default_max_pool_factor of this Queue.


        :param default_max_pool_factor: The default_max_pool_factor of this Queue.
        :type default_max_pool_factor: int
        """

        self._default_max_pool_factor = default_max_pool_factor

    @property
    def message_write_queue_size(self) -> int:
        """Gets the message_write_queue_size of this Queue.


        :return: The message_write_queue_size of this Queue.
        :rtype: int
        """
        return self._message_write_queue_size

    @message_write_queue_size.setter
    def message_write_queue_size(self, message_write_queue_size: int):
        """Sets the message_write_queue_size of this Queue.


        :param message_write_queue_size: The message_write_queue_size of this Queue.
        :type message_write_queue_size: int
        """

        self._message_write_queue_size = message_write_queue_size

    @property
    def message_write_executor_queue_size(self) -> int:
        """Gets the message_write_executor_queue_size of this Queue.


        :return: The message_write_executor_queue_size of this Queue.
        :rtype: int
        """
        return self._message_write_executor_queue_size

    @message_write_executor_queue_size.setter
    def message_write_executor_queue_size(self, message_write_executor_queue_size: int):
        """Sets the message_write_executor_queue_size of this Queue.


        :param message_write_executor_queue_size: The message_write_executor_queue_size of this Queue.
        :type message_write_executor_queue_size: int
        """

        self._message_write_executor_queue_size = message_write_executor_queue_size

    @property
    def codec_view_pending_capacity(self) -> int:
        """Gets the codec_view_pending_capacity of this Queue.


        :return: The codec_view_pending_capacity of this Queue.
        :rtype: int
        """
        return self._codec_view_pending_capacity

    @codec_view_pending_capacity.setter
    def codec_view_pending_capacity(self, codec_view_pending_capacity: int):
        """Sets the codec_view_pending_capacity of this Queue.


        :param codec_view_pending_capacity: The codec_view_pending_capacity of this Queue.
        :type codec_view_pending_capacity: int
        """

        self._codec_view_pending_capacity = codec_view_pending_capacity

    @property
    def queue_size_initial(self) -> int:
        """Gets the queue_size_initial of this Queue.


        :return: The queue_size_initial of this Queue.
        :rtype: int
        """
        return self._queue_size_initial

    @queue_size_initial.setter
    def queue_size_initial(self, queue_size_initial: int):
        """Sets the queue_size_initial of this Queue.


        :param queue_size_initial: The queue_size_initial of this Queue.
        :type queue_size_initial: int
        """

        self._queue_size_initial = queue_size_initial

    @property
    def queue_size_increment(self) -> int:
        """Gets the queue_size_increment of this Queue.


        :return: The queue_size_increment of this Queue.
        :rtype: int
        """
        return self._queue_size_increment

    @queue_size_increment.setter
    def queue_size_increment(self, queue_size_increment: int):
        """Sets the queue_size_increment of this Queue.


        :param queue_size_increment: The queue_size_increment of this Queue.
        :type queue_size_increment: int
        """

        self._queue_size_increment = queue_size_increment

    @property
    def core_executor_capacity(self) -> int:
        """Gets the core_executor_capacity of this Queue.


        :return: The core_executor_capacity of this Queue.
        :rtype: int
        """
        return self._core_executor_capacity

    @core_executor_capacity.setter
    def core_executor_capacity(self, core_executor_capacity: int):
        """Sets the core_executor_capacity of this Queue.


        :param core_executor_capacity: The core_executor_capacity of this Queue.
        :type core_executor_capacity: int
        """

        self._core_executor_capacity = core_executor_capacity

    @property
    def throw_on_assertion_fail(self) -> bool:
        """Gets the throw_on_assertion_fail of this Queue.


        :return: The throw_on_assertion_fail of this Queue.
        :rtype: bool
        """
        return self._throw_on_assertion_fail

    @throw_on_assertion_fail.setter
    def throw_on_assertion_fail(self, throw_on_assertion_fail: bool):
        """Sets the throw_on_assertion_fail of this Queue.


        :param throw_on_assertion_fail: The throw_on_assertion_fail of this Queue.
        :type throw_on_assertion_fail: bool
        """

        self._throw_on_assertion_fail = throw_on_assertion_fail

    @property
    def disconnect_on_pending_exceeded(self) -> bool:
        """Gets the disconnect_on_pending_exceeded of this Queue.


        :return: The disconnect_on_pending_exceeded of this Queue.
        :rtype: bool
        """
        return self._disconnect_on_pending_exceeded

    @disconnect_on_pending_exceeded.setter
    def disconnect_on_pending_exceeded(self, disconnect_on_pending_exceeded: bool):
        """Sets the disconnect_on_pending_exceeded of this Queue.


        :param disconnect_on_pending_exceeded: The disconnect_on_pending_exceeded of this Queue.
        :type disconnect_on_pending_exceeded: bool
        """

        self._disconnect_on_pending_exceeded = disconnect_on_pending_exceeded

    @property
    def flush_interval(self) -> int:
        """Gets the flush_interval of this Queue.


        :return: The flush_interval of this Queue.
        :rtype: int
        """
        return self._flush_interval

    @flush_interval.setter
    def flush_interval(self, flush_interval: int):
        """Sets the flush_interval of this Queue.


        :param flush_interval: The flush_interval of this Queue.
        :type flush_interval: int
        """

        self._flush_interval = flush_interval

    @property
    def websocket_send_buffer_size_limit(self) -> int:
        """Gets the websocket_send_buffer_size_limit of this Queue.


        :return: The websocket_send_buffer_size_limit of this Queue.
        :rtype: int
        """
        return self._websocket_send_buffer_size_limit

    @websocket_send_buffer_size_limit.setter
    def websocket_send_buffer_size_limit(self, websocket_send_buffer_size_limit: int):
        """Sets the websocket_send_buffer_size_limit of this Queue.


        :param websocket_send_buffer_size_limit: The websocket_send_buffer_size_limit of this Queue.
        :type websocket_send_buffer_size_limit: int
        """

        self._websocket_send_buffer_size_limit = websocket_send_buffer_size_limit

    @property
    def websocket_max_binary_message_buffer_size(self) -> int:
        """Gets the websocket_max_binary_message_buffer_size of this Queue.


        :return: The websocket_max_binary_message_buffer_size of this Queue.
        :rtype: int
        """
        return self._websocket_max_binary_message_buffer_size

    @websocket_max_binary_message_buffer_size.setter
    def websocket_max_binary_message_buffer_size(self, websocket_max_binary_message_buffer_size: int):
        """Sets the websocket_max_binary_message_buffer_size of this Queue.


        :param websocket_max_binary_message_buffer_size: The websocket_max_binary_message_buffer_size of this Queue.
        :type websocket_max_binary_message_buffer_size: int
        """

        self._websocket_max_binary_message_buffer_size = websocket_max_binary_message_buffer_size

    @property
    def websocket_max_session_idle_timeout(self) -> int:
        """Gets the websocket_max_session_idle_timeout of this Queue.


        :return: The websocket_max_session_idle_timeout of this Queue.
        :rtype: int
        """
        return self._websocket_max_session_idle_timeout

    @websocket_max_session_idle_timeout.setter
    def websocket_max_session_idle_timeout(self, websocket_max_session_idle_timeout: int):
        """Sets the websocket_max_session_idle_timeout of this Queue.


        :param websocket_max_session_idle_timeout: The websocket_max_session_idle_timeout of this Queue.
        :type websocket_max_session_idle_timeout: int
        """

        self._websocket_max_session_idle_timeout = websocket_max_session_idle_timeout

    @property
    def websocket_send_timeout_ms(self) -> int:
        """Gets the websocket_send_timeout_ms of this Queue.


        :return: The websocket_send_timeout_ms of this Queue.
        :rtype: int
        """
        return self._websocket_send_timeout_ms

    @websocket_send_timeout_ms.setter
    def websocket_send_timeout_ms(self, websocket_send_timeout_ms: int):
        """Sets the websocket_send_timeout_ms of this Queue.


        :param websocket_send_timeout_ms: The websocket_send_timeout_ms of this Queue.
        :type websocket_send_timeout_ms: int
        """

        self._websocket_send_timeout_ms = websocket_send_timeout_ms

    @property
    def mission_uid_limit(self) -> int:
        """Gets the mission_uid_limit of this Queue.


        :return: The mission_uid_limit of this Queue.
        :rtype: int
        """
        return self._mission_uid_limit

    @mission_uid_limit.setter
    def mission_uid_limit(self, mission_uid_limit: int):
        """Sets the mission_uid_limit of this Queue.


        :param mission_uid_limit: The mission_uid_limit of this Queue.
        :type mission_uid_limit: int
        """

        self._mission_uid_limit = mission_uid_limit

    @property
    def mission_content_limit(self) -> int:
        """Gets the mission_content_limit of this Queue.


        :return: The mission_content_limit of this Queue.
        :rtype: int
        """
        return self._mission_content_limit

    @mission_content_limit.setter
    def mission_content_limit(self, mission_content_limit: int):
        """Sets the mission_content_limit of this Queue.


        :param mission_content_limit: The mission_content_limit of this Queue.
        :type mission_content_limit: int
        """

        self._mission_content_limit = mission_content_limit

    @property
    def near_cache_max_size(self) -> int:
        """Gets the near_cache_max_size of this Queue.


        :return: The near_cache_max_size of this Queue.
        :rtype: int
        """
        return self._near_cache_max_size

    @near_cache_max_size.setter
    def near_cache_max_size(self, near_cache_max_size: int):
        """Sets the near_cache_max_size of this Queue.


        :param near_cache_max_size: The near_cache_max_size of this Queue.
        :type near_cache_max_size: int
        """

        self._near_cache_max_size = near_cache_max_size

    @property
    def cot_cache_max_size(self) -> int:
        """Gets the cot_cache_max_size of this Queue.


        :return: The cot_cache_max_size of this Queue.
        :rtype: int
        """
        return self._cot_cache_max_size

    @cot_cache_max_size.setter
    def cot_cache_max_size(self, cot_cache_max_size: int):
        """Sets the cot_cache_max_size of this Queue.


        :param cot_cache_max_size: The cot_cache_max_size of this Queue.
        :type cot_cache_max_size: int
        """

        self._cot_cache_max_size = cot_cache_max_size

    @property
    def cot_cache_batch_size(self) -> int:
        """Gets the cot_cache_batch_size of this Queue.


        :return: The cot_cache_batch_size of this Queue.
        :rtype: int
        """
        return self._cot_cache_batch_size

    @cot_cache_batch_size.setter
    def cot_cache_batch_size(self, cot_cache_batch_size: int):
        """Sets the cot_cache_batch_size of this Queue.


        :param cot_cache_batch_size: The cot_cache_batch_size of this Queue.
        :type cot_cache_batch_size: int
        """

        self._cot_cache_batch_size = cot_cache_batch_size

    @property
    def cot_cache_max_memory_size(self) -> int:
        """Gets the cot_cache_max_memory_size of this Queue.


        :return: The cot_cache_max_memory_size of this Queue.
        :rtype: int
        """
        return self._cot_cache_max_memory_size

    @cot_cache_max_memory_size.setter
    def cot_cache_max_memory_size(self, cot_cache_max_memory_size: int):
        """Sets the cot_cache_max_memory_size of this Queue.


        :param cot_cache_max_memory_size: The cot_cache_max_memory_size of this Queue.
        :type cot_cache_max_memory_size: int
        """

        self._cot_cache_max_memory_size = cot_cache_max_memory_size

    @property
    def spring_cache_max_size(self) -> int:
        """Gets the spring_cache_max_size of this Queue.


        :return: The spring_cache_max_size of this Queue.
        :rtype: int
        """
        return self._spring_cache_max_size

    @spring_cache_max_size.setter
    def spring_cache_max_size(self, spring_cache_max_size: int):
        """Sets the spring_cache_max_size of this Queue.


        :param spring_cache_max_size: The spring_cache_max_size of this Queue.
        :type spring_cache_max_size: int
        """

        self._spring_cache_max_size = spring_cache_max_size

    @property
    def spring_cache_batch_size(self) -> int:
        """Gets the spring_cache_batch_size of this Queue.


        :return: The spring_cache_batch_size of this Queue.
        :rtype: int
        """
        return self._spring_cache_batch_size

    @spring_cache_batch_size.setter
    def spring_cache_batch_size(self, spring_cache_batch_size: int):
        """Sets the spring_cache_batch_size of this Queue.


        :param spring_cache_batch_size: The spring_cache_batch_size of this Queue.
        :type spring_cache_batch_size: int
        """

        self._spring_cache_batch_size = spring_cache_batch_size

    @property
    def spring_cache_max_memory_size(self) -> int:
        """Gets the spring_cache_max_memory_size of this Queue.


        :return: The spring_cache_max_memory_size of this Queue.
        :rtype: int
        """
        return self._spring_cache_max_memory_size

    @spring_cache_max_memory_size.setter
    def spring_cache_max_memory_size(self, spring_cache_max_memory_size: int):
        """Sets the spring_cache_max_memory_size of this Queue.


        :param spring_cache_max_memory_size: The spring_cache_max_memory_size of this Queue.
        :type spring_cache_max_memory_size: int
        """

        self._spring_cache_max_memory_size = spring_cache_max_memory_size

    @property
    def spring_cache_size_scaling_factor(self) -> int:
        """Gets the spring_cache_size_scaling_factor of this Queue.


        :return: The spring_cache_size_scaling_factor of this Queue.
        :rtype: int
        """
        return self._spring_cache_size_scaling_factor

    @spring_cache_size_scaling_factor.setter
    def spring_cache_size_scaling_factor(self, spring_cache_size_scaling_factor: int):
        """Sets the spring_cache_size_scaling_factor of this Queue.


        :param spring_cache_size_scaling_factor: The spring_cache_size_scaling_factor of this Queue.
        :type spring_cache_size_scaling_factor: int
        """

        self._spring_cache_size_scaling_factor = spring_cache_size_scaling_factor

    @property
    def on_heap_enabled(self) -> bool:
        """Gets the on_heap_enabled of this Queue.


        :return: The on_heap_enabled of this Queue.
        :rtype: bool
        """
        return self._on_heap_enabled

    @on_heap_enabled.setter
    def on_heap_enabled(self, on_heap_enabled: bool):
        """Sets the on_heap_enabled of this Queue.


        :param on_heap_enabled: The on_heap_enabled of this Queue.
        :type on_heap_enabled: bool
        """

        self._on_heap_enabled = on_heap_enabled

    @property
    def cache_off_heap_max_size_bytes(self) -> int:
        """Gets the cache_off_heap_max_size_bytes of this Queue.


        :return: The cache_off_heap_max_size_bytes of this Queue.
        :rtype: int
        """
        return self._cache_off_heap_max_size_bytes

    @cache_off_heap_max_size_bytes.setter
    def cache_off_heap_max_size_bytes(self, cache_off_heap_max_size_bytes: int):
        """Sets the cache_off_heap_max_size_bytes of this Queue.


        :param cache_off_heap_max_size_bytes: The cache_off_heap_max_size_bytes of this Queue.
        :type cache_off_heap_max_size_bytes: int
        """

        self._cache_off_heap_max_size_bytes = cache_off_heap_max_size_bytes

    @property
    def cache_off_heap_initial_size_bytes(self) -> int:
        """Gets the cache_off_heap_initial_size_bytes of this Queue.


        :return: The cache_off_heap_initial_size_bytes of this Queue.
        :rtype: int
        """
        return self._cache_off_heap_initial_size_bytes

    @cache_off_heap_initial_size_bytes.setter
    def cache_off_heap_initial_size_bytes(self, cache_off_heap_initial_size_bytes: int):
        """Sets the cache_off_heap_initial_size_bytes of this Queue.


        :param cache_off_heap_initial_size_bytes: The cache_off_heap_initial_size_bytes of this Queue.
        :type cache_off_heap_initial_size_bytes: int
        """

        self._cache_off_heap_initial_size_bytes = cache_off_heap_initial_size_bytes

    @property
    def cache_off_heap_default_percentage(self) -> float:
        """Gets the cache_off_heap_default_percentage of this Queue.


        :return: The cache_off_heap_default_percentage of this Queue.
        :rtype: float
        """
        return self._cache_off_heap_default_percentage

    @cache_off_heap_default_percentage.setter
    def cache_off_heap_default_percentage(self, cache_off_heap_default_percentage: float):
        """Sets the cache_off_heap_default_percentage of this Queue.


        :param cache_off_heap_default_percentage: The cache_off_heap_default_percentage of this Queue.
        :type cache_off_heap_default_percentage: float
        """

        self._cache_off_heap_default_percentage = cache_off_heap_default_percentage

    @property
    def enable_cache_warmer(self) -> bool:
        """Gets the enable_cache_warmer of this Queue.


        :return: The enable_cache_warmer of this Queue.
        :rtype: bool
        """
        return self._enable_cache_warmer

    @enable_cache_warmer.setter
    def enable_cache_warmer(self, enable_cache_warmer: bool):
        """Sets the enable_cache_warmer of this Queue.


        :param enable_cache_warmer: The enable_cache_warmer of this Queue.
        :type enable_cache_warmer: bool
        """

        self._enable_cache_warmer = enable_cache_warmer

    @property
    def ignite_pool_size(self) -> int:
        """Gets the ignite_pool_size of this Queue.


        :return: The ignite_pool_size of this Queue.
        :rtype: int
        """
        return self._ignite_pool_size

    @ignite_pool_size.setter
    def ignite_pool_size(self, ignite_pool_size: int):
        """Sets the ignite_pool_size of this Queue.


        :param ignite_pool_size: The ignite_pool_size of this Queue.
        :type ignite_pool_size: int
        """

        self._ignite_pool_size = ignite_pool_size

    @property
    def cache_cot_in_repository(self) -> bool:
        """Gets the cache_cot_in_repository of this Queue.


        :return: The cache_cot_in_repository of this Queue.
        :rtype: bool
        """
        return self._cache_cot_in_repository

    @cache_cot_in_repository.setter
    def cache_cot_in_repository(self, cache_cot_in_repository: bool):
        """Sets the cache_cot_in_repository of this Queue.


        :param cache_cot_in_repository: The cache_cot_in_repository of this Queue.
        :type cache_cot_in_repository: bool
        """

        self._cache_cot_in_repository = cache_cot_in_repository

    @property
    def enable_cache_persistence(self) -> bool:
        """Gets the enable_cache_persistence of this Queue.


        :return: The enable_cache_persistence of this Queue.
        :rtype: bool
        """
        return self._enable_cache_persistence

    @enable_cache_persistence.setter
    def enable_cache_persistence(self, enable_cache_persistence: bool):
        """Sets the enable_cache_persistence of this Queue.


        :param enable_cache_persistence: The enable_cache_persistence of this Queue.
        :type enable_cache_persistence: bool
        """

        self._enable_cache_persistence = enable_cache_persistence

    @property
    def message_timestamp_cache_size_items(self) -> int:
        """Gets the message_timestamp_cache_size_items of this Queue.


        :return: The message_timestamp_cache_size_items of this Queue.
        :rtype: int
        """
        return self._message_timestamp_cache_size_items

    @message_timestamp_cache_size_items.setter
    def message_timestamp_cache_size_items(self, message_timestamp_cache_size_items: int):
        """Sets the message_timestamp_cache_size_items of this Queue.


        :param message_timestamp_cache_size_items: The message_timestamp_cache_size_items of this Queue.
        :type message_timestamp_cache_size_items: int
        """

        self._message_timestamp_cache_size_items = message_timestamp_cache_size_items

    @property
    def enable_store_forward_chat(self) -> bool:
        """Gets the enable_store_forward_chat of this Queue.


        :return: The enable_store_forward_chat of this Queue.
        :rtype: bool
        """
        return self._enable_store_forward_chat

    @enable_store_forward_chat.setter
    def enable_store_forward_chat(self, enable_store_forward_chat: bool):
        """Sets the enable_store_forward_chat of this Queue.


        :param enable_store_forward_chat: The enable_store_forward_chat of this Queue.
        :type enable_store_forward_chat: bool
        """

        self._enable_store_forward_chat = enable_store_forward_chat

    @property
    def store_forward_query_buffer_ms(self) -> int:
        """Gets the store_forward_query_buffer_ms of this Queue.


        :return: The store_forward_query_buffer_ms of this Queue.
        :rtype: int
        """
        return self._store_forward_query_buffer_ms

    @store_forward_query_buffer_ms.setter
    def store_forward_query_buffer_ms(self, store_forward_query_buffer_ms: int):
        """Sets the store_forward_query_buffer_ms of this Queue.


        :param store_forward_query_buffer_ms: The store_forward_query_buffer_ms of this Queue.
        :type store_forward_query_buffer_ms: int
        """

        self._store_forward_query_buffer_ms = store_forward_query_buffer_ms

    @property
    def store_forward_send_buffer_ms(self) -> int:
        """Gets the store_forward_send_buffer_ms of this Queue.


        :return: The store_forward_send_buffer_ms of this Queue.
        :rtype: int
        """
        return self._store_forward_send_buffer_ms

    @store_forward_send_buffer_ms.setter
    def store_forward_send_buffer_ms(self, store_forward_send_buffer_ms: int):
        """Sets the store_forward_send_buffer_ms of this Queue.


        :param store_forward_send_buffer_ms: The store_forward_send_buffer_ms of this Queue.
        :type store_forward_send_buffer_ms: int
        """

        self._store_forward_send_buffer_ms = store_forward_send_buffer_ms

    @property
    def enable_client_endpoint_cache(self) -> bool:
        """Gets the enable_client_endpoint_cache of this Queue.


        :return: The enable_client_endpoint_cache of this Queue.
        :rtype: bool
        """
        return self._enable_client_endpoint_cache

    @enable_client_endpoint_cache.setter
    def enable_client_endpoint_cache(self, enable_client_endpoint_cache: bool):
        """Sets the enable_client_endpoint_cache of this Queue.


        :param enable_client_endpoint_cache: The enable_client_endpoint_cache of this Queue.
        :type enable_client_endpoint_cache: bool
        """

        self._enable_client_endpoint_cache = enable_client_endpoint_cache

    @property
    def contact_cache_update_rate_limit_seconds(self) -> int:
        """Gets the contact_cache_update_rate_limit_seconds of this Queue.


        :return: The contact_cache_update_rate_limit_seconds of this Queue.
        :rtype: int
        """
        return self._contact_cache_update_rate_limit_seconds

    @contact_cache_update_rate_limit_seconds.setter
    def contact_cache_update_rate_limit_seconds(self, contact_cache_update_rate_limit_seconds: int):
        """Sets the contact_cache_update_rate_limit_seconds of this Queue.


        :param contact_cache_update_rate_limit_seconds: The contact_cache_update_rate_limit_seconds of this Queue.
        :type contact_cache_update_rate_limit_seconds: int
        """

        self._contact_cache_update_rate_limit_seconds = contact_cache_update_rate_limit_seconds

    @property
    def contact_cache_recency_limit_seconds(self) -> int:
        """Gets the contact_cache_recency_limit_seconds of this Queue.


        :return: The contact_cache_recency_limit_seconds of this Queue.
        :rtype: int
        """
        return self._contact_cache_recency_limit_seconds

    @contact_cache_recency_limit_seconds.setter
    def contact_cache_recency_limit_seconds(self, contact_cache_recency_limit_seconds: int):
        """Sets the contact_cache_recency_limit_seconds of this Queue.


        :param contact_cache_recency_limit_seconds: The contact_cache_recency_limit_seconds of this Queue.
        :type contact_cache_recency_limit_seconds: int
        """

        self._contact_cache_recency_limit_seconds = contact_cache_recency_limit_seconds

    @property
    def plugin_datafeed_cache_seconds(self) -> int:
        """Gets the plugin_datafeed_cache_seconds of this Queue.


        :return: The plugin_datafeed_cache_seconds of this Queue.
        :rtype: int
        """
        return self._plugin_datafeed_cache_seconds

    @plugin_datafeed_cache_seconds.setter
    def plugin_datafeed_cache_seconds(self, plugin_datafeed_cache_seconds: int):
        """Sets the plugin_datafeed_cache_seconds of this Queue.


        :param plugin_datafeed_cache_seconds: The plugin_datafeed_cache_seconds of this Queue.
        :type plugin_datafeed_cache_seconds: int
        """

        self._plugin_datafeed_cache_seconds = plugin_datafeed_cache_seconds
