# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ldap import Ldap  # noqa: F401,E501
from swagger_server.models.oauth import Oauth  # noqa: F401,E501
java.io.File  # noqa: F401,E501
from swagger_server import util


class Auth(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ldap: Ldap=None, file: File=None, oauth: Oauth=None, x509_groups: bool=None, x509_groups_default_rdn: bool=None, x509_add_anonymous: bool=None, x509_use_group_cache: bool=None, x509_check_revocation: bool=None, x509_token_auth: bool=None, default: str=None, dnusername_extractor_regex: str=None):  # noqa: E501
        """Auth - a model defined in Swagger

        :param ldap: The ldap of this Auth.  # noqa: E501
        :type ldap: Ldap
        :param file: The file of this Auth.  # noqa: E501
        :type file: File
        :param oauth: The oauth of this Auth.  # noqa: E501
        :type oauth: Oauth
        :param x509_groups: The x509_groups of this Auth.  # noqa: E501
        :type x509_groups: bool
        :param x509_groups_default_rdn: The x509_groups_default_rdn of this Auth.  # noqa: E501
        :type x509_groups_default_rdn: bool
        :param x509_add_anonymous: The x509_add_anonymous of this Auth.  # noqa: E501
        :type x509_add_anonymous: bool
        :param x509_use_group_cache: The x509_use_group_cache of this Auth.  # noqa: E501
        :type x509_use_group_cache: bool
        :param x509_check_revocation: The x509_check_revocation of this Auth.  # noqa: E501
        :type x509_check_revocation: bool
        :param x509_token_auth: The x509_token_auth of this Auth.  # noqa: E501
        :type x509_token_auth: bool
        :param default: The default of this Auth.  # noqa: E501
        :type default: str
        :param dnusername_extractor_regex: The dnusername_extractor_regex of this Auth.  # noqa: E501
        :type dnusername_extractor_regex: str
        """
        self.swagger_types = {
            'ldap': Ldap,
            'file': File,
            'oauth': Oauth,
            'x509_groups': bool,
            'x509_groups_default_rdn': bool,
            'x509_add_anonymous': bool,
            'x509_use_group_cache': bool,
            'x509_check_revocation': bool,
            'x509_token_auth': bool,
            'default': str,
            'dnusername_extractor_regex': str
        }

        self.attribute_map = {
            'ldap': 'ldap',
            'file': 'file',
            'oauth': 'oauth',
            'x509_groups': 'x509Groups',
            'x509_groups_default_rdn': 'x509GroupsDefaultRDN',
            'x509_add_anonymous': 'x509AddAnonymous',
            'x509_use_group_cache': 'x509UseGroupCache',
            'x509_check_revocation': 'x509CheckRevocation',
            'x509_token_auth': 'x509TokenAuth',
            'default': 'default',
            'dnusername_extractor_regex': 'dnusernameExtractorRegex'
        }
        self._ldap = ldap
        self._file = file
        self._oauth = oauth
        self._x509_groups = x509_groups
        self._x509_groups_default_rdn = x509_groups_default_rdn
        self._x509_add_anonymous = x509_add_anonymous
        self._x509_use_group_cache = x509_use_group_cache
        self._x509_check_revocation = x509_check_revocation
        self._x509_token_auth = x509_token_auth
        self._default = default
        self._dnusername_extractor_regex = dnusername_extractor_regex

    @classmethod
    def from_dict(cls, dikt) -> 'Auth':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Auth of this Auth.  # noqa: E501
        :rtype: Auth
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ldap(self) -> Ldap:
        """Gets the ldap of this Auth.


        :return: The ldap of this Auth.
        :rtype: Ldap
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap: Ldap):
        """Sets the ldap of this Auth.


        :param ldap: The ldap of this Auth.
        :type ldap: Ldap
        """

        self._ldap = ldap

    @property
    def file(self) -> File:
        """Gets the file of this Auth.


        :return: The file of this Auth.
        :rtype: File
        """
        return self._file

    @file.setter
    def file(self, file: File):
        """Sets the file of this Auth.


        :param file: The file of this Auth.
        :type file: File
        """

        self._file = file

    @property
    def oauth(self) -> Oauth:
        """Gets the oauth of this Auth.


        :return: The oauth of this Auth.
        :rtype: Oauth
        """
        return self._oauth

    @oauth.setter
    def oauth(self, oauth: Oauth):
        """Sets the oauth of this Auth.


        :param oauth: The oauth of this Auth.
        :type oauth: Oauth
        """

        self._oauth = oauth

    @property
    def x509_groups(self) -> bool:
        """Gets the x509_groups of this Auth.


        :return: The x509_groups of this Auth.
        :rtype: bool
        """
        return self._x509_groups

    @x509_groups.setter
    def x509_groups(self, x509_groups: bool):
        """Sets the x509_groups of this Auth.


        :param x509_groups: The x509_groups of this Auth.
        :type x509_groups: bool
        """

        self._x509_groups = x509_groups

    @property
    def x509_groups_default_rdn(self) -> bool:
        """Gets the x509_groups_default_rdn of this Auth.


        :return: The x509_groups_default_rdn of this Auth.
        :rtype: bool
        """
        return self._x509_groups_default_rdn

    @x509_groups_default_rdn.setter
    def x509_groups_default_rdn(self, x509_groups_default_rdn: bool):
        """Sets the x509_groups_default_rdn of this Auth.


        :param x509_groups_default_rdn: The x509_groups_default_rdn of this Auth.
        :type x509_groups_default_rdn: bool
        """

        self._x509_groups_default_rdn = x509_groups_default_rdn

    @property
    def x509_add_anonymous(self) -> bool:
        """Gets the x509_add_anonymous of this Auth.


        :return: The x509_add_anonymous of this Auth.
        :rtype: bool
        """
        return self._x509_add_anonymous

    @x509_add_anonymous.setter
    def x509_add_anonymous(self, x509_add_anonymous: bool):
        """Sets the x509_add_anonymous of this Auth.


        :param x509_add_anonymous: The x509_add_anonymous of this Auth.
        :type x509_add_anonymous: bool
        """

        self._x509_add_anonymous = x509_add_anonymous

    @property
    def x509_use_group_cache(self) -> bool:
        """Gets the x509_use_group_cache of this Auth.


        :return: The x509_use_group_cache of this Auth.
        :rtype: bool
        """
        return self._x509_use_group_cache

    @x509_use_group_cache.setter
    def x509_use_group_cache(self, x509_use_group_cache: bool):
        """Sets the x509_use_group_cache of this Auth.


        :param x509_use_group_cache: The x509_use_group_cache of this Auth.
        :type x509_use_group_cache: bool
        """

        self._x509_use_group_cache = x509_use_group_cache

    @property
    def x509_check_revocation(self) -> bool:
        """Gets the x509_check_revocation of this Auth.


        :return: The x509_check_revocation of this Auth.
        :rtype: bool
        """
        return self._x509_check_revocation

    @x509_check_revocation.setter
    def x509_check_revocation(self, x509_check_revocation: bool):
        """Sets the x509_check_revocation of this Auth.


        :param x509_check_revocation: The x509_check_revocation of this Auth.
        :type x509_check_revocation: bool
        """

        self._x509_check_revocation = x509_check_revocation

    @property
    def x509_token_auth(self) -> bool:
        """Gets the x509_token_auth of this Auth.


        :return: The x509_token_auth of this Auth.
        :rtype: bool
        """
        return self._x509_token_auth

    @x509_token_auth.setter
    def x509_token_auth(self, x509_token_auth: bool):
        """Sets the x509_token_auth of this Auth.


        :param x509_token_auth: The x509_token_auth of this Auth.
        :type x509_token_auth: bool
        """

        self._x509_token_auth = x509_token_auth

    @property
    def default(self) -> str:
        """Gets the default of this Auth.


        :return: The default of this Auth.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default: str):
        """Sets the default of this Auth.


        :param default: The default of this Auth.
        :type default: str
        """

        self._default = default

    @property
    def dnusername_extractor_regex(self) -> str:
        """Gets the dnusername_extractor_regex of this Auth.


        :return: The dnusername_extractor_regex of this Auth.
        :rtype: str
        """
        return self._dnusername_extractor_regex

    @dnusername_extractor_regex.setter
    def dnusername_extractor_regex(self, dnusername_extractor_regex: str):
        """Sets the dnusername_extractor_regex of this Auth.


        :param dnusername_extractor_regex: The dnusername_extractor_regex of this Auth.
        :type dnusername_extractor_regex: str
        """

        self._dnusername_extractor_regex = dnusername_extractor_regex
