# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FeedV2(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, active: bool=None, alias: str=None, url: str=None, order: int=None, mac_address: str=None, rover_port: str=None, ignore_embedded_klv: str=None, source: str=None, network_timeout: str=None, buffer_time: str=None, rtsp_reliable: str=None, thumbnail: str=None, classification: str=None, latitude: str=None, longitude: str=None, fov: str=None, heading: str=None, range: str=None, width: int=None, height: int=None, bitrate: int=None):  # noqa: E501
        """FeedV2 - a model defined in Swagger

        :param uuid: The uuid of this FeedV2.  # noqa: E501
        :type uuid: str
        :param active: The active of this FeedV2.  # noqa: E501
        :type active: bool
        :param alias: The alias of this FeedV2.  # noqa: E501
        :type alias: str
        :param url: The url of this FeedV2.  # noqa: E501
        :type url: str
        :param order: The order of this FeedV2.  # noqa: E501
        :type order: int
        :param mac_address: The mac_address of this FeedV2.  # noqa: E501
        :type mac_address: str
        :param rover_port: The rover_port of this FeedV2.  # noqa: E501
        :type rover_port: str
        :param ignore_embedded_klv: The ignore_embedded_klv of this FeedV2.  # noqa: E501
        :type ignore_embedded_klv: str
        :param source: The source of this FeedV2.  # noqa: E501
        :type source: str
        :param network_timeout: The network_timeout of this FeedV2.  # noqa: E501
        :type network_timeout: str
        :param buffer_time: The buffer_time of this FeedV2.  # noqa: E501
        :type buffer_time: str
        :param rtsp_reliable: The rtsp_reliable of this FeedV2.  # noqa: E501
        :type rtsp_reliable: str
        :param thumbnail: The thumbnail of this FeedV2.  # noqa: E501
        :type thumbnail: str
        :param classification: The classification of this FeedV2.  # noqa: E501
        :type classification: str
        :param latitude: The latitude of this FeedV2.  # noqa: E501
        :type latitude: str
        :param longitude: The longitude of this FeedV2.  # noqa: E501
        :type longitude: str
        :param fov: The fov of this FeedV2.  # noqa: E501
        :type fov: str
        :param heading: The heading of this FeedV2.  # noqa: E501
        :type heading: str
        :param range: The range of this FeedV2.  # noqa: E501
        :type range: str
        :param width: The width of this FeedV2.  # noqa: E501
        :type width: int
        :param height: The height of this FeedV2.  # noqa: E501
        :type height: int
        :param bitrate: The bitrate of this FeedV2.  # noqa: E501
        :type bitrate: int
        """
        self.swagger_types = {
            'uuid': str,
            'active': bool,
            'alias': str,
            'url': str,
            'order': int,
            'mac_address': str,
            'rover_port': str,
            'ignore_embedded_klv': str,
            'source': str,
            'network_timeout': str,
            'buffer_time': str,
            'rtsp_reliable': str,
            'thumbnail': str,
            'classification': str,
            'latitude': str,
            'longitude': str,
            'fov': str,
            'heading': str,
            'range': str,
            'width': int,
            'height': int,
            'bitrate': int
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'active': 'active',
            'alias': 'alias',
            'url': 'url',
            'order': 'order',
            'mac_address': 'macAddress',
            'rover_port': 'roverPort',
            'ignore_embedded_klv': 'ignoreEmbeddedKLV',
            'source': 'source',
            'network_timeout': 'networkTimeout',
            'buffer_time': 'bufferTime',
            'rtsp_reliable': 'rtspReliable',
            'thumbnail': 'thumbnail',
            'classification': 'classification',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'fov': 'fov',
            'heading': 'heading',
            'range': 'range',
            'width': 'width',
            'height': 'height',
            'bitrate': 'bitrate'
        }
        self._uuid = uuid
        self._active = active
        self._alias = alias
        self._url = url
        self._order = order
        self._mac_address = mac_address
        self._rover_port = rover_port
        self._ignore_embedded_klv = ignore_embedded_klv
        self._source = source
        self._network_timeout = network_timeout
        self._buffer_time = buffer_time
        self._rtsp_reliable = rtsp_reliable
        self._thumbnail = thumbnail
        self._classification = classification
        self._latitude = latitude
        self._longitude = longitude
        self._fov = fov
        self._heading = heading
        self._range = range
        self._width = width
        self._height = height
        self._bitrate = bitrate

    @classmethod
    def from_dict(cls, dikt) -> 'FeedV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeedV2 of this FeedV2.  # noqa: E501
        :rtype: FeedV2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this FeedV2.


        :return: The uuid of this FeedV2.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this FeedV2.


        :param uuid: The uuid of this FeedV2.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def active(self) -> bool:
        """Gets the active of this FeedV2.


        :return: The active of this FeedV2.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this FeedV2.


        :param active: The active of this FeedV2.
        :type active: bool
        """

        self._active = active

    @property
    def alias(self) -> str:
        """Gets the alias of this FeedV2.


        :return: The alias of this FeedV2.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias: str):
        """Sets the alias of this FeedV2.


        :param alias: The alias of this FeedV2.
        :type alias: str
        """

        self._alias = alias

    @property
    def url(self) -> str:
        """Gets the url of this FeedV2.


        :return: The url of this FeedV2.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this FeedV2.


        :param url: The url of this FeedV2.
        :type url: str
        """

        self._url = url

    @property
    def order(self) -> int:
        """Gets the order of this FeedV2.


        :return: The order of this FeedV2.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order: int):
        """Sets the order of this FeedV2.


        :param order: The order of this FeedV2.
        :type order: int
        """

        self._order = order

    @property
    def mac_address(self) -> str:
        """Gets the mac_address of this FeedV2.


        :return: The mac_address of this FeedV2.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address: str):
        """Sets the mac_address of this FeedV2.


        :param mac_address: The mac_address of this FeedV2.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def rover_port(self) -> str:
        """Gets the rover_port of this FeedV2.


        :return: The rover_port of this FeedV2.
        :rtype: str
        """
        return self._rover_port

    @rover_port.setter
    def rover_port(self, rover_port: str):
        """Sets the rover_port of this FeedV2.


        :param rover_port: The rover_port of this FeedV2.
        :type rover_port: str
        """

        self._rover_port = rover_port

    @property
    def ignore_embedded_klv(self) -> str:
        """Gets the ignore_embedded_klv of this FeedV2.


        :return: The ignore_embedded_klv of this FeedV2.
        :rtype: str
        """
        return self._ignore_embedded_klv

    @ignore_embedded_klv.setter
    def ignore_embedded_klv(self, ignore_embedded_klv: str):
        """Sets the ignore_embedded_klv of this FeedV2.


        :param ignore_embedded_klv: The ignore_embedded_klv of this FeedV2.
        :type ignore_embedded_klv: str
        """

        self._ignore_embedded_klv = ignore_embedded_klv

    @property
    def source(self) -> str:
        """Gets the source of this FeedV2.


        :return: The source of this FeedV2.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this FeedV2.


        :param source: The source of this FeedV2.
        :type source: str
        """

        self._source = source

    @property
    def network_timeout(self) -> str:
        """Gets the network_timeout of this FeedV2.


        :return: The network_timeout of this FeedV2.
        :rtype: str
        """
        return self._network_timeout

    @network_timeout.setter
    def network_timeout(self, network_timeout: str):
        """Sets the network_timeout of this FeedV2.


        :param network_timeout: The network_timeout of this FeedV2.
        :type network_timeout: str
        """

        self._network_timeout = network_timeout

    @property
    def buffer_time(self) -> str:
        """Gets the buffer_time of this FeedV2.


        :return: The buffer_time of this FeedV2.
        :rtype: str
        """
        return self._buffer_time

    @buffer_time.setter
    def buffer_time(self, buffer_time: str):
        """Sets the buffer_time of this FeedV2.


        :param buffer_time: The buffer_time of this FeedV2.
        :type buffer_time: str
        """

        self._buffer_time = buffer_time

    @property
    def rtsp_reliable(self) -> str:
        """Gets the rtsp_reliable of this FeedV2.


        :return: The rtsp_reliable of this FeedV2.
        :rtype: str
        """
        return self._rtsp_reliable

    @rtsp_reliable.setter
    def rtsp_reliable(self, rtsp_reliable: str):
        """Sets the rtsp_reliable of this FeedV2.


        :param rtsp_reliable: The rtsp_reliable of this FeedV2.
        :type rtsp_reliable: str
        """

        self._rtsp_reliable = rtsp_reliable

    @property
    def thumbnail(self) -> str:
        """Gets the thumbnail of this FeedV2.


        :return: The thumbnail of this FeedV2.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail: str):
        """Sets the thumbnail of this FeedV2.


        :param thumbnail: The thumbnail of this FeedV2.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def classification(self) -> str:
        """Gets the classification of this FeedV2.


        :return: The classification of this FeedV2.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification: str):
        """Sets the classification of this FeedV2.


        :param classification: The classification of this FeedV2.
        :type classification: str
        """

        self._classification = classification

    @property
    def latitude(self) -> str:
        """Gets the latitude of this FeedV2.


        :return: The latitude of this FeedV2.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: str):
        """Sets the latitude of this FeedV2.


        :param latitude: The latitude of this FeedV2.
        :type latitude: str
        """

        self._latitude = latitude

    @property
    def longitude(self) -> str:
        """Gets the longitude of this FeedV2.


        :return: The longitude of this FeedV2.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: str):
        """Sets the longitude of this FeedV2.


        :param longitude: The longitude of this FeedV2.
        :type longitude: str
        """

        self._longitude = longitude

    @property
    def fov(self) -> str:
        """Gets the fov of this FeedV2.


        :return: The fov of this FeedV2.
        :rtype: str
        """
        return self._fov

    @fov.setter
    def fov(self, fov: str):
        """Sets the fov of this FeedV2.


        :param fov: The fov of this FeedV2.
        :type fov: str
        """

        self._fov = fov

    @property
    def heading(self) -> str:
        """Gets the heading of this FeedV2.


        :return: The heading of this FeedV2.
        :rtype: str
        """
        return self._heading

    @heading.setter
    def heading(self, heading: str):
        """Sets the heading of this FeedV2.


        :param heading: The heading of this FeedV2.
        :type heading: str
        """

        self._heading = heading

    @property
    def range(self) -> str:
        """Gets the range of this FeedV2.


        :return: The range of this FeedV2.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range: str):
        """Sets the range of this FeedV2.


        :param range: The range of this FeedV2.
        :type range: str
        """

        self._range = range

    @property
    def width(self) -> int:
        """Gets the width of this FeedV2.


        :return: The width of this FeedV2.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width: int):
        """Sets the width of this FeedV2.


        :param width: The width of this FeedV2.
        :type width: int
        """

        self._width = width

    @property
    def height(self) -> int:
        """Gets the height of this FeedV2.


        :return: The height of this FeedV2.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """Sets the height of this FeedV2.


        :param height: The height of this FeedV2.
        :type height: int
        """

        self._height = height

    @property
    def bitrate(self) -> int:
        """Gets the bitrate of this FeedV2.


        :return: The bitrate of this FeedV2.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate: int):
        """Sets the bitrate of this FeedV2.


        :param bitrate: The bitrate of this FeedV2.
        :type bitrate: int
        """

        self._bitrate = bitrate
