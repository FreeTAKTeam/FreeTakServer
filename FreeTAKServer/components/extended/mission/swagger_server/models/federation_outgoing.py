# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FederationOutgoing(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, display_name: str=None, address: str=None, port: int=None, enabled: bool=None, protocol_version: int=None, reconnect_interval: int=None, filter: str=None, max_frame_size: int=None, fallback: str=None, max_retries: int=None, unlimited_retries: bool=None):  # noqa: E501
        """FederationOutgoing - a model defined in Swagger

        :param display_name: The display_name of this FederationOutgoing.  # noqa: E501
        :type display_name: str
        :param address: The address of this FederationOutgoing.  # noqa: E501
        :type address: str
        :param port: The port of this FederationOutgoing.  # noqa: E501
        :type port: int
        :param enabled: The enabled of this FederationOutgoing.  # noqa: E501
        :type enabled: bool
        :param protocol_version: The protocol_version of this FederationOutgoing.  # noqa: E501
        :type protocol_version: int
        :param reconnect_interval: The reconnect_interval of this FederationOutgoing.  # noqa: E501
        :type reconnect_interval: int
        :param filter: The filter of this FederationOutgoing.  # noqa: E501
        :type filter: str
        :param max_frame_size: The max_frame_size of this FederationOutgoing.  # noqa: E501
        :type max_frame_size: int
        :param fallback: The fallback of this FederationOutgoing.  # noqa: E501
        :type fallback: str
        :param max_retries: The max_retries of this FederationOutgoing.  # noqa: E501
        :type max_retries: int
        :param unlimited_retries: The unlimited_retries of this FederationOutgoing.  # noqa: E501
        :type unlimited_retries: bool
        """
        self.swagger_types = {
            'display_name': str,
            'address': str,
            'port': int,
            'enabled': bool,
            'protocol_version': int,
            'reconnect_interval': int,
            'filter': str,
            'max_frame_size': int,
            'fallback': str,
            'max_retries': int,
            'unlimited_retries': bool
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'address': 'address',
            'port': 'port',
            'enabled': 'enabled',
            'protocol_version': 'protocolVersion',
            'reconnect_interval': 'reconnectInterval',
            'filter': 'filter',
            'max_frame_size': 'maxFrameSize',
            'fallback': 'fallback',
            'max_retries': 'maxRetries',
            'unlimited_retries': 'unlimitedRetries'
        }
        self._display_name = display_name
        self._address = address
        self._port = port
        self._enabled = enabled
        self._protocol_version = protocol_version
        self._reconnect_interval = reconnect_interval
        self._filter = filter
        self._max_frame_size = max_frame_size
        self._fallback = fallback
        self._max_retries = max_retries
        self._unlimited_retries = unlimited_retries

    @classmethod
    def from_dict(cls, dikt) -> 'FederationOutgoing':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FederationOutgoing of this FederationOutgoing.  # noqa: E501
        :rtype: FederationOutgoing
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self) -> str:
        """Gets the display_name of this FederationOutgoing.


        :return: The display_name of this FederationOutgoing.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this FederationOutgoing.


        :param display_name: The display_name of this FederationOutgoing.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def address(self) -> str:
        """Gets the address of this FederationOutgoing.


        :return: The address of this FederationOutgoing.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this FederationOutgoing.


        :param address: The address of this FederationOutgoing.
        :type address: str
        """

        self._address = address

    @property
    def port(self) -> int:
        """Gets the port of this FederationOutgoing.


        :return: The port of this FederationOutgoing.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this FederationOutgoing.


        :param port: The port of this FederationOutgoing.
        :type port: int
        """

        self._port = port

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this FederationOutgoing.


        :return: The enabled of this FederationOutgoing.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this FederationOutgoing.


        :param enabled: The enabled of this FederationOutgoing.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def protocol_version(self) -> int:
        """Gets the protocol_version of this FederationOutgoing.


        :return: The protocol_version of this FederationOutgoing.
        :rtype: int
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version: int):
        """Sets the protocol_version of this FederationOutgoing.


        :param protocol_version: The protocol_version of this FederationOutgoing.
        :type protocol_version: int
        """

        self._protocol_version = protocol_version

    @property
    def reconnect_interval(self) -> int:
        """Gets the reconnect_interval of this FederationOutgoing.


        :return: The reconnect_interval of this FederationOutgoing.
        :rtype: int
        """
        return self._reconnect_interval

    @reconnect_interval.setter
    def reconnect_interval(self, reconnect_interval: int):
        """Sets the reconnect_interval of this FederationOutgoing.


        :param reconnect_interval: The reconnect_interval of this FederationOutgoing.
        :type reconnect_interval: int
        """

        self._reconnect_interval = reconnect_interval

    @property
    def filter(self) -> str:
        """Gets the filter of this FederationOutgoing.


        :return: The filter of this FederationOutgoing.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter: str):
        """Sets the filter of this FederationOutgoing.


        :param filter: The filter of this FederationOutgoing.
        :type filter: str
        """

        self._filter = filter

    @property
    def max_frame_size(self) -> int:
        """Gets the max_frame_size of this FederationOutgoing.


        :return: The max_frame_size of this FederationOutgoing.
        :rtype: int
        """
        return self._max_frame_size

    @max_frame_size.setter
    def max_frame_size(self, max_frame_size: int):
        """Sets the max_frame_size of this FederationOutgoing.


        :param max_frame_size: The max_frame_size of this FederationOutgoing.
        :type max_frame_size: int
        """

        self._max_frame_size = max_frame_size

    @property
    def fallback(self) -> str:
        """Gets the fallback of this FederationOutgoing.


        :return: The fallback of this FederationOutgoing.
        :rtype: str
        """
        return self._fallback

    @fallback.setter
    def fallback(self, fallback: str):
        """Sets the fallback of this FederationOutgoing.


        :param fallback: The fallback of this FederationOutgoing.
        :type fallback: str
        """

        self._fallback = fallback

    @property
    def max_retries(self) -> int:
        """Gets the max_retries of this FederationOutgoing.


        :return: The max_retries of this FederationOutgoing.
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries: int):
        """Sets the max_retries of this FederationOutgoing.


        :param max_retries: The max_retries of this FederationOutgoing.
        :type max_retries: int
        """

        self._max_retries = max_retries

    @property
    def unlimited_retries(self) -> bool:
        """Gets the unlimited_retries of this FederationOutgoing.


        :return: The unlimited_retries of this FederationOutgoing.
        :rtype: bool
        """
        return self._unlimited_retries

    @unlimited_retries.setter
    def unlimited_retries(self, unlimited_retries: bool):
        """Sets the unlimited_retries of this FederationOutgoing.


        :param unlimited_retries: The unlimited_retries of this FederationOutgoing.
        :type unlimited_retries: bool
        """

        self._unlimited_retries = unlimited_retries
