# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TAKServerCAConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, keystore: str=None, keystore_file: str=None, keystore_pass: str=None, validity_days: int=None, validity_not_before_offset_minutes: int=None, signature_alg: str=None, cakey: str=None, cacertificate: str=None):  # noqa: E501
        """TAKServerCAConfig - a model defined in Swagger

        :param keystore: The keystore of this TAKServerCAConfig.  # noqa: E501
        :type keystore: str
        :param keystore_file: The keystore_file of this TAKServerCAConfig.  # noqa: E501
        :type keystore_file: str
        :param keystore_pass: The keystore_pass of this TAKServerCAConfig.  # noqa: E501
        :type keystore_pass: str
        :param validity_days: The validity_days of this TAKServerCAConfig.  # noqa: E501
        :type validity_days: int
        :param validity_not_before_offset_minutes: The validity_not_before_offset_minutes of this TAKServerCAConfig.  # noqa: E501
        :type validity_not_before_offset_minutes: int
        :param signature_alg: The signature_alg of this TAKServerCAConfig.  # noqa: E501
        :type signature_alg: str
        :param cakey: The cakey of this TAKServerCAConfig.  # noqa: E501
        :type cakey: str
        :param cacertificate: The cacertificate of this TAKServerCAConfig.  # noqa: E501
        :type cacertificate: str
        """
        self.swagger_types = {
            'keystore': str,
            'keystore_file': str,
            'keystore_pass': str,
            'validity_days': int,
            'validity_not_before_offset_minutes': int,
            'signature_alg': str,
            'cakey': str,
            'cacertificate': str
        }

        self.attribute_map = {
            'keystore': 'keystore',
            'keystore_file': 'keystoreFile',
            'keystore_pass': 'keystorePass',
            'validity_days': 'validityDays',
            'validity_not_before_offset_minutes': 'validityNotBeforeOffsetMinutes',
            'signature_alg': 'signatureAlg',
            'cakey': 'cakey',
            'cacertificate': 'cacertificate'
        }
        self._keystore = keystore
        self._keystore_file = keystore_file
        self._keystore_pass = keystore_pass
        self._validity_days = validity_days
        self._validity_not_before_offset_minutes = validity_not_before_offset_minutes
        self._signature_alg = signature_alg
        self._cakey = cakey
        self._cacertificate = cacertificate

    @classmethod
    def from_dict(cls, dikt) -> 'TAKServerCAConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TAKServerCAConfig of this TAKServerCAConfig.  # noqa: E501
        :rtype: TAKServerCAConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keystore(self) -> str:
        """Gets the keystore of this TAKServerCAConfig.


        :return: The keystore of this TAKServerCAConfig.
        :rtype: str
        """
        return self._keystore

    @keystore.setter
    def keystore(self, keystore: str):
        """Sets the keystore of this TAKServerCAConfig.


        :param keystore: The keystore of this TAKServerCAConfig.
        :type keystore: str
        """

        self._keystore = keystore

    @property
    def keystore_file(self) -> str:
        """Gets the keystore_file of this TAKServerCAConfig.


        :return: The keystore_file of this TAKServerCAConfig.
        :rtype: str
        """
        return self._keystore_file

    @keystore_file.setter
    def keystore_file(self, keystore_file: str):
        """Sets the keystore_file of this TAKServerCAConfig.


        :param keystore_file: The keystore_file of this TAKServerCAConfig.
        :type keystore_file: str
        """

        self._keystore_file = keystore_file

    @property
    def keystore_pass(self) -> str:
        """Gets the keystore_pass of this TAKServerCAConfig.


        :return: The keystore_pass of this TAKServerCAConfig.
        :rtype: str
        """
        return self._keystore_pass

    @keystore_pass.setter
    def keystore_pass(self, keystore_pass: str):
        """Sets the keystore_pass of this TAKServerCAConfig.


        :param keystore_pass: The keystore_pass of this TAKServerCAConfig.
        :type keystore_pass: str
        """

        self._keystore_pass = keystore_pass

    @property
    def validity_days(self) -> int:
        """Gets the validity_days of this TAKServerCAConfig.


        :return: The validity_days of this TAKServerCAConfig.
        :rtype: int
        """
        return self._validity_days

    @validity_days.setter
    def validity_days(self, validity_days: int):
        """Sets the validity_days of this TAKServerCAConfig.


        :param validity_days: The validity_days of this TAKServerCAConfig.
        :type validity_days: int
        """

        self._validity_days = validity_days

    @property
    def validity_not_before_offset_minutes(self) -> int:
        """Gets the validity_not_before_offset_minutes of this TAKServerCAConfig.


        :return: The validity_not_before_offset_minutes of this TAKServerCAConfig.
        :rtype: int
        """
        return self._validity_not_before_offset_minutes

    @validity_not_before_offset_minutes.setter
    def validity_not_before_offset_minutes(self, validity_not_before_offset_minutes: int):
        """Sets the validity_not_before_offset_minutes of this TAKServerCAConfig.


        :param validity_not_before_offset_minutes: The validity_not_before_offset_minutes of this TAKServerCAConfig.
        :type validity_not_before_offset_minutes: int
        """

        self._validity_not_before_offset_minutes = validity_not_before_offset_minutes

    @property
    def signature_alg(self) -> str:
        """Gets the signature_alg of this TAKServerCAConfig.


        :return: The signature_alg of this TAKServerCAConfig.
        :rtype: str
        """
        return self._signature_alg

    @signature_alg.setter
    def signature_alg(self, signature_alg: str):
        """Sets the signature_alg of this TAKServerCAConfig.


        :param signature_alg: The signature_alg of this TAKServerCAConfig.
        :type signature_alg: str
        """

        self._signature_alg = signature_alg

    @property
    def cakey(self) -> str:
        """Gets the cakey of this TAKServerCAConfig.


        :return: The cakey of this TAKServerCAConfig.
        :rtype: str
        """
        return self._cakey

    @cakey.setter
    def cakey(self, cakey: str):
        """Sets the cakey of this TAKServerCAConfig.


        :param cakey: The cakey of this TAKServerCAConfig.
        :type cakey: str
        """

        self._cakey = cakey

    @property
    def cacertificate(self) -> str:
        """Gets the cacertificate of this TAKServerCAConfig.


        :return: The cacertificate of this TAKServerCAConfig.
        :rtype: str
        """
        return self._cacertificate

    @cacertificate.setter
    def cacertificate(self, cacertificate: str):
        """Sets the cacertificate of this TAKServerCAConfig.


        :param cacertificate: The cacertificate of this TAKServerCAConfig.
        :type cacertificate: str
        """

        self._cacertificate = cacertificate
