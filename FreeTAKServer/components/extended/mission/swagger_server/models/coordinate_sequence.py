# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CoordinateSequence(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, measures: int=None, dimension: int=None):  # noqa: E501
        """CoordinateSequence - a model defined in Swagger

        :param measures: The measures of this CoordinateSequence.  # noqa: E501
        :type measures: int
        :param dimension: The dimension of this CoordinateSequence.  # noqa: E501
        :type dimension: int
        """
        self.swagger_types = {
            'measures': int,
            'dimension': int
        }

        self.attribute_map = {
            'measures': 'measures',
            'dimension': 'dimension'
        }
        self._measures = measures
        self._dimension = dimension

    @classmethod
    def from_dict(cls, dikt) -> 'CoordinateSequence':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CoordinateSequence of this CoordinateSequence.  # noqa: E501
        :rtype: CoordinateSequence
        """
        return util.deserialize_model(dikt, cls)

    @property
    def measures(self) -> int:
        """Gets the measures of this CoordinateSequence.


        :return: The measures of this CoordinateSequence.
        :rtype: int
        """
        return self._measures

    @measures.setter
    def measures(self, measures: int):
        """Sets the measures of this CoordinateSequence.


        :param measures: The measures of this CoordinateSequence.
        :type measures: int
        """

        self._measures = measures

    @property
    def dimension(self) -> int:
        """Gets the dimension of this CoordinateSequence.


        :return: The dimension of this CoordinateSequence.
        :rtype: int
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension: int):
        """Sets the dimension of this CoordinateSequence.


        :param dimension: The dimension of this CoordinateSequence.
        :type dimension: int
        """

        self._dimension = dimension
