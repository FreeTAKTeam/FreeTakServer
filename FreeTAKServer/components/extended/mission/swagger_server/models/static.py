# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.filter import Filter  # noqa: F401,E501
from swagger_server import util


class Static(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, filtergroup: List[str]=None, filter: Filter=None, name: str=None, protocol: str=None, address: str=None, port: int=None, xpath: str=None, federated: bool=None, iface: str=None):  # noqa: E501
        """Static - a model defined in Swagger

        :param filtergroup: The filtergroup of this Static.  # noqa: E501
        :type filtergroup: List[str]
        :param filter: The filter of this Static.  # noqa: E501
        :type filter: Filter
        :param name: The name of this Static.  # noqa: E501
        :type name: str
        :param protocol: The protocol of this Static.  # noqa: E501
        :type protocol: str
        :param address: The address of this Static.  # noqa: E501
        :type address: str
        :param port: The port of this Static.  # noqa: E501
        :type port: int
        :param xpath: The xpath of this Static.  # noqa: E501
        :type xpath: str
        :param federated: The federated of this Static.  # noqa: E501
        :type federated: bool
        :param iface: The iface of this Static.  # noqa: E501
        :type iface: str
        """
        self.swagger_types = {
            'filtergroup': List[str],
            'filter': Filter,
            'name': str,
            'protocol': str,
            'address': str,
            'port': int,
            'xpath': str,
            'federated': bool,
            'iface': str
        }

        self.attribute_map = {
            'filtergroup': 'filtergroup',
            'filter': 'filter',
            'name': 'name',
            'protocol': 'protocol',
            'address': 'address',
            'port': 'port',
            'xpath': 'xpath',
            'federated': 'federated',
            'iface': 'iface'
        }
        self._filtergroup = filtergroup
        self._filter = filter
        self._name = name
        self._protocol = protocol
        self._address = address
        self._port = port
        self._xpath = xpath
        self._federated = federated
        self._iface = iface

    @classmethod
    def from_dict(cls, dikt) -> 'Static':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Static of this Static.  # noqa: E501
        :rtype: Static
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filtergroup(self) -> List[str]:
        """Gets the filtergroup of this Static.


        :return: The filtergroup of this Static.
        :rtype: List[str]
        """
        return self._filtergroup

    @filtergroup.setter
    def filtergroup(self, filtergroup: List[str]):
        """Sets the filtergroup of this Static.


        :param filtergroup: The filtergroup of this Static.
        :type filtergroup: List[str]
        """

        self._filtergroup = filtergroup

    @property
    def filter(self) -> Filter:
        """Gets the filter of this Static.


        :return: The filter of this Static.
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter: Filter):
        """Sets the filter of this Static.


        :param filter: The filter of this Static.
        :type filter: Filter
        """

        self._filter = filter

    @property
    def name(self) -> str:
        """Gets the name of this Static.


        :return: The name of this Static.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Static.


        :param name: The name of this Static.
        :type name: str
        """

        self._name = name

    @property
    def protocol(self) -> str:
        """Gets the protocol of this Static.


        :return: The protocol of this Static.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this Static.


        :param protocol: The protocol of this Static.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def address(self) -> str:
        """Gets the address of this Static.


        :return: The address of this Static.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Static.


        :param address: The address of this Static.
        :type address: str
        """

        self._address = address

    @property
    def port(self) -> int:
        """Gets the port of this Static.


        :return: The port of this Static.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this Static.


        :param port: The port of this Static.
        :type port: int
        """

        self._port = port

    @property
    def xpath(self) -> str:
        """Gets the xpath of this Static.


        :return: The xpath of this Static.
        :rtype: str
        """
        return self._xpath

    @xpath.setter
    def xpath(self, xpath: str):
        """Sets the xpath of this Static.


        :param xpath: The xpath of this Static.
        :type xpath: str
        """

        self._xpath = xpath

    @property
    def federated(self) -> bool:
        """Gets the federated of this Static.


        :return: The federated of this Static.
        :rtype: bool
        """
        return self._federated

    @federated.setter
    def federated(self, federated: bool):
        """Sets the federated of this Static.


        :param federated: The federated of this Static.
        :type federated: bool
        """

        self._federated = federated

    @property
    def iface(self) -> str:
        """Gets the iface of this Static.


        :return: The iface of this Static.
        :rtype: str
        """
        return self._iface

    @iface.setter
    def iface(self, iface: str):
        """Sets the iface of this Static.


        :param iface: The iface of this Static.
        :type iface: str
        """

        self._iface = iface
