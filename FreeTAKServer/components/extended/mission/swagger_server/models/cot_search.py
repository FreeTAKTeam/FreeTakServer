# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CotSearch(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: str=None, id: str=None, message: str=None, bytes_sent: int=None, count: int=None, timestamp: datetime=None, active: bool=None, tag: int=None, status_timestamps: Dict[str, datetime]=None):  # noqa: E501
        """CotSearch - a model defined in Swagger

        :param status: The status of this CotSearch.  # noqa: E501
        :type status: str
        :param id: The id of this CotSearch.  # noqa: E501
        :type id: str
        :param message: The message of this CotSearch.  # noqa: E501
        :type message: str
        :param bytes_sent: The bytes_sent of this CotSearch.  # noqa: E501
        :type bytes_sent: int
        :param count: The count of this CotSearch.  # noqa: E501
        :type count: int
        :param timestamp: The timestamp of this CotSearch.  # noqa: E501
        :type timestamp: datetime
        :param active: The active of this CotSearch.  # noqa: E501
        :type active: bool
        :param tag: The tag of this CotSearch.  # noqa: E501
        :type tag: int
        :param status_timestamps: The status_timestamps of this CotSearch.  # noqa: E501
        :type status_timestamps: Dict[str, datetime]
        """
        self.swagger_types = {
            'status': str,
            'id': str,
            'message': str,
            'bytes_sent': int,
            'count': int,
            'timestamp': datetime,
            'active': bool,
            'tag': int,
            'status_timestamps': Dict[str, datetime]
        }

        self.attribute_map = {
            'status': 'status',
            'id': 'id',
            'message': 'message',
            'bytes_sent': 'bytesSent',
            'count': 'count',
            'timestamp': 'timestamp',
            'active': 'active',
            'tag': 'tag',
            'status_timestamps': 'statusTimestamps'
        }
        self._status = status
        self._id = id
        self._message = message
        self._bytes_sent = bytes_sent
        self._count = count
        self._timestamp = timestamp
        self._active = active
        self._tag = tag
        self._status_timestamps = status_timestamps

    @classmethod
    def from_dict(cls, dikt) -> 'CotSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CotSearch of this CotSearch.  # noqa: E501
        :rtype: CotSearch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this CotSearch.


        :return: The status of this CotSearch.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this CotSearch.


        :param status: The status of this CotSearch.
        :type status: str
        """
        allowed_values = ["NEW", "SUBMITTED", "PROCESSING", "SENDING", "REPLAYING", "DONE", "ERROR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def id(self) -> str:
        """Gets the id of this CotSearch.


        :return: The id of this CotSearch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CotSearch.


        :param id: The id of this CotSearch.
        :type id: str
        """

        self._id = id

    @property
    def message(self) -> str:
        """Gets the message of this CotSearch.


        :return: The message of this CotSearch.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this CotSearch.


        :param message: The message of this CotSearch.
        :type message: str
        """

        self._message = message

    @property
    def bytes_sent(self) -> int:
        """Gets the bytes_sent of this CotSearch.


        :return: The bytes_sent of this CotSearch.
        :rtype: int
        """
        return self._bytes_sent

    @bytes_sent.setter
    def bytes_sent(self, bytes_sent: int):
        """Sets the bytes_sent of this CotSearch.


        :param bytes_sent: The bytes_sent of this CotSearch.
        :type bytes_sent: int
        """

        self._bytes_sent = bytes_sent

    @property
    def count(self) -> int:
        """Gets the count of this CotSearch.


        :return: The count of this CotSearch.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this CotSearch.


        :param count: The count of this CotSearch.
        :type count: int
        """

        self._count = count

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this CotSearch.


        :return: The timestamp of this CotSearch.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this CotSearch.


        :param timestamp: The timestamp of this CotSearch.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def active(self) -> bool:
        """Gets the active of this CotSearch.


        :return: The active of this CotSearch.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this CotSearch.


        :param active: The active of this CotSearch.
        :type active: bool
        """

        self._active = active

    @property
    def tag(self) -> int:
        """Gets the tag of this CotSearch.


        :return: The tag of this CotSearch.
        :rtype: int
        """
        return self._tag

    @tag.setter
    def tag(self, tag: int):
        """Sets the tag of this CotSearch.


        :param tag: The tag of this CotSearch.
        :type tag: int
        """

        self._tag = tag

    @property
    def status_timestamps(self) -> Dict[str, datetime]:
        """Gets the status_timestamps of this CotSearch.


        :return: The status_timestamps of this CotSearch.
        :rtype: Dict[str, datetime]
        """
        return self._status_timestamps

    @status_timestamps.setter
    def status_timestamps(self, status_timestamps: Dict[str, datetime]):
        """Sets the status_timestamps of this CotSearch.


        :param status_timestamps: The status_timestamps of this CotSearch.
        :type status_timestamps: Dict[str, datetime]
        """

        self._status_timestamps = status_timestamps
