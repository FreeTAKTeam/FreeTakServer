# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MapLayer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, min_zoom: int=None, max_zoom: int=None, north: float=None, south: float=None, east: float=None, west: float=None, uid: str=None, creator_uid: str=None, name: str=None, description: str=None, type: str=None, url: str=None, tile_type: str=None, server_parts: str=None, background_color: str=None, tile_update: str=None, additional_parameters: str=None, coordinate_system: str=None, version: str=None, layers: str=None, opacity: int=None, create_time: datetime=None, modified_time: datetime=None, default_layer: bool=None, enabled: bool=None, ignore_errors: bool=None, invert_y_coordinate: bool=None):  # noqa: E501
        """MapLayer - a model defined in Swagger

        :param min_zoom: The min_zoom of this MapLayer.  # noqa: E501
        :type min_zoom: int
        :param max_zoom: The max_zoom of this MapLayer.  # noqa: E501
        :type max_zoom: int
        :param north: The north of this MapLayer.  # noqa: E501
        :type north: float
        :param south: The south of this MapLayer.  # noqa: E501
        :type south: float
        :param east: The east of this MapLayer.  # noqa: E501
        :type east: float
        :param west: The west of this MapLayer.  # noqa: E501
        :type west: float
        :param uid: The uid of this MapLayer.  # noqa: E501
        :type uid: str
        :param creator_uid: The creator_uid of this MapLayer.  # noqa: E501
        :type creator_uid: str
        :param name: The name of this MapLayer.  # noqa: E501
        :type name: str
        :param description: The description of this MapLayer.  # noqa: E501
        :type description: str
        :param type: The type of this MapLayer.  # noqa: E501
        :type type: str
        :param url: The url of this MapLayer.  # noqa: E501
        :type url: str
        :param tile_type: The tile_type of this MapLayer.  # noqa: E501
        :type tile_type: str
        :param server_parts: The server_parts of this MapLayer.  # noqa: E501
        :type server_parts: str
        :param background_color: The background_color of this MapLayer.  # noqa: E501
        :type background_color: str
        :param tile_update: The tile_update of this MapLayer.  # noqa: E501
        :type tile_update: str
        :param additional_parameters: The additional_parameters of this MapLayer.  # noqa: E501
        :type additional_parameters: str
        :param coordinate_system: The coordinate_system of this MapLayer.  # noqa: E501
        :type coordinate_system: str
        :param version: The version of this MapLayer.  # noqa: E501
        :type version: str
        :param layers: The layers of this MapLayer.  # noqa: E501
        :type layers: str
        :param opacity: The opacity of this MapLayer.  # noqa: E501
        :type opacity: int
        :param create_time: The create_time of this MapLayer.  # noqa: E501
        :type create_time: datetime
        :param modified_time: The modified_time of this MapLayer.  # noqa: E501
        :type modified_time: datetime
        :param default_layer: The default_layer of this MapLayer.  # noqa: E501
        :type default_layer: bool
        :param enabled: The enabled of this MapLayer.  # noqa: E501
        :type enabled: bool
        :param ignore_errors: The ignore_errors of this MapLayer.  # noqa: E501
        :type ignore_errors: bool
        :param invert_y_coordinate: The invert_y_coordinate of this MapLayer.  # noqa: E501
        :type invert_y_coordinate: bool
        """
        self.swagger_types = {
            'min_zoom': int,
            'max_zoom': int,
            'north': float,
            'south': float,
            'east': float,
            'west': float,
            'uid': str,
            'creator_uid': str,
            'name': str,
            'description': str,
            'type': str,
            'url': str,
            'tile_type': str,
            'server_parts': str,
            'background_color': str,
            'tile_update': str,
            'additional_parameters': str,
            'coordinate_system': str,
            'version': str,
            'layers': str,
            'opacity': int,
            'create_time': datetime,
            'modified_time': datetime,
            'default_layer': bool,
            'enabled': bool,
            'ignore_errors': bool,
            'invert_y_coordinate': bool
        }

        self.attribute_map = {
            'min_zoom': 'minZoom',
            'max_zoom': 'maxZoom',
            'north': 'north',
            'south': 'south',
            'east': 'east',
            'west': 'west',
            'uid': 'uid',
            'creator_uid': 'creatorUid',
            'name': 'name',
            'description': 'description',
            'type': 'type',
            'url': 'url',
            'tile_type': 'tileType',
            'server_parts': 'serverParts',
            'background_color': 'backgroundColor',
            'tile_update': 'tileUpdate',
            'additional_parameters': 'additionalParameters',
            'coordinate_system': 'coordinateSystem',
            'version': 'version',
            'layers': 'layers',
            'opacity': 'opacity',
            'create_time': 'createTime',
            'modified_time': 'modifiedTime',
            'default_layer': 'defaultLayer',
            'enabled': 'enabled',
            'ignore_errors': 'ignoreErrors',
            'invert_y_coordinate': 'invertYCoordinate'
        }
        self._min_zoom = min_zoom
        self._max_zoom = max_zoom
        self._north = north
        self._south = south
        self._east = east
        self._west = west
        self._uid = uid
        self._creator_uid = creator_uid
        self._name = name
        self._description = description
        self._type = type
        self._url = url
        self._tile_type = tile_type
        self._server_parts = server_parts
        self._background_color = background_color
        self._tile_update = tile_update
        self._additional_parameters = additional_parameters
        self._coordinate_system = coordinate_system
        self._version = version
        self._layers = layers
        self._opacity = opacity
        self._create_time = create_time
        self._modified_time = modified_time
        self._default_layer = default_layer
        self._enabled = enabled
        self._ignore_errors = ignore_errors
        self._invert_y_coordinate = invert_y_coordinate

    @classmethod
    def from_dict(cls, dikt) -> 'MapLayer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MapLayer of this MapLayer.  # noqa: E501
        :rtype: MapLayer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_zoom(self) -> int:
        """Gets the min_zoom of this MapLayer.


        :return: The min_zoom of this MapLayer.
        :rtype: int
        """
        return self._min_zoom

    @min_zoom.setter
    def min_zoom(self, min_zoom: int):
        """Sets the min_zoom of this MapLayer.


        :param min_zoom: The min_zoom of this MapLayer.
        :type min_zoom: int
        """

        self._min_zoom = min_zoom

    @property
    def max_zoom(self) -> int:
        """Gets the max_zoom of this MapLayer.


        :return: The max_zoom of this MapLayer.
        :rtype: int
        """
        return self._max_zoom

    @max_zoom.setter
    def max_zoom(self, max_zoom: int):
        """Sets the max_zoom of this MapLayer.


        :param max_zoom: The max_zoom of this MapLayer.
        :type max_zoom: int
        """

        self._max_zoom = max_zoom

    @property
    def north(self) -> float:
        """Gets the north of this MapLayer.


        :return: The north of this MapLayer.
        :rtype: float
        """
        return self._north

    @north.setter
    def north(self, north: float):
        """Sets the north of this MapLayer.


        :param north: The north of this MapLayer.
        :type north: float
        """

        self._north = north

    @property
    def south(self) -> float:
        """Gets the south of this MapLayer.


        :return: The south of this MapLayer.
        :rtype: float
        """
        return self._south

    @south.setter
    def south(self, south: float):
        """Sets the south of this MapLayer.


        :param south: The south of this MapLayer.
        :type south: float
        """

        self._south = south

    @property
    def east(self) -> float:
        """Gets the east of this MapLayer.


        :return: The east of this MapLayer.
        :rtype: float
        """
        return self._east

    @east.setter
    def east(self, east: float):
        """Sets the east of this MapLayer.


        :param east: The east of this MapLayer.
        :type east: float
        """

        self._east = east

    @property
    def west(self) -> float:
        """Gets the west of this MapLayer.


        :return: The west of this MapLayer.
        :rtype: float
        """
        return self._west

    @west.setter
    def west(self, west: float):
        """Sets the west of this MapLayer.


        :param west: The west of this MapLayer.
        :type west: float
        """

        self._west = west

    @property
    def uid(self) -> str:
        """Gets the uid of this MapLayer.


        :return: The uid of this MapLayer.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this MapLayer.


        :param uid: The uid of this MapLayer.
        :type uid: str
        """

        self._uid = uid

    @property
    def creator_uid(self) -> str:
        """Gets the creator_uid of this MapLayer.


        :return: The creator_uid of this MapLayer.
        :rtype: str
        """
        return self._creator_uid

    @creator_uid.setter
    def creator_uid(self, creator_uid: str):
        """Sets the creator_uid of this MapLayer.


        :param creator_uid: The creator_uid of this MapLayer.
        :type creator_uid: str
        """

        self._creator_uid = creator_uid

    @property
    def name(self) -> str:
        """Gets the name of this MapLayer.


        :return: The name of this MapLayer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MapLayer.


        :param name: The name of this MapLayer.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this MapLayer.


        :return: The description of this MapLayer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this MapLayer.


        :param description: The description of this MapLayer.
        :type description: str
        """

        self._description = description

    @property
    def type(self) -> str:
        """Gets the type of this MapLayer.


        :return: The type of this MapLayer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this MapLayer.


        :param type: The type of this MapLayer.
        :type type: str
        """

        self._type = type

    @property
    def url(self) -> str:
        """Gets the url of this MapLayer.


        :return: The url of this MapLayer.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this MapLayer.


        :param url: The url of this MapLayer.
        :type url: str
        """

        self._url = url

    @property
    def tile_type(self) -> str:
        """Gets the tile_type of this MapLayer.


        :return: The tile_type of this MapLayer.
        :rtype: str
        """
        return self._tile_type

    @tile_type.setter
    def tile_type(self, tile_type: str):
        """Sets the tile_type of this MapLayer.


        :param tile_type: The tile_type of this MapLayer.
        :type tile_type: str
        """

        self._tile_type = tile_type

    @property
    def server_parts(self) -> str:
        """Gets the server_parts of this MapLayer.


        :return: The server_parts of this MapLayer.
        :rtype: str
        """
        return self._server_parts

    @server_parts.setter
    def server_parts(self, server_parts: str):
        """Sets the server_parts of this MapLayer.


        :param server_parts: The server_parts of this MapLayer.
        :type server_parts: str
        """

        self._server_parts = server_parts

    @property
    def background_color(self) -> str:
        """Gets the background_color of this MapLayer.


        :return: The background_color of this MapLayer.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color: str):
        """Sets the background_color of this MapLayer.


        :param background_color: The background_color of this MapLayer.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def tile_update(self) -> str:
        """Gets the tile_update of this MapLayer.


        :return: The tile_update of this MapLayer.
        :rtype: str
        """
        return self._tile_update

    @tile_update.setter
    def tile_update(self, tile_update: str):
        """Sets the tile_update of this MapLayer.


        :param tile_update: The tile_update of this MapLayer.
        :type tile_update: str
        """

        self._tile_update = tile_update

    @property
    def additional_parameters(self) -> str:
        """Gets the additional_parameters of this MapLayer.


        :return: The additional_parameters of this MapLayer.
        :rtype: str
        """
        return self._additional_parameters

    @additional_parameters.setter
    def additional_parameters(self, additional_parameters: str):
        """Sets the additional_parameters of this MapLayer.


        :param additional_parameters: The additional_parameters of this MapLayer.
        :type additional_parameters: str
        """

        self._additional_parameters = additional_parameters

    @property
    def coordinate_system(self) -> str:
        """Gets the coordinate_system of this MapLayer.


        :return: The coordinate_system of this MapLayer.
        :rtype: str
        """
        return self._coordinate_system

    @coordinate_system.setter
    def coordinate_system(self, coordinate_system: str):
        """Sets the coordinate_system of this MapLayer.


        :param coordinate_system: The coordinate_system of this MapLayer.
        :type coordinate_system: str
        """

        self._coordinate_system = coordinate_system

    @property
    def version(self) -> str:
        """Gets the version of this MapLayer.


        :return: The version of this MapLayer.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this MapLayer.


        :param version: The version of this MapLayer.
        :type version: str
        """

        self._version = version

    @property
    def layers(self) -> str:
        """Gets the layers of this MapLayer.


        :return: The layers of this MapLayer.
        :rtype: str
        """
        return self._layers

    @layers.setter
    def layers(self, layers: str):
        """Sets the layers of this MapLayer.


        :param layers: The layers of this MapLayer.
        :type layers: str
        """

        self._layers = layers

    @property
    def opacity(self) -> int:
        """Gets the opacity of this MapLayer.


        :return: The opacity of this MapLayer.
        :rtype: int
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity: int):
        """Sets the opacity of this MapLayer.


        :param opacity: The opacity of this MapLayer.
        :type opacity: int
        """

        self._opacity = opacity

    @property
    def create_time(self) -> datetime:
        """Gets the create_time of this MapLayer.


        :return: The create_time of this MapLayer.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time: datetime):
        """Sets the create_time of this MapLayer.


        :param create_time: The create_time of this MapLayer.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def modified_time(self) -> datetime:
        """Gets the modified_time of this MapLayer.


        :return: The modified_time of this MapLayer.
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time: datetime):
        """Sets the modified_time of this MapLayer.


        :param modified_time: The modified_time of this MapLayer.
        :type modified_time: datetime
        """

        self._modified_time = modified_time

    @property
    def default_layer(self) -> bool:
        """Gets the default_layer of this MapLayer.


        :return: The default_layer of this MapLayer.
        :rtype: bool
        """
        return self._default_layer

    @default_layer.setter
    def default_layer(self, default_layer: bool):
        """Sets the default_layer of this MapLayer.


        :param default_layer: The default_layer of this MapLayer.
        :type default_layer: bool
        """

        self._default_layer = default_layer

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this MapLayer.


        :return: The enabled of this MapLayer.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this MapLayer.


        :param enabled: The enabled of this MapLayer.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def ignore_errors(self) -> bool:
        """Gets the ignore_errors of this MapLayer.


        :return: The ignore_errors of this MapLayer.
        :rtype: bool
        """
        return self._ignore_errors

    @ignore_errors.setter
    def ignore_errors(self, ignore_errors: bool):
        """Sets the ignore_errors of this MapLayer.


        :param ignore_errors: The ignore_errors of this MapLayer.
        :type ignore_errors: bool
        """

        self._ignore_errors = ignore_errors

    @property
    def invert_y_coordinate(self) -> bool:
        """Gets the invert_y_coordinate of this MapLayer.


        :return: The invert_y_coordinate of this MapLayer.
        :rtype: bool
        """
        return self._invert_y_coordinate

    @invert_y_coordinate.setter
    def invert_y_coordinate(self, invert_y_coordinate: bool):
        """Sets the invert_y_coordinate of this MapLayer.


        :param invert_y_coordinate: The invert_y_coordinate of this MapLayer.
        :type invert_y_coordinate: bool
        """

        self._invert_y_coordinate = invert_y_coordinate
