# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Envelope(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, null: bool=None, diameter: float=None, width: float=None, height: float=None, max_x: float=None, max_y: float=None, area: float=None, min_x: float=None, min_y: float=None):  # noqa: E501
        """Envelope - a model defined in Swagger

        :param null: The null of this Envelope.  # noqa: E501
        :type null: bool
        :param diameter: The diameter of this Envelope.  # noqa: E501
        :type diameter: float
        :param width: The width of this Envelope.  # noqa: E501
        :type width: float
        :param height: The height of this Envelope.  # noqa: E501
        :type height: float
        :param max_x: The max_x of this Envelope.  # noqa: E501
        :type max_x: float
        :param max_y: The max_y of this Envelope.  # noqa: E501
        :type max_y: float
        :param area: The area of this Envelope.  # noqa: E501
        :type area: float
        :param min_x: The min_x of this Envelope.  # noqa: E501
        :type min_x: float
        :param min_y: The min_y of this Envelope.  # noqa: E501
        :type min_y: float
        """
        self.swagger_types = {
            'null': bool,
            'diameter': float,
            'width': float,
            'height': float,
            'max_x': float,
            'max_y': float,
            'area': float,
            'min_x': float,
            'min_y': float
        }

        self.attribute_map = {
            'null': 'null',
            'diameter': 'diameter',
            'width': 'width',
            'height': 'height',
            'max_x': 'maxX',
            'max_y': 'maxY',
            'area': 'area',
            'min_x': 'minX',
            'min_y': 'minY'
        }
        self._null = null
        self._diameter = diameter
        self._width = width
        self._height = height
        self._max_x = max_x
        self._max_y = max_y
        self._area = area
        self._min_x = min_x
        self._min_y = min_y

    @classmethod
    def from_dict(cls, dikt) -> 'Envelope':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Envelope of this Envelope.  # noqa: E501
        :rtype: Envelope
        """
        return util.deserialize_model(dikt, cls)

    @property
    def null(self) -> bool:
        """Gets the null of this Envelope.


        :return: The null of this Envelope.
        :rtype: bool
        """
        return self._null

    @null.setter
    def null(self, null: bool):
        """Sets the null of this Envelope.


        :param null: The null of this Envelope.
        :type null: bool
        """

        self._null = null

    @property
    def diameter(self) -> float:
        """Gets the diameter of this Envelope.


        :return: The diameter of this Envelope.
        :rtype: float
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter: float):
        """Sets the diameter of this Envelope.


        :param diameter: The diameter of this Envelope.
        :type diameter: float
        """

        self._diameter = diameter

    @property
    def width(self) -> float:
        """Gets the width of this Envelope.


        :return: The width of this Envelope.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width: float):
        """Sets the width of this Envelope.


        :param width: The width of this Envelope.
        :type width: float
        """

        self._width = width

    @property
    def height(self) -> float:
        """Gets the height of this Envelope.


        :return: The height of this Envelope.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height: float):
        """Sets the height of this Envelope.


        :param height: The height of this Envelope.
        :type height: float
        """

        self._height = height

    @property
    def max_x(self) -> float:
        """Gets the max_x of this Envelope.


        :return: The max_x of this Envelope.
        :rtype: float
        """
        return self._max_x

    @max_x.setter
    def max_x(self, max_x: float):
        """Sets the max_x of this Envelope.


        :param max_x: The max_x of this Envelope.
        :type max_x: float
        """

        self._max_x = max_x

    @property
    def max_y(self) -> float:
        """Gets the max_y of this Envelope.


        :return: The max_y of this Envelope.
        :rtype: float
        """
        return self._max_y

    @max_y.setter
    def max_y(self, max_y: float):
        """Sets the max_y of this Envelope.


        :param max_y: The max_y of this Envelope.
        :type max_y: float
        """

        self._max_y = max_y

    @property
    def area(self) -> float:
        """Gets the area of this Envelope.


        :return: The area of this Envelope.
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area: float):
        """Sets the area of this Envelope.


        :param area: The area of this Envelope.
        :type area: float
        """

        self._area = area

    @property
    def min_x(self) -> float:
        """Gets the min_x of this Envelope.


        :return: The min_x of this Envelope.
        :rtype: float
        """
        return self._min_x

    @min_x.setter
    def min_x(self, min_x: float):
        """Sets the min_x of this Envelope.


        :param min_x: The min_x of this Envelope.
        :type min_x: float
        """

        self._min_x = min_x

    @property
    def min_y(self) -> float:
        """Gets the min_y of this Envelope.


        :return: The min_y of this Envelope.
        :rtype: float
        """
        return self._min_y

    @min_y.setter
    def min_y(self, min_y: float):
        """Sets the min_y of this Envelope.


        :param min_y: The min_y of this Envelope.
        :type min_y: float
        """

        self._min_y = min_y
