# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, connection_id: str=None, connection_type: str=None, address: str=None, created: datetime=None, authorities: List[str]=None, display_name: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param connection_id: The connection_id of this User.  # noqa: E501
        :type connection_id: str
        :param connection_type: The connection_type of this User.  # noqa: E501
        :type connection_type: str
        :param address: The address of this User.  # noqa: E501
        :type address: str
        :param created: The created of this User.  # noqa: E501
        :type created: datetime
        :param authorities: The authorities of this User.  # noqa: E501
        :type authorities: List[str]
        :param display_name: The display_name of this User.  # noqa: E501
        :type display_name: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'connection_id': str,
            'connection_type': str,
            'address': str,
            'created': datetime,
            'authorities': List[str],
            'display_name': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'connection_id': 'connectionId',
            'connection_type': 'connectionType',
            'address': 'address',
            'created': 'created',
            'authorities': 'authorities',
            'display_name': 'displayName'
        }
        self._id = id
        self._name = name
        self._connection_id = connection_id
        self._connection_type = connection_type
        self._address = address
        self._created = created
        self._authorities = authorities
        self._display_name = display_name

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def connection_id(self) -> str:
        """Gets the connection_id of this User.


        :return: The connection_id of this User.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id: str):
        """Sets the connection_id of this User.


        :param connection_id: The connection_id of this User.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def connection_type(self) -> str:
        """Gets the connection_type of this User.


        :return: The connection_type of this User.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type: str):
        """Sets the connection_type of this User.


        :param connection_type: The connection_type of this User.
        :type connection_type: str
        """
        allowed_values = ["WEB", "CORE", "WEBRMI", "FEDERATE"]  # noqa: E501
        if connection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_type` ({0}), must be one of {1}"
                .format(connection_type, allowed_values)
            )

        self._connection_type = connection_type

    @property
    def address(self) -> str:
        """Gets the address of this User.


        :return: The address of this User.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this User.


        :param address: The address of this User.
        :type address: str
        """

        self._address = address

    @property
    def created(self) -> datetime:
        """Gets the created of this User.


        :return: The created of this User.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this User.


        :param created: The created of this User.
        :type created: datetime
        """

        self._created = created

    @property
    def authorities(self) -> List[str]:
        """Gets the authorities of this User.


        :return: The authorities of this User.
        :rtype: List[str]
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities: List[str]):
        """Sets the authorities of this User.


        :param authorities: The authorities of this User.
        :type authorities: List[str]
        """

        self._authorities = authorities

    @property
    def display_name(self) -> str:
        """Gets the display_name of this User.


        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this User.


        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name
