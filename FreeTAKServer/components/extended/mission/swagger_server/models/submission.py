# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Submission(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ignore_stale_messages: bool=None, validate_xml: bool=None, drop_messsages_if_any_service_is_full: bool=None):  # noqa: E501
        """Submission - a model defined in Swagger

        :param ignore_stale_messages: The ignore_stale_messages of this Submission.  # noqa: E501
        :type ignore_stale_messages: bool
        :param validate_xml: The validate_xml of this Submission.  # noqa: E501
        :type validate_xml: bool
        :param drop_messsages_if_any_service_is_full: The drop_messsages_if_any_service_is_full of this Submission.  # noqa: E501
        :type drop_messsages_if_any_service_is_full: bool
        """
        self.swagger_types = {
            'ignore_stale_messages': bool,
            'validate_xml': bool,
            'drop_messsages_if_any_service_is_full': bool
        }

        self.attribute_map = {
            'ignore_stale_messages': 'ignoreStaleMessages',
            'validate_xml': 'validateXml',
            'drop_messsages_if_any_service_is_full': 'dropMesssagesIfAnyServiceIsFull'
        }
        self._ignore_stale_messages = ignore_stale_messages
        self._validate_xml = validate_xml
        self._drop_messsages_if_any_service_is_full = drop_messsages_if_any_service_is_full

    @classmethod
    def from_dict(cls, dikt) -> 'Submission':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Submission of this Submission.  # noqa: E501
        :rtype: Submission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_stale_messages(self) -> bool:
        """Gets the ignore_stale_messages of this Submission.


        :return: The ignore_stale_messages of this Submission.
        :rtype: bool
        """
        return self._ignore_stale_messages

    @ignore_stale_messages.setter
    def ignore_stale_messages(self, ignore_stale_messages: bool):
        """Sets the ignore_stale_messages of this Submission.


        :param ignore_stale_messages: The ignore_stale_messages of this Submission.
        :type ignore_stale_messages: bool
        """

        self._ignore_stale_messages = ignore_stale_messages

    @property
    def validate_xml(self) -> bool:
        """Gets the validate_xml of this Submission.


        :return: The validate_xml of this Submission.
        :rtype: bool
        """
        return self._validate_xml

    @validate_xml.setter
    def validate_xml(self, validate_xml: bool):
        """Sets the validate_xml of this Submission.


        :param validate_xml: The validate_xml of this Submission.
        :type validate_xml: bool
        """

        self._validate_xml = validate_xml

    @property
    def drop_messsages_if_any_service_is_full(self) -> bool:
        """Gets the drop_messsages_if_any_service_is_full of this Submission.


        :return: The drop_messsages_if_any_service_is_full of this Submission.
        :rtype: bool
        """
        return self._drop_messsages_if_any_service_is_full

    @drop_messsages_if_any_service_is_full.setter
    def drop_messsages_if_any_service_is_full(self, drop_messsages_if_any_service_is_full: bool):
        """Sets the drop_messsages_if_any_service_is_full of this Submission.


        :param drop_messsages_if_any_service_is_full: The drop_messsages_if_any_service_is_full of this Submission.
        :type drop_messsages_if_any_service_is_full: bool
        """

        self._drop_messsages_if_any_service_is_full = drop_messsages_if_any_service_is_full
