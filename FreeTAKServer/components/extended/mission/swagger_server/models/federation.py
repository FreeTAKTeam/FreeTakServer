# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.federate import Federate  # noqa: F401,E501
from swagger_server.models.federate_ca import FederateCA  # noqa: F401,E501
from swagger_server.models.federation_outgoing import FederationOutgoing  # noqa: F401,E501
from swagger_server.models.federation_server import FederationServer  # noqa: F401,E501
from swagger_server.models.file_filter import FileFilter  # noqa: F401,E501
from swagger_server.models.mission_disruption_tolerance import MissionDisruptionTolerance  # noqa: F401,E501
from swagger_server import util


class Federation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, federation_server: FederationServer=None, federation_outgoing: List[FederationOutgoing]=None, mission_disruption_tolerance: MissionDisruptionTolerance=None, federate: List[Federate]=None, file_filter: FileFilter=None, federate_ca: List[FederateCA]=None, allow_duplicate: bool=None, allow_federated_delete: bool=None, allow_mission_federation: bool=None, allow_data_feed_federation: bool=None, enable_mission_federation_disruption_tolerance: bool=None, mission_federation_disruption_tolerance_recency_seconds: int=None, federate_only_public_missions: bool=None, enable_federation: bool=None, federated_group_mapping: bool=None, automatic_group_mapping: bool=None, enable_data_package_and_mission_file_filter: bool=None, ivoid_my_warranty_and_want_to_forward_federation_traffic: bool=None):  # noqa: E501
        """Federation - a model defined in Swagger

        :param federation_server: The federation_server of this Federation.  # noqa: E501
        :type federation_server: FederationServer
        :param federation_outgoing: The federation_outgoing of this Federation.  # noqa: E501
        :type federation_outgoing: List[FederationOutgoing]
        :param mission_disruption_tolerance: The mission_disruption_tolerance of this Federation.  # noqa: E501
        :type mission_disruption_tolerance: MissionDisruptionTolerance
        :param federate: The federate of this Federation.  # noqa: E501
        :type federate: List[Federate]
        :param file_filter: The file_filter of this Federation.  # noqa: E501
        :type file_filter: FileFilter
        :param federate_ca: The federate_ca of this Federation.  # noqa: E501
        :type federate_ca: List[FederateCA]
        :param allow_duplicate: The allow_duplicate of this Federation.  # noqa: E501
        :type allow_duplicate: bool
        :param allow_federated_delete: The allow_federated_delete of this Federation.  # noqa: E501
        :type allow_federated_delete: bool
        :param allow_mission_federation: The allow_mission_federation of this Federation.  # noqa: E501
        :type allow_mission_federation: bool
        :param allow_data_feed_federation: The allow_data_feed_federation of this Federation.  # noqa: E501
        :type allow_data_feed_federation: bool
        :param enable_mission_federation_disruption_tolerance: The enable_mission_federation_disruption_tolerance of this Federation.  # noqa: E501
        :type enable_mission_federation_disruption_tolerance: bool
        :param mission_federation_disruption_tolerance_recency_seconds: The mission_federation_disruption_tolerance_recency_seconds of this Federation.  # noqa: E501
        :type mission_federation_disruption_tolerance_recency_seconds: int
        :param federate_only_public_missions: The federate_only_public_missions of this Federation.  # noqa: E501
        :type federate_only_public_missions: bool
        :param enable_federation: The enable_federation of this Federation.  # noqa: E501
        :type enable_federation: bool
        :param federated_group_mapping: The federated_group_mapping of this Federation.  # noqa: E501
        :type federated_group_mapping: bool
        :param automatic_group_mapping: The automatic_group_mapping of this Federation.  # noqa: E501
        :type automatic_group_mapping: bool
        :param enable_data_package_and_mission_file_filter: The enable_data_package_and_mission_file_filter of this Federation.  # noqa: E501
        :type enable_data_package_and_mission_file_filter: bool
        :param ivoid_my_warranty_and_want_to_forward_federation_traffic: The ivoid_my_warranty_and_want_to_forward_federation_traffic of this Federation.  # noqa: E501
        :type ivoid_my_warranty_and_want_to_forward_federation_traffic: bool
        """
        self.swagger_types = {
            'federation_server': FederationServer,
            'federation_outgoing': List[FederationOutgoing],
            'mission_disruption_tolerance': MissionDisruptionTolerance,
            'federate': List[Federate],
            'file_filter': FileFilter,
            'federate_ca': List[FederateCA],
            'allow_duplicate': bool,
            'allow_federated_delete': bool,
            'allow_mission_federation': bool,
            'allow_data_feed_federation': bool,
            'enable_mission_federation_disruption_tolerance': bool,
            'mission_federation_disruption_tolerance_recency_seconds': int,
            'federate_only_public_missions': bool,
            'enable_federation': bool,
            'federated_group_mapping': bool,
            'automatic_group_mapping': bool,
            'enable_data_package_and_mission_file_filter': bool,
            'ivoid_my_warranty_and_want_to_forward_federation_traffic': bool
        }

        self.attribute_map = {
            'federation_server': 'federationServer',
            'federation_outgoing': 'federationOutgoing',
            'mission_disruption_tolerance': 'missionDisruptionTolerance',
            'federate': 'federate',
            'file_filter': 'fileFilter',
            'federate_ca': 'federateCA',
            'allow_duplicate': 'allowDuplicate',
            'allow_federated_delete': 'allowFederatedDelete',
            'allow_mission_federation': 'allowMissionFederation',
            'allow_data_feed_federation': 'allowDataFeedFederation',
            'enable_mission_federation_disruption_tolerance': 'enableMissionFederationDisruptionTolerance',
            'mission_federation_disruption_tolerance_recency_seconds': 'missionFederationDisruptionToleranceRecencySeconds',
            'federate_only_public_missions': 'federateOnlyPublicMissions',
            'enable_federation': 'enableFederation',
            'federated_group_mapping': 'federatedGroupMapping',
            'automatic_group_mapping': 'automaticGroupMapping',
            'enable_data_package_and_mission_file_filter': 'enableDataPackageAndMissionFileFilter',
            'ivoid_my_warranty_and_want_to_forward_federation_traffic': 'ivoidMyWarrantyAndWantToForwardFederationTraffic'
        }
        self._federation_server = federation_server
        self._federation_outgoing = federation_outgoing
        self._mission_disruption_tolerance = mission_disruption_tolerance
        self._federate = federate
        self._file_filter = file_filter
        self._federate_ca = federate_ca
        self._allow_duplicate = allow_duplicate
        self._allow_federated_delete = allow_federated_delete
        self._allow_mission_federation = allow_mission_federation
        self._allow_data_feed_federation = allow_data_feed_federation
        self._enable_mission_federation_disruption_tolerance = enable_mission_federation_disruption_tolerance
        self._mission_federation_disruption_tolerance_recency_seconds = mission_federation_disruption_tolerance_recency_seconds
        self._federate_only_public_missions = federate_only_public_missions
        self._enable_federation = enable_federation
        self._federated_group_mapping = federated_group_mapping
        self._automatic_group_mapping = automatic_group_mapping
        self._enable_data_package_and_mission_file_filter = enable_data_package_and_mission_file_filter
        self._ivoid_my_warranty_and_want_to_forward_federation_traffic = ivoid_my_warranty_and_want_to_forward_federation_traffic

    @classmethod
    def from_dict(cls, dikt) -> 'Federation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Federation of this Federation.  # noqa: E501
        :rtype: Federation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def federation_server(self) -> FederationServer:
        """Gets the federation_server of this Federation.


        :return: The federation_server of this Federation.
        :rtype: FederationServer
        """
        return self._federation_server

    @federation_server.setter
    def federation_server(self, federation_server: FederationServer):
        """Sets the federation_server of this Federation.


        :param federation_server: The federation_server of this Federation.
        :type federation_server: FederationServer
        """

        self._federation_server = federation_server

    @property
    def federation_outgoing(self) -> List[FederationOutgoing]:
        """Gets the federation_outgoing of this Federation.


        :return: The federation_outgoing of this Federation.
        :rtype: List[FederationOutgoing]
        """
        return self._federation_outgoing

    @federation_outgoing.setter
    def federation_outgoing(self, federation_outgoing: List[FederationOutgoing]):
        """Sets the federation_outgoing of this Federation.


        :param federation_outgoing: The federation_outgoing of this Federation.
        :type federation_outgoing: List[FederationOutgoing]
        """

        self._federation_outgoing = federation_outgoing

    @property
    def mission_disruption_tolerance(self) -> MissionDisruptionTolerance:
        """Gets the mission_disruption_tolerance of this Federation.


        :return: The mission_disruption_tolerance of this Federation.
        :rtype: MissionDisruptionTolerance
        """
        return self._mission_disruption_tolerance

    @mission_disruption_tolerance.setter
    def mission_disruption_tolerance(self, mission_disruption_tolerance: MissionDisruptionTolerance):
        """Sets the mission_disruption_tolerance of this Federation.


        :param mission_disruption_tolerance: The mission_disruption_tolerance of this Federation.
        :type mission_disruption_tolerance: MissionDisruptionTolerance
        """

        self._mission_disruption_tolerance = mission_disruption_tolerance

    @property
    def federate(self) -> List[Federate]:
        """Gets the federate of this Federation.


        :return: The federate of this Federation.
        :rtype: List[Federate]
        """
        return self._federate

    @federate.setter
    def federate(self, federate: List[Federate]):
        """Sets the federate of this Federation.


        :param federate: The federate of this Federation.
        :type federate: List[Federate]
        """

        self._federate = federate

    @property
    def file_filter(self) -> FileFilter:
        """Gets the file_filter of this Federation.


        :return: The file_filter of this Federation.
        :rtype: FileFilter
        """
        return self._file_filter

    @file_filter.setter
    def file_filter(self, file_filter: FileFilter):
        """Sets the file_filter of this Federation.


        :param file_filter: The file_filter of this Federation.
        :type file_filter: FileFilter
        """
        if file_filter is None:
            raise ValueError("Invalid value for `file_filter`, must not be `None`")  # noqa: E501

        self._file_filter = file_filter

    @property
    def federate_ca(self) -> List[FederateCA]:
        """Gets the federate_ca of this Federation.


        :return: The federate_ca of this Federation.
        :rtype: List[FederateCA]
        """
        return self._federate_ca

    @federate_ca.setter
    def federate_ca(self, federate_ca: List[FederateCA]):
        """Sets the federate_ca of this Federation.


        :param federate_ca: The federate_ca of this Federation.
        :type federate_ca: List[FederateCA]
        """

        self._federate_ca = federate_ca

    @property
    def allow_duplicate(self) -> bool:
        """Gets the allow_duplicate of this Federation.


        :return: The allow_duplicate of this Federation.
        :rtype: bool
        """
        return self._allow_duplicate

    @allow_duplicate.setter
    def allow_duplicate(self, allow_duplicate: bool):
        """Sets the allow_duplicate of this Federation.


        :param allow_duplicate: The allow_duplicate of this Federation.
        :type allow_duplicate: bool
        """

        self._allow_duplicate = allow_duplicate

    @property
    def allow_federated_delete(self) -> bool:
        """Gets the allow_federated_delete of this Federation.


        :return: The allow_federated_delete of this Federation.
        :rtype: bool
        """
        return self._allow_federated_delete

    @allow_federated_delete.setter
    def allow_federated_delete(self, allow_federated_delete: bool):
        """Sets the allow_federated_delete of this Federation.


        :param allow_federated_delete: The allow_federated_delete of this Federation.
        :type allow_federated_delete: bool
        """

        self._allow_federated_delete = allow_federated_delete

    @property
    def allow_mission_federation(self) -> bool:
        """Gets the allow_mission_federation of this Federation.


        :return: The allow_mission_federation of this Federation.
        :rtype: bool
        """
        return self._allow_mission_federation

    @allow_mission_federation.setter
    def allow_mission_federation(self, allow_mission_federation: bool):
        """Sets the allow_mission_federation of this Federation.


        :param allow_mission_federation: The allow_mission_federation of this Federation.
        :type allow_mission_federation: bool
        """

        self._allow_mission_federation = allow_mission_federation

    @property
    def allow_data_feed_federation(self) -> bool:
        """Gets the allow_data_feed_federation of this Federation.


        :return: The allow_data_feed_federation of this Federation.
        :rtype: bool
        """
        return self._allow_data_feed_federation

    @allow_data_feed_federation.setter
    def allow_data_feed_federation(self, allow_data_feed_federation: bool):
        """Sets the allow_data_feed_federation of this Federation.


        :param allow_data_feed_federation: The allow_data_feed_federation of this Federation.
        :type allow_data_feed_federation: bool
        """

        self._allow_data_feed_federation = allow_data_feed_federation

    @property
    def enable_mission_federation_disruption_tolerance(self) -> bool:
        """Gets the enable_mission_federation_disruption_tolerance of this Federation.


        :return: The enable_mission_federation_disruption_tolerance of this Federation.
        :rtype: bool
        """
        return self._enable_mission_federation_disruption_tolerance

    @enable_mission_federation_disruption_tolerance.setter
    def enable_mission_federation_disruption_tolerance(self, enable_mission_federation_disruption_tolerance: bool):
        """Sets the enable_mission_federation_disruption_tolerance of this Federation.


        :param enable_mission_federation_disruption_tolerance: The enable_mission_federation_disruption_tolerance of this Federation.
        :type enable_mission_federation_disruption_tolerance: bool
        """

        self._enable_mission_federation_disruption_tolerance = enable_mission_federation_disruption_tolerance

    @property
    def mission_federation_disruption_tolerance_recency_seconds(self) -> int:
        """Gets the mission_federation_disruption_tolerance_recency_seconds of this Federation.


        :return: The mission_federation_disruption_tolerance_recency_seconds of this Federation.
        :rtype: int
        """
        return self._mission_federation_disruption_tolerance_recency_seconds

    @mission_federation_disruption_tolerance_recency_seconds.setter
    def mission_federation_disruption_tolerance_recency_seconds(self, mission_federation_disruption_tolerance_recency_seconds: int):
        """Sets the mission_federation_disruption_tolerance_recency_seconds of this Federation.


        :param mission_federation_disruption_tolerance_recency_seconds: The mission_federation_disruption_tolerance_recency_seconds of this Federation.
        :type mission_federation_disruption_tolerance_recency_seconds: int
        """

        self._mission_federation_disruption_tolerance_recency_seconds = mission_federation_disruption_tolerance_recency_seconds

    @property
    def federate_only_public_missions(self) -> bool:
        """Gets the federate_only_public_missions of this Federation.


        :return: The federate_only_public_missions of this Federation.
        :rtype: bool
        """
        return self._federate_only_public_missions

    @federate_only_public_missions.setter
    def federate_only_public_missions(self, federate_only_public_missions: bool):
        """Sets the federate_only_public_missions of this Federation.


        :param federate_only_public_missions: The federate_only_public_missions of this Federation.
        :type federate_only_public_missions: bool
        """

        self._federate_only_public_missions = federate_only_public_missions

    @property
    def enable_federation(self) -> bool:
        """Gets the enable_federation of this Federation.


        :return: The enable_federation of this Federation.
        :rtype: bool
        """
        return self._enable_federation

    @enable_federation.setter
    def enable_federation(self, enable_federation: bool):
        """Sets the enable_federation of this Federation.


        :param enable_federation: The enable_federation of this Federation.
        :type enable_federation: bool
        """

        self._enable_federation = enable_federation

    @property
    def federated_group_mapping(self) -> bool:
        """Gets the federated_group_mapping of this Federation.


        :return: The federated_group_mapping of this Federation.
        :rtype: bool
        """
        return self._federated_group_mapping

    @federated_group_mapping.setter
    def federated_group_mapping(self, federated_group_mapping: bool):
        """Sets the federated_group_mapping of this Federation.


        :param federated_group_mapping: The federated_group_mapping of this Federation.
        :type federated_group_mapping: bool
        """

        self._federated_group_mapping = federated_group_mapping

    @property
    def automatic_group_mapping(self) -> bool:
        """Gets the automatic_group_mapping of this Federation.


        :return: The automatic_group_mapping of this Federation.
        :rtype: bool
        """
        return self._automatic_group_mapping

    @automatic_group_mapping.setter
    def automatic_group_mapping(self, automatic_group_mapping: bool):
        """Sets the automatic_group_mapping of this Federation.


        :param automatic_group_mapping: The automatic_group_mapping of this Federation.
        :type automatic_group_mapping: bool
        """

        self._automatic_group_mapping = automatic_group_mapping

    @property
    def enable_data_package_and_mission_file_filter(self) -> bool:
        """Gets the enable_data_package_and_mission_file_filter of this Federation.


        :return: The enable_data_package_and_mission_file_filter of this Federation.
        :rtype: bool
        """
        return self._enable_data_package_and_mission_file_filter

    @enable_data_package_and_mission_file_filter.setter
    def enable_data_package_and_mission_file_filter(self, enable_data_package_and_mission_file_filter: bool):
        """Sets the enable_data_package_and_mission_file_filter of this Federation.


        :param enable_data_package_and_mission_file_filter: The enable_data_package_and_mission_file_filter of this Federation.
        :type enable_data_package_and_mission_file_filter: bool
        """

        self._enable_data_package_and_mission_file_filter = enable_data_package_and_mission_file_filter

    @property
    def ivoid_my_warranty_and_want_to_forward_federation_traffic(self) -> bool:
        """Gets the ivoid_my_warranty_and_want_to_forward_federation_traffic of this Federation.


        :return: The ivoid_my_warranty_and_want_to_forward_federation_traffic of this Federation.
        :rtype: bool
        """
        return self._ivoid_my_warranty_and_want_to_forward_federation_traffic

    @ivoid_my_warranty_and_want_to_forward_federation_traffic.setter
    def ivoid_my_warranty_and_want_to_forward_federation_traffic(self, ivoid_my_warranty_and_want_to_forward_federation_traffic: bool):
        """Sets the ivoid_my_warranty_and_want_to_forward_federation_traffic of this Federation.


        :param ivoid_my_warranty_and_want_to_forward_federation_traffic: The ivoid_my_warranty_and_want_to_forward_federation_traffic of this Federation.
        :type ivoid_my_warranty_and_want_to_forward_federation_traffic: bool
        """

        self._ivoid_my_warranty_and_want_to_forward_federation_traffic = ivoid_my_warranty_and_want_to_forward_federation_traffic
