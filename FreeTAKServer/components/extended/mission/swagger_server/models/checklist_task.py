# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ChecklistTask(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, line_break: bool=None, bg_color: str=None, number: int=None, uid: str=None, value: List[str]=None, status: str=None, custom_status: str=None, complete_by: str=None, complete_dtg: str=None, notes: str=None, due_relative_time: str=None, due_dtg: str=None, line_break_text: str=None):  # noqa: E501
        """ChecklistTask - a model defined in Swagger

        :param line_break: The line_break of this ChecklistTask.  # noqa: E501
        :type line_break: bool
        :param bg_color: The bg_color of this ChecklistTask.  # noqa: E501
        :type bg_color: str
        :param number: The number of this ChecklistTask.  # noqa: E501
        :type number: int
        :param uid: The uid of this ChecklistTask.  # noqa: E501
        :type uid: str
        :param value: The value of this ChecklistTask.  # noqa: E501
        :type value: List[str]
        :param status: The status of this ChecklistTask.  # noqa: E501
        :type status: str
        :param custom_status: The custom_status of this ChecklistTask.  # noqa: E501
        :type custom_status: str
        :param complete_by: The complete_by of this ChecklistTask.  # noqa: E501
        :type complete_by: str
        :param complete_dtg: The complete_dtg of this ChecklistTask.  # noqa: E501
        :type complete_dtg: str
        :param notes: The notes of this ChecklistTask.  # noqa: E501
        :type notes: str
        :param due_relative_time: The due_relative_time of this ChecklistTask.  # noqa: E501
        :type due_relative_time: str
        :param due_dtg: The due_dtg of this ChecklistTask.  # noqa: E501
        :type due_dtg: str
        :param line_break_text: The line_break_text of this ChecklistTask.  # noqa: E501
        :type line_break_text: str
        """
        self.swagger_types = {
            'line_break': bool,
            'bg_color': str,
            'number': int,
            'uid': str,
            'value': List[str],
            'status': str,
            'custom_status': str,
            'complete_by': str,
            'complete_dtg': str,
            'notes': str,
            'due_relative_time': str,
            'due_dtg': str,
            'line_break_text': str
        }

        self.attribute_map = {
            'line_break': 'lineBreak',
            'bg_color': 'bgColor',
            'number': 'number',
            'uid': 'uid',
            'value': 'value',
            'status': 'status',
            'custom_status': 'customStatus',
            'complete_by': 'completeBy',
            'complete_dtg': 'completeDTG',
            'notes': 'notes',
            'due_relative_time': 'dueRelativeTime',
            'due_dtg': 'dueDTG',
            'line_break_text': 'lineBreakText'
        }
        self._line_break = line_break
        self._bg_color = bg_color
        self._number = number
        self._uid = uid
        self._value = value
        self._status = status
        self._custom_status = custom_status
        self._complete_by = complete_by
        self._complete_dtg = complete_dtg
        self._notes = notes
        self._due_relative_time = due_relative_time
        self._due_dtg = due_dtg
        self._line_break_text = line_break_text

    @classmethod
    def from_dict(cls, dikt) -> 'ChecklistTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChecklistTask of this ChecklistTask.  # noqa: E501
        :rtype: ChecklistTask
        """
        return util.deserialize_model(dikt, cls)

    @property
    def line_break(self) -> bool:
        """Gets the line_break of this ChecklistTask.


        :return: The line_break of this ChecklistTask.
        :rtype: bool
        """
        return self._line_break

    @line_break.setter
    def line_break(self, line_break: bool):
        """Sets the line_break of this ChecklistTask.


        :param line_break: The line_break of this ChecklistTask.
        :type line_break: bool
        """

        self._line_break = line_break

    @property
    def bg_color(self) -> str:
        """Gets the bg_color of this ChecklistTask.


        :return: The bg_color of this ChecklistTask.
        :rtype: str
        """
        return self._bg_color

    @bg_color.setter
    def bg_color(self, bg_color: str):
        """Sets the bg_color of this ChecklistTask.


        :param bg_color: The bg_color of this ChecklistTask.
        :type bg_color: str
        """
        if bg_color is None:
            raise ValueError("Invalid value for `bg_color`, must not be `None`")  # noqa: E501

        self._bg_color = bg_color

    @property
    def number(self) -> int:
        """Gets the number of this ChecklistTask.


        :return: The number of this ChecklistTask.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number: int):
        """Sets the number of this ChecklistTask.


        :param number: The number of this ChecklistTask.
        :type number: int
        """

        self._number = number

    @property
    def uid(self) -> str:
        """Gets the uid of this ChecklistTask.


        :return: The uid of this ChecklistTask.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this ChecklistTask.


        :param uid: The uid of this ChecklistTask.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def value(self) -> List[str]:
        """Gets the value of this ChecklistTask.


        :return: The value of this ChecklistTask.
        :rtype: List[str]
        """
        return self._value

    @value.setter
    def value(self, value: List[str]):
        """Sets the value of this ChecklistTask.


        :param value: The value of this ChecklistTask.
        :type value: List[str]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def status(self) -> str:
        """Gets the status of this ChecklistTask.


        :return: The status of this ChecklistTask.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ChecklistTask.


        :param status: The status of this ChecklistTask.
        :type status: str
        """
        allowed_values = ["PENDING", "COMPLETE", "COMPLETE_LATE", "LATE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def custom_status(self) -> str:
        """Gets the custom_status of this ChecklistTask.


        :return: The custom_status of this ChecklistTask.
        :rtype: str
        """
        return self._custom_status

    @custom_status.setter
    def custom_status(self, custom_status: str):
        """Sets the custom_status of this ChecklistTask.


        :param custom_status: The custom_status of this ChecklistTask.
        :type custom_status: str
        """

        self._custom_status = custom_status

    @property
    def complete_by(self) -> str:
        """Gets the complete_by of this ChecklistTask.


        :return: The complete_by of this ChecklistTask.
        :rtype: str
        """
        return self._complete_by

    @complete_by.setter
    def complete_by(self, complete_by: str):
        """Sets the complete_by of this ChecklistTask.


        :param complete_by: The complete_by of this ChecklistTask.
        :type complete_by: str
        """

        self._complete_by = complete_by

    @property
    def complete_dtg(self) -> str:
        """Gets the complete_dtg of this ChecklistTask.


        :return: The complete_dtg of this ChecklistTask.
        :rtype: str
        """
        return self._complete_dtg

    @complete_dtg.setter
    def complete_dtg(self, complete_dtg: str):
        """Sets the complete_dtg of this ChecklistTask.


        :param complete_dtg: The complete_dtg of this ChecklistTask.
        :type complete_dtg: str
        """

        self._complete_dtg = complete_dtg

    @property
    def notes(self) -> str:
        """Gets the notes of this ChecklistTask.


        :return: The notes of this ChecklistTask.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this ChecklistTask.


        :param notes: The notes of this ChecklistTask.
        :type notes: str
        """

        self._notes = notes

    @property
    def due_relative_time(self) -> str:
        """Gets the due_relative_time of this ChecklistTask.


        :return: The due_relative_time of this ChecklistTask.
        :rtype: str
        """
        return self._due_relative_time

    @due_relative_time.setter
    def due_relative_time(self, due_relative_time: str):
        """Sets the due_relative_time of this ChecklistTask.


        :param due_relative_time: The due_relative_time of this ChecklistTask.
        :type due_relative_time: str
        """

        self._due_relative_time = due_relative_time

    @property
    def due_dtg(self) -> str:
        """Gets the due_dtg of this ChecklistTask.


        :return: The due_dtg of this ChecklistTask.
        :rtype: str
        """
        return self._due_dtg

    @due_dtg.setter
    def due_dtg(self, due_dtg: str):
        """Sets the due_dtg of this ChecklistTask.


        :param due_dtg: The due_dtg of this ChecklistTask.
        :type due_dtg: str
        """

        self._due_dtg = due_dtg

    @property
    def line_break_text(self) -> str:
        """Gets the line_break_text of this ChecklistTask.


        :return: The line_break_text of this ChecklistTask.
        :rtype: str
        """
        return self._line_break_text

    @line_break_text.setter
    def line_break_text(self, line_break_text: str):
        """Sets the line_break_text of this ChecklistTask.


        :param line_break_text: The line_break_text of this ChecklistTask.
        :type line_break_text: str
        """

        self._line_break_text = line_break_text
