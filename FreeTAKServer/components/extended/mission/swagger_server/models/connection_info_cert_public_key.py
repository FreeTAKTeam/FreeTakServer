# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ConnectionInfoCertPublicKey(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, encoded: List[bytearray]=None, format: str=None, algorithm: str=None):  # noqa: E501
        """ConnectionInfoCertPublicKey - a model defined in Swagger

        :param encoded: The encoded of this ConnectionInfoCertPublicKey.  # noqa: E501
        :type encoded: List[bytearray]
        :param format: The format of this ConnectionInfoCertPublicKey.  # noqa: E501
        :type format: str
        :param algorithm: The algorithm of this ConnectionInfoCertPublicKey.  # noqa: E501
        :type algorithm: str
        """
        self.swagger_types = {
            'encoded': List[bytearray],
            'format': str,
            'algorithm': str
        }

        self.attribute_map = {
            'encoded': 'encoded',
            'format': 'format',
            'algorithm': 'algorithm'
        }
        self._encoded = encoded
        self._format = format
        self._algorithm = algorithm

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectionInfoCertPublicKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConnectionInfo_cert_publicKey of this ConnectionInfoCertPublicKey.  # noqa: E501
        :rtype: ConnectionInfoCertPublicKey
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoded(self) -> List[bytearray]:
        """Gets the encoded of this ConnectionInfoCertPublicKey.


        :return: The encoded of this ConnectionInfoCertPublicKey.
        :rtype: List[bytearray]
        """
        return self._encoded

    @encoded.setter
    def encoded(self, encoded: List[bytearray]):
        """Sets the encoded of this ConnectionInfoCertPublicKey.


        :param encoded: The encoded of this ConnectionInfoCertPublicKey.
        :type encoded: List[bytearray]
        """

        self._encoded = encoded

    @property
    def format(self) -> str:
        """Gets the format of this ConnectionInfoCertPublicKey.


        :return: The format of this ConnectionInfoCertPublicKey.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str):
        """Sets the format of this ConnectionInfoCertPublicKey.


        :param format: The format of this ConnectionInfoCertPublicKey.
        :type format: str
        """

        self._format = format

    @property
    def algorithm(self) -> str:
        """Gets the algorithm of this ConnectionInfoCertPublicKey.


        :return: The algorithm of this ConnectionInfoCertPublicKey.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm: str):
        """Sets the algorithm of this ConnectionInfoCertPublicKey.


        :param algorithm: The algorithm of this ConnectionInfoCertPublicKey.
        :type algorithm: str
        """

        self._algorithm = algorithm
