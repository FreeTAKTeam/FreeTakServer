# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.dos_limit_rule import DosLimitRule  # noqa: F401,E501
from swagger_server import util


class DosRateLimiter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, dos_limit_rule: List[DosLimitRule]=None, enabled: bool=None, interval_seconds: int=None):  # noqa: E501
        """DosRateLimiter - a model defined in Swagger

        :param dos_limit_rule: The dos_limit_rule of this DosRateLimiter.  # noqa: E501
        :type dos_limit_rule: List[DosLimitRule]
        :param enabled: The enabled of this DosRateLimiter.  # noqa: E501
        :type enabled: bool
        :param interval_seconds: The interval_seconds of this DosRateLimiter.  # noqa: E501
        :type interval_seconds: int
        """
        self.swagger_types = {
            'dos_limit_rule': List[DosLimitRule],
            'enabled': bool,
            'interval_seconds': int
        }

        self.attribute_map = {
            'dos_limit_rule': 'dosLimitRule',
            'enabled': 'enabled',
            'interval_seconds': 'intervalSeconds'
        }
        self._dos_limit_rule = dos_limit_rule
        self._enabled = enabled
        self._interval_seconds = interval_seconds

    @classmethod
    def from_dict(cls, dikt) -> 'DosRateLimiter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DosRateLimiter of this DosRateLimiter.  # noqa: E501
        :rtype: DosRateLimiter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dos_limit_rule(self) -> List[DosLimitRule]:
        """Gets the dos_limit_rule of this DosRateLimiter.


        :return: The dos_limit_rule of this DosRateLimiter.
        :rtype: List[DosLimitRule]
        """
        return self._dos_limit_rule

    @dos_limit_rule.setter
    def dos_limit_rule(self, dos_limit_rule: List[DosLimitRule]):
        """Sets the dos_limit_rule of this DosRateLimiter.


        :param dos_limit_rule: The dos_limit_rule of this DosRateLimiter.
        :type dos_limit_rule: List[DosLimitRule]
        """

        self._dos_limit_rule = dos_limit_rule

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this DosRateLimiter.


        :return: The enabled of this DosRateLimiter.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this DosRateLimiter.


        :param enabled: The enabled of this DosRateLimiter.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def interval_seconds(self) -> int:
        """Gets the interval_seconds of this DosRateLimiter.


        :return: The interval_seconds of this DosRateLimiter.
        :rtype: int
        """
        return self._interval_seconds

    @interval_seconds.setter
    def interval_seconds(self, interval_seconds: int):
        """Sets the interval_seconds of this DosRateLimiter.


        :param interval_seconds: The interval_seconds of this DosRateLimiter.
        :type interval_seconds: int
        """

        self._interval_seconds = interval_seconds
