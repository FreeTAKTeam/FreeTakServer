# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Connector(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, port: int=None, tls: bool=None, use_federation_truststore: bool=None, client_auth: str=None, allow_basic_auth: bool=None, crl_file: str=None, name: str=None, keystore: str=None, keystore_file: str=None, keystore_pass: str=None, truststore: str=None, truststore_file: str=None, truststore_pass: str=None, enable_admin_ui: bool=None, enable_webtak: bool=None, enable_non_admin_ui: bool=None):  # noqa: E501
        """Connector - a model defined in Swagger

        :param port: The port of this Connector.  # noqa: E501
        :type port: int
        :param tls: The tls of this Connector.  # noqa: E501
        :type tls: bool
        :param use_federation_truststore: The use_federation_truststore of this Connector.  # noqa: E501
        :type use_federation_truststore: bool
        :param client_auth: The client_auth of this Connector.  # noqa: E501
        :type client_auth: str
        :param allow_basic_auth: The allow_basic_auth of this Connector.  # noqa: E501
        :type allow_basic_auth: bool
        :param crl_file: The crl_file of this Connector.  # noqa: E501
        :type crl_file: str
        :param name: The name of this Connector.  # noqa: E501
        :type name: str
        :param keystore: The keystore of this Connector.  # noqa: E501
        :type keystore: str
        :param keystore_file: The keystore_file of this Connector.  # noqa: E501
        :type keystore_file: str
        :param keystore_pass: The keystore_pass of this Connector.  # noqa: E501
        :type keystore_pass: str
        :param truststore: The truststore of this Connector.  # noqa: E501
        :type truststore: str
        :param truststore_file: The truststore_file of this Connector.  # noqa: E501
        :type truststore_file: str
        :param truststore_pass: The truststore_pass of this Connector.  # noqa: E501
        :type truststore_pass: str
        :param enable_admin_ui: The enable_admin_ui of this Connector.  # noqa: E501
        :type enable_admin_ui: bool
        :param enable_webtak: The enable_webtak of this Connector.  # noqa: E501
        :type enable_webtak: bool
        :param enable_non_admin_ui: The enable_non_admin_ui of this Connector.  # noqa: E501
        :type enable_non_admin_ui: bool
        """
        self.swagger_types = {
            'port': int,
            'tls': bool,
            'use_federation_truststore': bool,
            'client_auth': str,
            'allow_basic_auth': bool,
            'crl_file': str,
            'name': str,
            'keystore': str,
            'keystore_file': str,
            'keystore_pass': str,
            'truststore': str,
            'truststore_file': str,
            'truststore_pass': str,
            'enable_admin_ui': bool,
            'enable_webtak': bool,
            'enable_non_admin_ui': bool
        }

        self.attribute_map = {
            'port': 'port',
            'tls': 'tls',
            'use_federation_truststore': 'useFederationTruststore',
            'client_auth': 'clientAuth',
            'allow_basic_auth': 'allowBasicAuth',
            'crl_file': 'crlFile',
            'name': 'name',
            'keystore': 'keystore',
            'keystore_file': 'keystoreFile',
            'keystore_pass': 'keystorePass',
            'truststore': 'truststore',
            'truststore_file': 'truststoreFile',
            'truststore_pass': 'truststorePass',
            'enable_admin_ui': 'enableAdminUI',
            'enable_webtak': 'enableWebtak',
            'enable_non_admin_ui': 'enableNonAdminUI'
        }
        self._port = port
        self._tls = tls
        self._use_federation_truststore = use_federation_truststore
        self._client_auth = client_auth
        self._allow_basic_auth = allow_basic_auth
        self._crl_file = crl_file
        self._name = name
        self._keystore = keystore
        self._keystore_file = keystore_file
        self._keystore_pass = keystore_pass
        self._truststore = truststore
        self._truststore_file = truststore_file
        self._truststore_pass = truststore_pass
        self._enable_admin_ui = enable_admin_ui
        self._enable_webtak = enable_webtak
        self._enable_non_admin_ui = enable_non_admin_ui

    @classmethod
    def from_dict(cls, dikt) -> 'Connector':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Connector of this Connector.  # noqa: E501
        :rtype: Connector
        """
        return util.deserialize_model(dikt, cls)

    @property
    def port(self) -> int:
        """Gets the port of this Connector.


        :return: The port of this Connector.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this Connector.


        :param port: The port of this Connector.
        :type port: int
        """

        self._port = port

    @property
    def tls(self) -> bool:
        """Gets the tls of this Connector.


        :return: The tls of this Connector.
        :rtype: bool
        """
        return self._tls

    @tls.setter
    def tls(self, tls: bool):
        """Sets the tls of this Connector.


        :param tls: The tls of this Connector.
        :type tls: bool
        """

        self._tls = tls

    @property
    def use_federation_truststore(self) -> bool:
        """Gets the use_federation_truststore of this Connector.


        :return: The use_federation_truststore of this Connector.
        :rtype: bool
        """
        return self._use_federation_truststore

    @use_federation_truststore.setter
    def use_federation_truststore(self, use_federation_truststore: bool):
        """Sets the use_federation_truststore of this Connector.


        :param use_federation_truststore: The use_federation_truststore of this Connector.
        :type use_federation_truststore: bool
        """

        self._use_federation_truststore = use_federation_truststore

    @property
    def client_auth(self) -> str:
        """Gets the client_auth of this Connector.


        :return: The client_auth of this Connector.
        :rtype: str
        """
        return self._client_auth

    @client_auth.setter
    def client_auth(self, client_auth: str):
        """Sets the client_auth of this Connector.


        :param client_auth: The client_auth of this Connector.
        :type client_auth: str
        """

        self._client_auth = client_auth

    @property
    def allow_basic_auth(self) -> bool:
        """Gets the allow_basic_auth of this Connector.


        :return: The allow_basic_auth of this Connector.
        :rtype: bool
        """
        return self._allow_basic_auth

    @allow_basic_auth.setter
    def allow_basic_auth(self, allow_basic_auth: bool):
        """Sets the allow_basic_auth of this Connector.


        :param allow_basic_auth: The allow_basic_auth of this Connector.
        :type allow_basic_auth: bool
        """

        self._allow_basic_auth = allow_basic_auth

    @property
    def crl_file(self) -> str:
        """Gets the crl_file of this Connector.


        :return: The crl_file of this Connector.
        :rtype: str
        """
        return self._crl_file

    @crl_file.setter
    def crl_file(self, crl_file: str):
        """Sets the crl_file of this Connector.


        :param crl_file: The crl_file of this Connector.
        :type crl_file: str
        """

        self._crl_file = crl_file

    @property
    def name(self) -> str:
        """Gets the name of this Connector.


        :return: The name of this Connector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Connector.


        :param name: The name of this Connector.
        :type name: str
        """

        self._name = name

    @property
    def keystore(self) -> str:
        """Gets the keystore of this Connector.


        :return: The keystore of this Connector.
        :rtype: str
        """
        return self._keystore

    @keystore.setter
    def keystore(self, keystore: str):
        """Sets the keystore of this Connector.


        :param keystore: The keystore of this Connector.
        :type keystore: str
        """

        self._keystore = keystore

    @property
    def keystore_file(self) -> str:
        """Gets the keystore_file of this Connector.


        :return: The keystore_file of this Connector.
        :rtype: str
        """
        return self._keystore_file

    @keystore_file.setter
    def keystore_file(self, keystore_file: str):
        """Sets the keystore_file of this Connector.


        :param keystore_file: The keystore_file of this Connector.
        :type keystore_file: str
        """

        self._keystore_file = keystore_file

    @property
    def keystore_pass(self) -> str:
        """Gets the keystore_pass of this Connector.


        :return: The keystore_pass of this Connector.
        :rtype: str
        """
        return self._keystore_pass

    @keystore_pass.setter
    def keystore_pass(self, keystore_pass: str):
        """Sets the keystore_pass of this Connector.


        :param keystore_pass: The keystore_pass of this Connector.
        :type keystore_pass: str
        """

        self._keystore_pass = keystore_pass

    @property
    def truststore(self) -> str:
        """Gets the truststore of this Connector.


        :return: The truststore of this Connector.
        :rtype: str
        """
        return self._truststore

    @truststore.setter
    def truststore(self, truststore: str):
        """Sets the truststore of this Connector.


        :param truststore: The truststore of this Connector.
        :type truststore: str
        """

        self._truststore = truststore

    @property
    def truststore_file(self) -> str:
        """Gets the truststore_file of this Connector.


        :return: The truststore_file of this Connector.
        :rtype: str
        """
        return self._truststore_file

    @truststore_file.setter
    def truststore_file(self, truststore_file: str):
        """Sets the truststore_file of this Connector.


        :param truststore_file: The truststore_file of this Connector.
        :type truststore_file: str
        """

        self._truststore_file = truststore_file

    @property
    def truststore_pass(self) -> str:
        """Gets the truststore_pass of this Connector.


        :return: The truststore_pass of this Connector.
        :rtype: str
        """
        return self._truststore_pass

    @truststore_pass.setter
    def truststore_pass(self, truststore_pass: str):
        """Sets the truststore_pass of this Connector.


        :param truststore_pass: The truststore_pass of this Connector.
        :type truststore_pass: str
        """

        self._truststore_pass = truststore_pass

    @property
    def enable_admin_ui(self) -> bool:
        """Gets the enable_admin_ui of this Connector.


        :return: The enable_admin_ui of this Connector.
        :rtype: bool
        """
        return self._enable_admin_ui

    @enable_admin_ui.setter
    def enable_admin_ui(self, enable_admin_ui: bool):
        """Sets the enable_admin_ui of this Connector.


        :param enable_admin_ui: The enable_admin_ui of this Connector.
        :type enable_admin_ui: bool
        """

        self._enable_admin_ui = enable_admin_ui

    @property
    def enable_webtak(self) -> bool:
        """Gets the enable_webtak of this Connector.


        :return: The enable_webtak of this Connector.
        :rtype: bool
        """
        return self._enable_webtak

    @enable_webtak.setter
    def enable_webtak(self, enable_webtak: bool):
        """Sets the enable_webtak of this Connector.


        :param enable_webtak: The enable_webtak of this Connector.
        :type enable_webtak: bool
        """

        self._enable_webtak = enable_webtak

    @property
    def enable_non_admin_ui(self) -> bool:
        """Gets the enable_non_admin_ui of this Connector.


        :return: The enable_non_admin_ui of this Connector.
        :rtype: bool
        """
        return self._enable_non_admin_ui

    @enable_non_admin_ui.setter
    def enable_non_admin_ui(self, enable_non_admin_ui: bool):
        """Sets the enable_non_admin_ui of this Connector.


        :param enable_non_admin_ui: The enable_non_admin_ui of this Connector.
        :type enable_non_admin_ui: bool
        """

        self._enable_non_admin_ui = enable_non_admin_ui
