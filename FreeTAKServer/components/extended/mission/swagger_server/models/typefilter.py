# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Typefilter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, detail: str=None, threshold: int=None):  # noqa: E501
        """Typefilter - a model defined in Swagger

        :param type: The type of this Typefilter.  # noqa: E501
        :type type: str
        :param detail: The detail of this Typefilter.  # noqa: E501
        :type detail: str
        :param threshold: The threshold of this Typefilter.  # noqa: E501
        :type threshold: int
        """
        self.swagger_types = {
            'type': str,
            'detail': str,
            'threshold': int
        }

        self.attribute_map = {
            'type': 'type',
            'detail': 'detail',
            'threshold': 'threshold'
        }
        self._type = type
        self._detail = detail
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt) -> 'Typefilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Typefilter of this Typefilter.  # noqa: E501
        :rtype: Typefilter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Typefilter.


        :return: The type of this Typefilter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Typefilter.


        :param type: The type of this Typefilter.
        :type type: str
        """

        self._type = type

    @property
    def detail(self) -> str:
        """Gets the detail of this Typefilter.


        :return: The detail of this Typefilter.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail: str):
        """Sets the detail of this Typefilter.


        :param detail: The detail of this Typefilter.
        :type detail: str
        """

        self._detail = detail

    @property
    def threshold(self) -> int:
        """Gets the threshold of this Typefilter.


        :return: The threshold of this Typefilter.
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold: int):
        """Sets the threshold of this Typefilter.


        :param threshold: The threshold of this Typefilter.
        :type threshold: int
        """

        self._threshold = threshold
