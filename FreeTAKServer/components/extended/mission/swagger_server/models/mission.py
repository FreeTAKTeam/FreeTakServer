# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.external_mission_data import ExternalMissionData  # noqa: F401,E501
from swagger_server.models.log_entry import LogEntry  # noqa: F401,E501
from swagger_server.models.map_layer import MapLayer  # noqa: F401,E501
from swagger_server.models.mission_add_resource import MissionAddResource  # noqa: F401,E501
from swagger_server.models.mission_add_string import MissionAddString  # noqa: F401,E501
from swagger_server.models.mission_change import MissionChange  # noqa: F401,E501
from swagger_server.models.mission_feed import MissionFeed  # noqa: F401,E501
from swagger_server.models.mission_role import MissionRole  # noqa: F401,E501
from swagger_server import util


class Mission(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, description: str=None, chat_room: str=None, base_layer: str=None, bbox: str=None, bounding_polygon: str=None, path: str=None, classification: str=None, tool: str=None, keywords: List[str]=None, creator_uid: str=None, create_time: datetime=None, last_edited: datetime=None, groups: List[str]=None, external_data: List[ExternalMissionData]=None, feeds: List[MissionFeed]=None, map_layers: List[MapLayer]=None, default_role: MissionRole=None, owner_role: MissionRole=None, mission_changes: List[MissionChange]=None, logs: List[LogEntry]=None, expiration: int=None, uids: List[MissionAddString]=None, contents: List[MissionAddResource]=None, token: str=None, password_protected: bool=None):  # noqa: E501
        """Mission - a model defined in Swagger

        :param name: The name of this Mission.  # noqa: E501
        :type name: str
        :param description: The description of this Mission.  # noqa: E501
        :type description: str
        :param chat_room: The chat_room of this Mission.  # noqa: E501
        :type chat_room: str
        :param base_layer: The base_layer of this Mission.  # noqa: E501
        :type base_layer: str
        :param bbox: The bbox of this Mission.  # noqa: E501
        :type bbox: str
        :param bounding_polygon: The bounding_polygon of this Mission.  # noqa: E501
        :type bounding_polygon: str
        :param path: The path of this Mission.  # noqa: E501
        :type path: str
        :param classification: The classification of this Mission.  # noqa: E501
        :type classification: str
        :param tool: The tool of this Mission.  # noqa: E501
        :type tool: str
        :param keywords: The keywords of this Mission.  # noqa: E501
        :type keywords: List[str]
        :param creator_uid: The creator_uid of this Mission.  # noqa: E501
        :type creator_uid: str
        :param create_time: The create_time of this Mission.  # noqa: E501
        :type create_time: datetime
        :param last_edited: The last_edited of this Mission.  # noqa: E501
        :type last_edited: datetime
        :param groups: The groups of this Mission.  # noqa: E501
        :type groups: List[str]
        :param external_data: The external_data of this Mission.  # noqa: E501
        :type external_data: List[ExternalMissionData]
        :param feeds: The feeds of this Mission.  # noqa: E501
        :type feeds: List[MissionFeed]
        :param map_layers: The map_layers of this Mission.  # noqa: E501
        :type map_layers: List[MapLayer]
        :param default_role: The default_role of this Mission.  # noqa: E501
        :type default_role: MissionRole
        :param owner_role: The owner_role of this Mission.  # noqa: E501
        :type owner_role: MissionRole
        :param mission_changes: The mission_changes of this Mission.  # noqa: E501
        :type mission_changes: List[MissionChange]
        :param logs: The logs of this Mission.  # noqa: E501
        :type logs: List[LogEntry]
        :param expiration: The expiration of this Mission.  # noqa: E501
        :type expiration: int
        :param uids: The uids of this Mission.  # noqa: E501
        :type uids: List[MissionAddString]
        :param contents: The contents of this Mission.  # noqa: E501
        :type contents: List[MissionAddResource]
        :param token: The token of this Mission.  # noqa: E501
        :type token: str
        :param password_protected: The password_protected of this Mission.  # noqa: E501
        :type password_protected: bool
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'chat_room': str,
            'base_layer': str,
            'bbox': str,
            'bounding_polygon': str,
            'path': str,
            'classification': str,
            'tool': str,
            'keywords': List[str],
            'creator_uid': str,
            'create_time': datetime,
            'last_edited': datetime,
            'groups': List[str],
            'external_data': List[ExternalMissionData],
            'feeds': List[MissionFeed],
            'map_layers': List[MapLayer],
            'default_role': MissionRole,
            'owner_role': MissionRole,
            'mission_changes': List[MissionChange],
            'logs': List[LogEntry],
            'expiration': int,
            'uids': List[MissionAddString],
            'contents': List[MissionAddResource],
            'token': str,
            'password_protected': bool
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'chat_room': 'chatRoom',
            'base_layer': 'baseLayer',
            'bbox': 'bbox',
            'bounding_polygon': 'boundingPolygon',
            'path': 'path',
            'classification': 'classification',
            'tool': 'tool',
            'keywords': 'keywords',
            'creator_uid': 'creatorUid',
            'create_time': 'createTime',
            'last_edited': 'lastEdited',
            'groups': 'groups',
            'external_data': 'externalData',
            'feeds': 'feeds',
            'map_layers': 'mapLayers',
            'default_role': 'defaultRole',
            'owner_role': 'ownerRole',
            'mission_changes': 'missionChanges',
            'logs': 'logs',
            'expiration': 'expiration',
            'uids': 'uids',
            'contents': 'contents',
            'token': 'token',
            'password_protected': 'passwordProtected'
        }
        self._name = name
        self._description = description
        self._chat_room = chat_room
        self._base_layer = base_layer
        self._bbox = bbox
        self._bounding_polygon = bounding_polygon
        self._path = path
        self._classification = classification
        self._tool = tool
        self._keywords = keywords
        self._creator_uid = creator_uid
        self._create_time = create_time
        self._last_edited = last_edited
        self._groups = groups
        self._external_data = external_data
        self._feeds = feeds
        self._map_layers = map_layers
        self._default_role = default_role
        self._owner_role = owner_role
        self._mission_changes = mission_changes
        self._logs = logs
        self._expiration = expiration
        self._uids = uids
        self._contents = contents
        self._token = token
        self._password_protected = password_protected

    @classmethod
    def from_dict(cls, dikt) -> 'Mission':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Mission of this Mission.  # noqa: E501
        :rtype: Mission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Mission.


        :return: The name of this Mission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Mission.


        :param name: The name of this Mission.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Mission.


        :return: The description of this Mission.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Mission.


        :param description: The description of this Mission.
        :type description: str
        """

        self._description = description

    @property
    def chat_room(self) -> str:
        """Gets the chat_room of this Mission.


        :return: The chat_room of this Mission.
        :rtype: str
        """
        return self._chat_room

    @chat_room.setter
    def chat_room(self, chat_room: str):
        """Sets the chat_room of this Mission.


        :param chat_room: The chat_room of this Mission.
        :type chat_room: str
        """

        self._chat_room = chat_room

    @property
    def base_layer(self) -> str:
        """Gets the base_layer of this Mission.


        :return: The base_layer of this Mission.
        :rtype: str
        """
        return self._base_layer

    @base_layer.setter
    def base_layer(self, base_layer: str):
        """Sets the base_layer of this Mission.


        :param base_layer: The base_layer of this Mission.
        :type base_layer: str
        """

        self._base_layer = base_layer

    @property
    def bbox(self) -> str:
        """Gets the bbox of this Mission.


        :return: The bbox of this Mission.
        :rtype: str
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox: str):
        """Sets the bbox of this Mission.


        :param bbox: The bbox of this Mission.
        :type bbox: str
        """

        self._bbox = bbox

    @property
    def bounding_polygon(self) -> str:
        """Gets the bounding_polygon of this Mission.


        :return: The bounding_polygon of this Mission.
        :rtype: str
        """
        return self._bounding_polygon

    @bounding_polygon.setter
    def bounding_polygon(self, bounding_polygon: str):
        """Sets the bounding_polygon of this Mission.


        :param bounding_polygon: The bounding_polygon of this Mission.
        :type bounding_polygon: str
        """

        self._bounding_polygon = bounding_polygon

    @property
    def path(self) -> str:
        """Gets the path of this Mission.


        :return: The path of this Mission.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this Mission.


        :param path: The path of this Mission.
        :type path: str
        """

        self._path = path

    @property
    def classification(self) -> str:
        """Gets the classification of this Mission.


        :return: The classification of this Mission.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification: str):
        """Sets the classification of this Mission.


        :param classification: The classification of this Mission.
        :type classification: str
        """

        self._classification = classification

    @property
    def tool(self) -> str:
        """Gets the tool of this Mission.


        :return: The tool of this Mission.
        :rtype: str
        """
        return self._tool

    @tool.setter
    def tool(self, tool: str):
        """Sets the tool of this Mission.


        :param tool: The tool of this Mission.
        :type tool: str
        """

        self._tool = tool

    @property
    def keywords(self) -> List[str]:
        """Gets the keywords of this Mission.


        :return: The keywords of this Mission.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords: List[str]):
        """Sets the keywords of this Mission.


        :param keywords: The keywords of this Mission.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def creator_uid(self) -> str:
        """Gets the creator_uid of this Mission.


        :return: The creator_uid of this Mission.
        :rtype: str
        """
        return self._creator_uid

    @creator_uid.setter
    def creator_uid(self, creator_uid: str):
        """Sets the creator_uid of this Mission.


        :param creator_uid: The creator_uid of this Mission.
        :type creator_uid: str
        """

        self._creator_uid = creator_uid

    @property
    def create_time(self) -> datetime:
        """Gets the create_time of this Mission.


        :return: The create_time of this Mission.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time: datetime):
        """Sets the create_time of this Mission.


        :param create_time: The create_time of this Mission.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def last_edited(self) -> datetime:
        """Gets the last_edited of this Mission.


        :return: The last_edited of this Mission.
        :rtype: datetime
        """
        return self._last_edited

    @last_edited.setter
    def last_edited(self, last_edited: datetime):
        """Sets the last_edited of this Mission.


        :param last_edited: The last_edited of this Mission.
        :type last_edited: datetime
        """

        self._last_edited = last_edited

    @property
    def groups(self) -> List[str]:
        """Gets the groups of this Mission.


        :return: The groups of this Mission.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups: List[str]):
        """Sets the groups of this Mission.


        :param groups: The groups of this Mission.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def external_data(self) -> List[ExternalMissionData]:
        """Gets the external_data of this Mission.


        :return: The external_data of this Mission.
        :rtype: List[ExternalMissionData]
        """
        return self._external_data

    @external_data.setter
    def external_data(self, external_data: List[ExternalMissionData]):
        """Sets the external_data of this Mission.


        :param external_data: The external_data of this Mission.
        :type external_data: List[ExternalMissionData]
        """

        self._external_data = external_data

    @property
    def feeds(self) -> List[MissionFeed]:
        """Gets the feeds of this Mission.


        :return: The feeds of this Mission.
        :rtype: List[MissionFeed]
        """
        return self._feeds

    @feeds.setter
    def feeds(self, feeds: List[MissionFeed]):
        """Sets the feeds of this Mission.


        :param feeds: The feeds of this Mission.
        :type feeds: List[MissionFeed]
        """

        self._feeds = feeds

    @property
    def map_layers(self) -> List[MapLayer]:
        """Gets the map_layers of this Mission.


        :return: The map_layers of this Mission.
        :rtype: List[MapLayer]
        """
        return self._map_layers

    @map_layers.setter
    def map_layers(self, map_layers: List[MapLayer]):
        """Sets the map_layers of this Mission.


        :param map_layers: The map_layers of this Mission.
        :type map_layers: List[MapLayer]
        """

        self._map_layers = map_layers

    @property
    def default_role(self) -> MissionRole:
        """Gets the default_role of this Mission.


        :return: The default_role of this Mission.
        :rtype: MissionRole
        """
        return self._default_role

    @default_role.setter
    def default_role(self, default_role: MissionRole):
        """Sets the default_role of this Mission.


        :param default_role: The default_role of this Mission.
        :type default_role: MissionRole
        """

        self._default_role = default_role

    @property
    def owner_role(self) -> MissionRole:
        """Gets the owner_role of this Mission.


        :return: The owner_role of this Mission.
        :rtype: MissionRole
        """
        return self._owner_role

    @owner_role.setter
    def owner_role(self, owner_role: MissionRole):
        """Sets the owner_role of this Mission.


        :param owner_role: The owner_role of this Mission.
        :type owner_role: MissionRole
        """

        self._owner_role = owner_role

    @property
    def mission_changes(self) -> List[MissionChange]:
        """Gets the mission_changes of this Mission.


        :return: The mission_changes of this Mission.
        :rtype: List[MissionChange]
        """
        return self._mission_changes

    @mission_changes.setter
    def mission_changes(self, mission_changes: List[MissionChange]):
        """Sets the mission_changes of this Mission.


        :param mission_changes: The mission_changes of this Mission.
        :type mission_changes: List[MissionChange]
        """

        self._mission_changes = mission_changes

    @property
    def logs(self) -> List[LogEntry]:
        """Gets the logs of this Mission.


        :return: The logs of this Mission.
        :rtype: List[LogEntry]
        """
        return self._logs

    @logs.setter
    def logs(self, logs: List[LogEntry]):
        """Sets the logs of this Mission.


        :param logs: The logs of this Mission.
        :type logs: List[LogEntry]
        """

        self._logs = logs

    @property
    def expiration(self) -> int:
        """Gets the expiration of this Mission.


        :return: The expiration of this Mission.
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration: int):
        """Sets the expiration of this Mission.


        :param expiration: The expiration of this Mission.
        :type expiration: int
        """

        self._expiration = expiration

    @property
    def uids(self) -> List[MissionAddString]:
        """Gets the uids of this Mission.


        :return: The uids of this Mission.
        :rtype: List[MissionAddString]
        """
        return self._uids

    @uids.setter
    def uids(self, uids: List[MissionAddString]):
        """Sets the uids of this Mission.


        :param uids: The uids of this Mission.
        :type uids: List[MissionAddString]
        """

        self._uids = uids

    @property
    def contents(self) -> List[MissionAddResource]:
        """Gets the contents of this Mission.


        :return: The contents of this Mission.
        :rtype: List[MissionAddResource]
        """
        return self._contents

    @contents.setter
    def contents(self, contents: List[MissionAddResource]):
        """Sets the contents of this Mission.


        :param contents: The contents of this Mission.
        :type contents: List[MissionAddResource]
        """

        self._contents = contents

    @property
    def token(self) -> str:
        """Gets the token of this Mission.


        :return: The token of this Mission.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this Mission.


        :param token: The token of this Mission.
        :type token: str
        """

        self._token = token

    @property
    def password_protected(self) -> bool:
        """Gets the password_protected of this Mission.


        :return: The password_protected of this Mission.
        :rtype: bool
        """
        return self._password_protected

    @password_protected.setter
    def password_protected(self, password_protected: bool):
        """Sets the password_protected of this Mission.


        :param password_protected: The password_protected of this Mission.
        :type password_protected: bool
        """

        self._password_protected = password_protected
