# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.federate import Federate  # noqa: F401,E501
from swagger_server.models.group import Group  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class ConnectionInfoSummary(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, federate_id: str=None, federate_name: str=None, remote_address: str=None, remote_port: int=None, client: bool=None, read_count: int=None, processed_count: int=None, connection_status_value: str=None, last_error: str=None, federate_config: Federate=None, user: User=None, groups: List[Group]=None):  # noqa: E501
        """ConnectionInfoSummary - a model defined in Swagger

        :param federate_id: The federate_id of this ConnectionInfoSummary.  # noqa: E501
        :type federate_id: str
        :param federate_name: The federate_name of this ConnectionInfoSummary.  # noqa: E501
        :type federate_name: str
        :param remote_address: The remote_address of this ConnectionInfoSummary.  # noqa: E501
        :type remote_address: str
        :param remote_port: The remote_port of this ConnectionInfoSummary.  # noqa: E501
        :type remote_port: int
        :param client: The client of this ConnectionInfoSummary.  # noqa: E501
        :type client: bool
        :param read_count: The read_count of this ConnectionInfoSummary.  # noqa: E501
        :type read_count: int
        :param processed_count: The processed_count of this ConnectionInfoSummary.  # noqa: E501
        :type processed_count: int
        :param connection_status_value: The connection_status_value of this ConnectionInfoSummary.  # noqa: E501
        :type connection_status_value: str
        :param last_error: The last_error of this ConnectionInfoSummary.  # noqa: E501
        :type last_error: str
        :param federate_config: The federate_config of this ConnectionInfoSummary.  # noqa: E501
        :type federate_config: Federate
        :param user: The user of this ConnectionInfoSummary.  # noqa: E501
        :type user: User
        :param groups: The groups of this ConnectionInfoSummary.  # noqa: E501
        :type groups: List[Group]
        """
        self.swagger_types = {
            'federate_id': str,
            'federate_name': str,
            'remote_address': str,
            'remote_port': int,
            'client': bool,
            'read_count': int,
            'processed_count': int,
            'connection_status_value': str,
            'last_error': str,
            'federate_config': Federate,
            'user': User,
            'groups': List[Group]
        }

        self.attribute_map = {
            'federate_id': 'federateId',
            'federate_name': 'federateName',
            'remote_address': 'remoteAddress',
            'remote_port': 'remotePort',
            'client': 'client',
            'read_count': 'readCount',
            'processed_count': 'processedCount',
            'connection_status_value': 'connectionStatusValue',
            'last_error': 'lastError',
            'federate_config': 'federateConfig',
            'user': 'user',
            'groups': 'groups'
        }
        self._federate_id = federate_id
        self._federate_name = federate_name
        self._remote_address = remote_address
        self._remote_port = remote_port
        self._client = client
        self._read_count = read_count
        self._processed_count = processed_count
        self._connection_status_value = connection_status_value
        self._last_error = last_error
        self._federate_config = federate_config
        self._user = user
        self._groups = groups

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectionInfoSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConnectionInfoSummary of this ConnectionInfoSummary.  # noqa: E501
        :rtype: ConnectionInfoSummary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def federate_id(self) -> str:
        """Gets the federate_id of this ConnectionInfoSummary.


        :return: The federate_id of this ConnectionInfoSummary.
        :rtype: str
        """
        return self._federate_id

    @federate_id.setter
    def federate_id(self, federate_id: str):
        """Sets the federate_id of this ConnectionInfoSummary.


        :param federate_id: The federate_id of this ConnectionInfoSummary.
        :type federate_id: str
        """

        self._federate_id = federate_id

    @property
    def federate_name(self) -> str:
        """Gets the federate_name of this ConnectionInfoSummary.


        :return: The federate_name of this ConnectionInfoSummary.
        :rtype: str
        """
        return self._federate_name

    @federate_name.setter
    def federate_name(self, federate_name: str):
        """Sets the federate_name of this ConnectionInfoSummary.


        :param federate_name: The federate_name of this ConnectionInfoSummary.
        :type federate_name: str
        """

        self._federate_name = federate_name

    @property
    def remote_address(self) -> str:
        """Gets the remote_address of this ConnectionInfoSummary.


        :return: The remote_address of this ConnectionInfoSummary.
        :rtype: str
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address: str):
        """Sets the remote_address of this ConnectionInfoSummary.


        :param remote_address: The remote_address of this ConnectionInfoSummary.
        :type remote_address: str
        """

        self._remote_address = remote_address

    @property
    def remote_port(self) -> int:
        """Gets the remote_port of this ConnectionInfoSummary.


        :return: The remote_port of this ConnectionInfoSummary.
        :rtype: int
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port: int):
        """Sets the remote_port of this ConnectionInfoSummary.


        :param remote_port: The remote_port of this ConnectionInfoSummary.
        :type remote_port: int
        """

        self._remote_port = remote_port

    @property
    def client(self) -> bool:
        """Gets the client of this ConnectionInfoSummary.


        :return: The client of this ConnectionInfoSummary.
        :rtype: bool
        """
        return self._client

    @client.setter
    def client(self, client: bool):
        """Sets the client of this ConnectionInfoSummary.


        :param client: The client of this ConnectionInfoSummary.
        :type client: bool
        """

        self._client = client

    @property
    def read_count(self) -> int:
        """Gets the read_count of this ConnectionInfoSummary.


        :return: The read_count of this ConnectionInfoSummary.
        :rtype: int
        """
        return self._read_count

    @read_count.setter
    def read_count(self, read_count: int):
        """Sets the read_count of this ConnectionInfoSummary.


        :param read_count: The read_count of this ConnectionInfoSummary.
        :type read_count: int
        """

        self._read_count = read_count

    @property
    def processed_count(self) -> int:
        """Gets the processed_count of this ConnectionInfoSummary.


        :return: The processed_count of this ConnectionInfoSummary.
        :rtype: int
        """
        return self._processed_count

    @processed_count.setter
    def processed_count(self, processed_count: int):
        """Sets the processed_count of this ConnectionInfoSummary.


        :param processed_count: The processed_count of this ConnectionInfoSummary.
        :type processed_count: int
        """

        self._processed_count = processed_count

    @property
    def connection_status_value(self) -> str:
        """Gets the connection_status_value of this ConnectionInfoSummary.


        :return: The connection_status_value of this ConnectionInfoSummary.
        :rtype: str
        """
        return self._connection_status_value

    @connection_status_value.setter
    def connection_status_value(self, connection_status_value: str):
        """Sets the connection_status_value of this ConnectionInfoSummary.


        :param connection_status_value: The connection_status_value of this ConnectionInfoSummary.
        :type connection_status_value: str
        """
        allowed_values = ["DISABLED", "CONNECTED", "CONNECTING", "WAITING_TO_RETRY", "RETRY_SCHEDULED"]  # noqa: E501
        if connection_status_value not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_status_value` ({0}), must be one of {1}"
                .format(connection_status_value, allowed_values)
            )

        self._connection_status_value = connection_status_value

    @property
    def last_error(self) -> str:
        """Gets the last_error of this ConnectionInfoSummary.


        :return: The last_error of this ConnectionInfoSummary.
        :rtype: str
        """
        return self._last_error

    @last_error.setter
    def last_error(self, last_error: str):
        """Sets the last_error of this ConnectionInfoSummary.


        :param last_error: The last_error of this ConnectionInfoSummary.
        :type last_error: str
        """

        self._last_error = last_error

    @property
    def federate_config(self) -> Federate:
        """Gets the federate_config of this ConnectionInfoSummary.


        :return: The federate_config of this ConnectionInfoSummary.
        :rtype: Federate
        """
        return self._federate_config

    @federate_config.setter
    def federate_config(self, federate_config: Federate):
        """Sets the federate_config of this ConnectionInfoSummary.


        :param federate_config: The federate_config of this ConnectionInfoSummary.
        :type federate_config: Federate
        """

        self._federate_config = federate_config

    @property
    def user(self) -> User:
        """Gets the user of this ConnectionInfoSummary.


        :return: The user of this ConnectionInfoSummary.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user: User):
        """Sets the user of this ConnectionInfoSummary.


        :param user: The user of this ConnectionInfoSummary.
        :type user: User
        """

        self._user = user

    @property
    def groups(self) -> List[Group]:
        """Gets the groups of this ConnectionInfoSummary.


        :return: The groups of this ConnectionInfoSummary.
        :rtype: List[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups: List[Group]):
        """Sets the groups of this ConnectionInfoSummary.


        :param groups: The groups of this ConnectionInfoSummary.
        :type groups: List[Group]
        """

        self._groups = groups
