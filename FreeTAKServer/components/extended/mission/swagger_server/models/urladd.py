# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Urladd(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, thumburl: bool=None, fullurl: bool=None, script: str=None, vidscript: str=None, host: str=None, overwriteurl: bool=None):  # noqa: E501
        """Urladd - a model defined in Swagger

        :param thumburl: The thumburl of this Urladd.  # noqa: E501
        :type thumburl: bool
        :param fullurl: The fullurl of this Urladd.  # noqa: E501
        :type fullurl: bool
        :param script: The script of this Urladd.  # noqa: E501
        :type script: str
        :param vidscript: The vidscript of this Urladd.  # noqa: E501
        :type vidscript: str
        :param host: The host of this Urladd.  # noqa: E501
        :type host: str
        :param overwriteurl: The overwriteurl of this Urladd.  # noqa: E501
        :type overwriteurl: bool
        """
        self.swagger_types = {
            'thumburl': bool,
            'fullurl': bool,
            'script': str,
            'vidscript': str,
            'host': str,
            'overwriteurl': bool
        }

        self.attribute_map = {
            'thumburl': 'thumburl',
            'fullurl': 'fullurl',
            'script': 'script',
            'vidscript': 'vidscript',
            'host': 'host',
            'overwriteurl': 'overwriteurl'
        }
        self._thumburl = thumburl
        self._fullurl = fullurl
        self._script = script
        self._vidscript = vidscript
        self._host = host
        self._overwriteurl = overwriteurl

    @classmethod
    def from_dict(cls, dikt) -> 'Urladd':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Urladd of this Urladd.  # noqa: E501
        :rtype: Urladd
        """
        return util.deserialize_model(dikt, cls)

    @property
    def thumburl(self) -> bool:
        """Gets the thumburl of this Urladd.


        :return: The thumburl of this Urladd.
        :rtype: bool
        """
        return self._thumburl

    @thumburl.setter
    def thumburl(self, thumburl: bool):
        """Sets the thumburl of this Urladd.


        :param thumburl: The thumburl of this Urladd.
        :type thumburl: bool
        """

        self._thumburl = thumburl

    @property
    def fullurl(self) -> bool:
        """Gets the fullurl of this Urladd.


        :return: The fullurl of this Urladd.
        :rtype: bool
        """
        return self._fullurl

    @fullurl.setter
    def fullurl(self, fullurl: bool):
        """Sets the fullurl of this Urladd.


        :param fullurl: The fullurl of this Urladd.
        :type fullurl: bool
        """

        self._fullurl = fullurl

    @property
    def script(self) -> str:
        """Gets the script of this Urladd.


        :return: The script of this Urladd.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script: str):
        """Sets the script of this Urladd.


        :param script: The script of this Urladd.
        :type script: str
        """

        self._script = script

    @property
    def vidscript(self) -> str:
        """Gets the vidscript of this Urladd.


        :return: The vidscript of this Urladd.
        :rtype: str
        """
        return self._vidscript

    @vidscript.setter
    def vidscript(self, vidscript: str):
        """Sets the vidscript of this Urladd.


        :param vidscript: The vidscript of this Urladd.
        :type vidscript: str
        """

        self._vidscript = vidscript

    @property
    def host(self) -> str:
        """Gets the host of this Urladd.


        :return: The host of this Urladd.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this Urladd.


        :param host: The host of this Urladd.
        :type host: str
        """

        self._host = host

    @property
    def overwriteurl(self) -> bool:
        """Gets the overwriteurl of this Urladd.


        :return: The overwriteurl of this Urladd.
        :rtype: bool
        """
        return self._overwriteurl

    @overwriteurl.setter
    def overwriteurl(self, overwriteurl: bool):
        """Sets the overwriteurl of this Urladd.


        :param overwriteurl: The overwriteurl of this Urladd.
        :type overwriteurl: bool
        """

        self._overwriteurl = overwriteurl
