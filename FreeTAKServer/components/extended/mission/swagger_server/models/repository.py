# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.connection import Connection  # noqa: F401,E501
from swagger_server import util


class Repository(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, connection: Connection=None, enable: bool=None, num_db_connections: int=None, connection_pool_auto_size: bool=None, primary_key_batch_size: int=None, insertion_batch_size: int=None, archive: bool=None, iconset_dir: str=None, enable_callsign_audit: bool=None, contact_cache_max_clear_rate_seconds: int=None, db_timeout_ms: int=None, db_connection_max_lifetime_ms: int=None, db_connection_max_idle_ms: int=None, pool_scale_factor: int=None):  # noqa: E501
        """Repository - a model defined in Swagger

        :param connection: The connection of this Repository.  # noqa: E501
        :type connection: Connection
        :param enable: The enable of this Repository.  # noqa: E501
        :type enable: bool
        :param num_db_connections: The num_db_connections of this Repository.  # noqa: E501
        :type num_db_connections: int
        :param connection_pool_auto_size: The connection_pool_auto_size of this Repository.  # noqa: E501
        :type connection_pool_auto_size: bool
        :param primary_key_batch_size: The primary_key_batch_size of this Repository.  # noqa: E501
        :type primary_key_batch_size: int
        :param insertion_batch_size: The insertion_batch_size of this Repository.  # noqa: E501
        :type insertion_batch_size: int
        :param archive: The archive of this Repository.  # noqa: E501
        :type archive: bool
        :param iconset_dir: The iconset_dir of this Repository.  # noqa: E501
        :type iconset_dir: str
        :param enable_callsign_audit: The enable_callsign_audit of this Repository.  # noqa: E501
        :type enable_callsign_audit: bool
        :param contact_cache_max_clear_rate_seconds: The contact_cache_max_clear_rate_seconds of this Repository.  # noqa: E501
        :type contact_cache_max_clear_rate_seconds: int
        :param db_timeout_ms: The db_timeout_ms of this Repository.  # noqa: E501
        :type db_timeout_ms: int
        :param db_connection_max_lifetime_ms: The db_connection_max_lifetime_ms of this Repository.  # noqa: E501
        :type db_connection_max_lifetime_ms: int
        :param db_connection_max_idle_ms: The db_connection_max_idle_ms of this Repository.  # noqa: E501
        :type db_connection_max_idle_ms: int
        :param pool_scale_factor: The pool_scale_factor of this Repository.  # noqa: E501
        :type pool_scale_factor: int
        """
        self.swagger_types = {
            'connection': Connection,
            'enable': bool,
            'num_db_connections': int,
            'connection_pool_auto_size': bool,
            'primary_key_batch_size': int,
            'insertion_batch_size': int,
            'archive': bool,
            'iconset_dir': str,
            'enable_callsign_audit': bool,
            'contact_cache_max_clear_rate_seconds': int,
            'db_timeout_ms': int,
            'db_connection_max_lifetime_ms': int,
            'db_connection_max_idle_ms': int,
            'pool_scale_factor': int
        }

        self.attribute_map = {
            'connection': 'connection',
            'enable': 'enable',
            'num_db_connections': 'numDbConnections',
            'connection_pool_auto_size': 'connectionPoolAutoSize',
            'primary_key_batch_size': 'primaryKeyBatchSize',
            'insertion_batch_size': 'insertionBatchSize',
            'archive': 'archive',
            'iconset_dir': 'iconsetDir',
            'enable_callsign_audit': 'enableCallsignAudit',
            'contact_cache_max_clear_rate_seconds': 'contactCacheMaxClearRateSeconds',
            'db_timeout_ms': 'dbTimeoutMs',
            'db_connection_max_lifetime_ms': 'dbConnectionMaxLifetimeMs',
            'db_connection_max_idle_ms': 'dbConnectionMaxIdleMs',
            'pool_scale_factor': 'poolScaleFactor'
        }
        self._connection = connection
        self._enable = enable
        self._num_db_connections = num_db_connections
        self._connection_pool_auto_size = connection_pool_auto_size
        self._primary_key_batch_size = primary_key_batch_size
        self._insertion_batch_size = insertion_batch_size
        self._archive = archive
        self._iconset_dir = iconset_dir
        self._enable_callsign_audit = enable_callsign_audit
        self._contact_cache_max_clear_rate_seconds = contact_cache_max_clear_rate_seconds
        self._db_timeout_ms = db_timeout_ms
        self._db_connection_max_lifetime_ms = db_connection_max_lifetime_ms
        self._db_connection_max_idle_ms = db_connection_max_idle_ms
        self._pool_scale_factor = pool_scale_factor

    @classmethod
    def from_dict(cls, dikt) -> 'Repository':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Repository of this Repository.  # noqa: E501
        :rtype: Repository
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection(self) -> Connection:
        """Gets the connection of this Repository.


        :return: The connection of this Repository.
        :rtype: Connection
        """
        return self._connection

    @connection.setter
    def connection(self, connection: Connection):
        """Sets the connection of this Repository.


        :param connection: The connection of this Repository.
        :type connection: Connection
        """
        if connection is None:
            raise ValueError("Invalid value for `connection`, must not be `None`")  # noqa: E501

        self._connection = connection

    @property
    def enable(self) -> bool:
        """Gets the enable of this Repository.


        :return: The enable of this Repository.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable: bool):
        """Sets the enable of this Repository.


        :param enable: The enable of this Repository.
        :type enable: bool
        """

        self._enable = enable

    @property
    def num_db_connections(self) -> int:
        """Gets the num_db_connections of this Repository.


        :return: The num_db_connections of this Repository.
        :rtype: int
        """
        return self._num_db_connections

    @num_db_connections.setter
    def num_db_connections(self, num_db_connections: int):
        """Sets the num_db_connections of this Repository.


        :param num_db_connections: The num_db_connections of this Repository.
        :type num_db_connections: int
        """

        self._num_db_connections = num_db_connections

    @property
    def connection_pool_auto_size(self) -> bool:
        """Gets the connection_pool_auto_size of this Repository.


        :return: The connection_pool_auto_size of this Repository.
        :rtype: bool
        """
        return self._connection_pool_auto_size

    @connection_pool_auto_size.setter
    def connection_pool_auto_size(self, connection_pool_auto_size: bool):
        """Sets the connection_pool_auto_size of this Repository.


        :param connection_pool_auto_size: The connection_pool_auto_size of this Repository.
        :type connection_pool_auto_size: bool
        """

        self._connection_pool_auto_size = connection_pool_auto_size

    @property
    def primary_key_batch_size(self) -> int:
        """Gets the primary_key_batch_size of this Repository.


        :return: The primary_key_batch_size of this Repository.
        :rtype: int
        """
        return self._primary_key_batch_size

    @primary_key_batch_size.setter
    def primary_key_batch_size(self, primary_key_batch_size: int):
        """Sets the primary_key_batch_size of this Repository.


        :param primary_key_batch_size: The primary_key_batch_size of this Repository.
        :type primary_key_batch_size: int
        """

        self._primary_key_batch_size = primary_key_batch_size

    @property
    def insertion_batch_size(self) -> int:
        """Gets the insertion_batch_size of this Repository.


        :return: The insertion_batch_size of this Repository.
        :rtype: int
        """
        return self._insertion_batch_size

    @insertion_batch_size.setter
    def insertion_batch_size(self, insertion_batch_size: int):
        """Sets the insertion_batch_size of this Repository.


        :param insertion_batch_size: The insertion_batch_size of this Repository.
        :type insertion_batch_size: int
        """

        self._insertion_batch_size = insertion_batch_size

    @property
    def archive(self) -> bool:
        """Gets the archive of this Repository.


        :return: The archive of this Repository.
        :rtype: bool
        """
        return self._archive

    @archive.setter
    def archive(self, archive: bool):
        """Sets the archive of this Repository.


        :param archive: The archive of this Repository.
        :type archive: bool
        """

        self._archive = archive

    @property
    def iconset_dir(self) -> str:
        """Gets the iconset_dir of this Repository.


        :return: The iconset_dir of this Repository.
        :rtype: str
        """
        return self._iconset_dir

    @iconset_dir.setter
    def iconset_dir(self, iconset_dir: str):
        """Sets the iconset_dir of this Repository.


        :param iconset_dir: The iconset_dir of this Repository.
        :type iconset_dir: str
        """

        self._iconset_dir = iconset_dir

    @property
    def enable_callsign_audit(self) -> bool:
        """Gets the enable_callsign_audit of this Repository.


        :return: The enable_callsign_audit of this Repository.
        :rtype: bool
        """
        return self._enable_callsign_audit

    @enable_callsign_audit.setter
    def enable_callsign_audit(self, enable_callsign_audit: bool):
        """Sets the enable_callsign_audit of this Repository.


        :param enable_callsign_audit: The enable_callsign_audit of this Repository.
        :type enable_callsign_audit: bool
        """

        self._enable_callsign_audit = enable_callsign_audit

    @property
    def contact_cache_max_clear_rate_seconds(self) -> int:
        """Gets the contact_cache_max_clear_rate_seconds of this Repository.


        :return: The contact_cache_max_clear_rate_seconds of this Repository.
        :rtype: int
        """
        return self._contact_cache_max_clear_rate_seconds

    @contact_cache_max_clear_rate_seconds.setter
    def contact_cache_max_clear_rate_seconds(self, contact_cache_max_clear_rate_seconds: int):
        """Sets the contact_cache_max_clear_rate_seconds of this Repository.


        :param contact_cache_max_clear_rate_seconds: The contact_cache_max_clear_rate_seconds of this Repository.
        :type contact_cache_max_clear_rate_seconds: int
        """

        self._contact_cache_max_clear_rate_seconds = contact_cache_max_clear_rate_seconds

    @property
    def db_timeout_ms(self) -> int:
        """Gets the db_timeout_ms of this Repository.


        :return: The db_timeout_ms of this Repository.
        :rtype: int
        """
        return self._db_timeout_ms

    @db_timeout_ms.setter
    def db_timeout_ms(self, db_timeout_ms: int):
        """Sets the db_timeout_ms of this Repository.


        :param db_timeout_ms: The db_timeout_ms of this Repository.
        :type db_timeout_ms: int
        """

        self._db_timeout_ms = db_timeout_ms

    @property
    def db_connection_max_lifetime_ms(self) -> int:
        """Gets the db_connection_max_lifetime_ms of this Repository.


        :return: The db_connection_max_lifetime_ms of this Repository.
        :rtype: int
        """
        return self._db_connection_max_lifetime_ms

    @db_connection_max_lifetime_ms.setter
    def db_connection_max_lifetime_ms(self, db_connection_max_lifetime_ms: int):
        """Sets the db_connection_max_lifetime_ms of this Repository.


        :param db_connection_max_lifetime_ms: The db_connection_max_lifetime_ms of this Repository.
        :type db_connection_max_lifetime_ms: int
        """

        self._db_connection_max_lifetime_ms = db_connection_max_lifetime_ms

    @property
    def db_connection_max_idle_ms(self) -> int:
        """Gets the db_connection_max_idle_ms of this Repository.


        :return: The db_connection_max_idle_ms of this Repository.
        :rtype: int
        """
        return self._db_connection_max_idle_ms

    @db_connection_max_idle_ms.setter
    def db_connection_max_idle_ms(self, db_connection_max_idle_ms: int):
        """Sets the db_connection_max_idle_ms of this Repository.


        :param db_connection_max_idle_ms: The db_connection_max_idle_ms of this Repository.
        :type db_connection_max_idle_ms: int
        """

        self._db_connection_max_idle_ms = db_connection_max_idle_ms

    @property
    def pool_scale_factor(self) -> int:
        """Gets the pool_scale_factor of this Repository.


        :return: The pool_scale_factor of this Repository.
        :rtype: int
        """
        return self._pool_scale_factor

    @pool_scale_factor.setter
    def pool_scale_factor(self, pool_scale_factor: int):
        """Sets the pool_scale_factor of this Repository.


        :param pool_scale_factor: The pool_scale_factor of this Repository.
        :type pool_scale_factor: int
        """

        self._pool_scale_factor = pool_scale_factor
