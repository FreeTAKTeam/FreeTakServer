# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Announce(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, enable: bool=None, uid: str=None, group: str=None, port: int=None, interval: int=None, ip: str=None, svctype: str=None):  # noqa: E501
        """Announce - a model defined in Swagger

        :param enable: The enable of this Announce.  # noqa: E501
        :type enable: bool
        :param uid: The uid of this Announce.  # noqa: E501
        :type uid: str
        :param group: The group of this Announce.  # noqa: E501
        :type group: str
        :param port: The port of this Announce.  # noqa: E501
        :type port: int
        :param interval: The interval of this Announce.  # noqa: E501
        :type interval: int
        :param ip: The ip of this Announce.  # noqa: E501
        :type ip: str
        :param svctype: The svctype of this Announce.  # noqa: E501
        :type svctype: str
        """
        self.swagger_types = {
            'enable': bool,
            'uid': str,
            'group': str,
            'port': int,
            'interval': int,
            'ip': str,
            'svctype': str
        }

        self.attribute_map = {
            'enable': 'enable',
            'uid': 'uid',
            'group': 'group',
            'port': 'port',
            'interval': 'interval',
            'ip': 'ip',
            'svctype': 'svctype'
        }
        self._enable = enable
        self._uid = uid
        self._group = group
        self._port = port
        self._interval = interval
        self._ip = ip
        self._svctype = svctype

    @classmethod
    def from_dict(cls, dikt) -> 'Announce':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Announce of this Announce.  # noqa: E501
        :rtype: Announce
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable(self) -> bool:
        """Gets the enable of this Announce.


        :return: The enable of this Announce.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable: bool):
        """Sets the enable of this Announce.


        :param enable: The enable of this Announce.
        :type enable: bool
        """

        self._enable = enable

    @property
    def uid(self) -> str:
        """Gets the uid of this Announce.


        :return: The uid of this Announce.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this Announce.


        :param uid: The uid of this Announce.
        :type uid: str
        """

        self._uid = uid

    @property
    def group(self) -> str:
        """Gets the group of this Announce.


        :return: The group of this Announce.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group: str):
        """Sets the group of this Announce.


        :param group: The group of this Announce.
        :type group: str
        """

        self._group = group

    @property
    def port(self) -> int:
        """Gets the port of this Announce.


        :return: The port of this Announce.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this Announce.


        :param port: The port of this Announce.
        :type port: int
        """

        self._port = port

    @property
    def interval(self) -> int:
        """Gets the interval of this Announce.


        :return: The interval of this Announce.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval: int):
        """Sets the interval of this Announce.


        :param interval: The interval of this Announce.
        :type interval: int
        """

        self._interval = interval

    @property
    def ip(self) -> str:
        """Gets the ip of this Announce.


        :return: The ip of this Announce.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this Announce.


        :param ip: The ip of this Announce.
        :type ip: str
        """

        self._ip = ip

    @property
    def svctype(self) -> str:
        """Gets the svctype of this Announce.


        :return: The svctype of this Announce.
        :rtype: str
        """
        return self._svctype

    @svctype.setter
    def svctype(self, svctype: str):
        """Sets the svctype of this Announce.


        :param svctype: The svctype of this Announce.
        :type svctype: str
        """

        self._svctype = svctype
