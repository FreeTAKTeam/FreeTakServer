# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NameSubmitBody1(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, short: int=None, char: str=None, _int: int=None, long: int=None, _float: float=None, double: float=None, direct: bool=None, read_only: bool=None):  # noqa: E501
        """NameSubmitBody1 - a model defined in Swagger

        :param short: The short of this NameSubmitBody1.  # noqa: E501
        :type short: int
        :param char: The char of this NameSubmitBody1.  # noqa: E501
        :type char: str
        :param _int: The _int of this NameSubmitBody1.  # noqa: E501
        :type _int: int
        :param long: The long of this NameSubmitBody1.  # noqa: E501
        :type long: int
        :param _float: The _float of this NameSubmitBody1.  # noqa: E501
        :type _float: float
        :param double: The double of this NameSubmitBody1.  # noqa: E501
        :type double: float
        :param direct: The direct of this NameSubmitBody1.  # noqa: E501
        :type direct: bool
        :param read_only: The read_only of this NameSubmitBody1.  # noqa: E501
        :type read_only: bool
        """
        self.swagger_types = {
            'short': int,
            'char': str,
            '_int': int,
            'long': int,
            '_float': float,
            'double': float,
            'direct': bool,
            'read_only': bool
        }

        self.attribute_map = {
            'short': 'short',
            'char': 'char',
            '_int': 'int',
            'long': 'long',
            '_float': 'float',
            'double': 'double',
            'direct': 'direct',
            'read_only': 'readOnly'
        }
        self._short = short
        self._char = char
        self.__int = _int
        self._long = long
        self.__float = _float
        self._double = double
        self._direct = direct
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt) -> 'NameSubmitBody1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The name_submit_body_1 of this NameSubmitBody1.  # noqa: E501
        :rtype: NameSubmitBody1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def short(self) -> int:
        """Gets the short of this NameSubmitBody1.


        :return: The short of this NameSubmitBody1.
        :rtype: int
        """
        return self._short

    @short.setter
    def short(self, short: int):
        """Sets the short of this NameSubmitBody1.


        :param short: The short of this NameSubmitBody1.
        :type short: int
        """

        self._short = short

    @property
    def char(self) -> str:
        """Gets the char of this NameSubmitBody1.


        :return: The char of this NameSubmitBody1.
        :rtype: str
        """
        return self._char

    @char.setter
    def char(self, char: str):
        """Sets the char of this NameSubmitBody1.


        :param char: The char of this NameSubmitBody1.
        :type char: str
        """

        self._char = char

    @property
    def _int(self) -> int:
        """Gets the _int of this NameSubmitBody1.


        :return: The _int of this NameSubmitBody1.
        :rtype: int
        """
        return self.__int

    @_int.setter
    def _int(self, _int: int):
        """Sets the _int of this NameSubmitBody1.


        :param _int: The _int of this NameSubmitBody1.
        :type _int: int
        """

        self.__int = _int

    @property
    def long(self) -> int:
        """Gets the long of this NameSubmitBody1.


        :return: The long of this NameSubmitBody1.
        :rtype: int
        """
        return self._long

    @long.setter
    def long(self, long: int):
        """Sets the long of this NameSubmitBody1.


        :param long: The long of this NameSubmitBody1.
        :type long: int
        """

        self._long = long

    @property
    def _float(self) -> float:
        """Gets the _float of this NameSubmitBody1.


        :return: The _float of this NameSubmitBody1.
        :rtype: float
        """
        return self.__float

    @_float.setter
    def _float(self, _float: float):
        """Sets the _float of this NameSubmitBody1.


        :param _float: The _float of this NameSubmitBody1.
        :type _float: float
        """

        self.__float = _float

    @property
    def double(self) -> float:
        """Gets the double of this NameSubmitBody1.


        :return: The double of this NameSubmitBody1.
        :rtype: float
        """
        return self._double

    @double.setter
    def double(self, double: float):
        """Sets the double of this NameSubmitBody1.


        :param double: The double of this NameSubmitBody1.
        :type double: float
        """

        self._double = double

    @property
    def direct(self) -> bool:
        """Gets the direct of this NameSubmitBody1.


        :return: The direct of this NameSubmitBody1.
        :rtype: bool
        """
        return self._direct

    @direct.setter
    def direct(self, direct: bool):
        """Sets the direct of this NameSubmitBody1.


        :param direct: The direct of this NameSubmitBody1.
        :type direct: bool
        """

        self._direct = direct

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this NameSubmitBody1.


        :return: The read_only of this NameSubmitBody1.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this NameSubmitBody1.


        :param read_only: The read_only of this NameSubmitBody1.
        :type read_only: bool
        """

        self._read_only = read_only
