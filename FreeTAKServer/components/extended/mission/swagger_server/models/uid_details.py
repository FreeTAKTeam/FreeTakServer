# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.location import Location  # noqa: F401,E501
from swagger_server import util


class UidDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, callsign: str=None, title: str=None, iconset_path: str=None, color: str=None, attachments: List[str]=None, name: str=None, category: str=None, location: Location=None):  # noqa: E501
        """UidDetails - a model defined in Swagger

        :param type: The type of this UidDetails.  # noqa: E501
        :type type: str
        :param callsign: The callsign of this UidDetails.  # noqa: E501
        :type callsign: str
        :param title: The title of this UidDetails.  # noqa: E501
        :type title: str
        :param iconset_path: The iconset_path of this UidDetails.  # noqa: E501
        :type iconset_path: str
        :param color: The color of this UidDetails.  # noqa: E501
        :type color: str
        :param attachments: The attachments of this UidDetails.  # noqa: E501
        :type attachments: List[str]
        :param name: The name of this UidDetails.  # noqa: E501
        :type name: str
        :param category: The category of this UidDetails.  # noqa: E501
        :type category: str
        :param location: The location of this UidDetails.  # noqa: E501
        :type location: Location
        """
        self.swagger_types = {
            'type': str,
            'callsign': str,
            'title': str,
            'iconset_path': str,
            'color': str,
            'attachments': List[str],
            'name': str,
            'category': str,
            'location': Location
        }

        self.attribute_map = {
            'type': 'type',
            'callsign': 'callsign',
            'title': 'title',
            'iconset_path': 'iconsetPath',
            'color': 'color',
            'attachments': 'attachments',
            'name': 'name',
            'category': 'category',
            'location': 'location'
        }
        self._type = type
        self._callsign = callsign
        self._title = title
        self._iconset_path = iconset_path
        self._color = color
        self._attachments = attachments
        self._name = name
        self._category = category
        self._location = location

    @classmethod
    def from_dict(cls, dikt) -> 'UidDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UidDetails of this UidDetails.  # noqa: E501
        :rtype: UidDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this UidDetails.


        :return: The type of this UidDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this UidDetails.


        :param type: The type of this UidDetails.
        :type type: str
        """

        self._type = type

    @property
    def callsign(self) -> str:
        """Gets the callsign of this UidDetails.


        :return: The callsign of this UidDetails.
        :rtype: str
        """
        return self._callsign

    @callsign.setter
    def callsign(self, callsign: str):
        """Sets the callsign of this UidDetails.


        :param callsign: The callsign of this UidDetails.
        :type callsign: str
        """

        self._callsign = callsign

    @property
    def title(self) -> str:
        """Gets the title of this UidDetails.


        :return: The title of this UidDetails.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this UidDetails.


        :param title: The title of this UidDetails.
        :type title: str
        """

        self._title = title

    @property
    def iconset_path(self) -> str:
        """Gets the iconset_path of this UidDetails.


        :return: The iconset_path of this UidDetails.
        :rtype: str
        """
        return self._iconset_path

    @iconset_path.setter
    def iconset_path(self, iconset_path: str):
        """Sets the iconset_path of this UidDetails.


        :param iconset_path: The iconset_path of this UidDetails.
        :type iconset_path: str
        """

        self._iconset_path = iconset_path

    @property
    def color(self) -> str:
        """Gets the color of this UidDetails.


        :return: The color of this UidDetails.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this UidDetails.


        :param color: The color of this UidDetails.
        :type color: str
        """

        self._color = color

    @property
    def attachments(self) -> List[str]:
        """Gets the attachments of this UidDetails.


        :return: The attachments of this UidDetails.
        :rtype: List[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments: List[str]):
        """Sets the attachments of this UidDetails.


        :param attachments: The attachments of this UidDetails.
        :type attachments: List[str]
        """

        self._attachments = attachments

    @property
    def name(self) -> str:
        """Gets the name of this UidDetails.


        :return: The name of this UidDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UidDetails.


        :param name: The name of this UidDetails.
        :type name: str
        """

        self._name = name

    @property
    def category(self) -> str:
        """Gets the category of this UidDetails.


        :return: The category of this UidDetails.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this UidDetails.


        :param category: The category of this UidDetails.
        :type category: str
        """

        self._category = category

    @property
    def location(self) -> Location:
        """Gets the location of this UidDetails.


        :return: The location of this UidDetails.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location: Location):
        """Sets the location of this UidDetails.


        :param location: The location of this UidDetails.
        :type location: Location
        """

        self._location = location
