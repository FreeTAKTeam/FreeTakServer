# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Profile(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, active: bool=None, apply_on_enrollment: bool=None, apply_on_connect: bool=None, type: str=None, updated: datetime=None, tool: str=None, groups: List[str]=None):  # noqa: E501
        """Profile - a model defined in Swagger

        :param id: The id of this Profile.  # noqa: E501
        :type id: int
        :param name: The name of this Profile.  # noqa: E501
        :type name: str
        :param active: The active of this Profile.  # noqa: E501
        :type active: bool
        :param apply_on_enrollment: The apply_on_enrollment of this Profile.  # noqa: E501
        :type apply_on_enrollment: bool
        :param apply_on_connect: The apply_on_connect of this Profile.  # noqa: E501
        :type apply_on_connect: bool
        :param type: The type of this Profile.  # noqa: E501
        :type type: str
        :param updated: The updated of this Profile.  # noqa: E501
        :type updated: datetime
        :param tool: The tool of this Profile.  # noqa: E501
        :type tool: str
        :param groups: The groups of this Profile.  # noqa: E501
        :type groups: List[str]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'active': bool,
            'apply_on_enrollment': bool,
            'apply_on_connect': bool,
            'type': str,
            'updated': datetime,
            'tool': str,
            'groups': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'active': 'active',
            'apply_on_enrollment': 'applyOnEnrollment',
            'apply_on_connect': 'applyOnConnect',
            'type': 'type',
            'updated': 'updated',
            'tool': 'tool',
            'groups': 'groups'
        }
        self._id = id
        self._name = name
        self._active = active
        self._apply_on_enrollment = apply_on_enrollment
        self._apply_on_connect = apply_on_connect
        self._type = type
        self._updated = updated
        self._tool = tool
        self._groups = groups

    @classmethod
    def from_dict(cls, dikt) -> 'Profile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Profile of this Profile.  # noqa: E501
        :rtype: Profile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Profile.


        :return: The id of this Profile.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Profile.


        :param id: The id of this Profile.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Profile.


        :return: The name of this Profile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Profile.


        :param name: The name of this Profile.
        :type name: str
        """

        self._name = name

    @property
    def active(self) -> bool:
        """Gets the active of this Profile.


        :return: The active of this Profile.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Profile.


        :param active: The active of this Profile.
        :type active: bool
        """

        self._active = active

    @property
    def apply_on_enrollment(self) -> bool:
        """Gets the apply_on_enrollment of this Profile.


        :return: The apply_on_enrollment of this Profile.
        :rtype: bool
        """
        return self._apply_on_enrollment

    @apply_on_enrollment.setter
    def apply_on_enrollment(self, apply_on_enrollment: bool):
        """Sets the apply_on_enrollment of this Profile.


        :param apply_on_enrollment: The apply_on_enrollment of this Profile.
        :type apply_on_enrollment: bool
        """

        self._apply_on_enrollment = apply_on_enrollment

    @property
    def apply_on_connect(self) -> bool:
        """Gets the apply_on_connect of this Profile.


        :return: The apply_on_connect of this Profile.
        :rtype: bool
        """
        return self._apply_on_connect

    @apply_on_connect.setter
    def apply_on_connect(self, apply_on_connect: bool):
        """Sets the apply_on_connect of this Profile.


        :param apply_on_connect: The apply_on_connect of this Profile.
        :type apply_on_connect: bool
        """

        self._apply_on_connect = apply_on_connect

    @property
    def type(self) -> str:
        """Gets the type of this Profile.


        :return: The type of this Profile.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Profile.


        :param type: The type of this Profile.
        :type type: str
        """

        self._type = type

    @property
    def updated(self) -> datetime:
        """Gets the updated of this Profile.


        :return: The updated of this Profile.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated: datetime):
        """Sets the updated of this Profile.


        :param updated: The updated of this Profile.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def tool(self) -> str:
        """Gets the tool of this Profile.


        :return: The tool of this Profile.
        :rtype: str
        """
        return self._tool

    @tool.setter
    def tool(self, tool: str):
        """Sets the tool of this Profile.


        :param tool: The tool of this Profile.
        :type tool: str
        """

        self._tool = tool

    @property
    def groups(self) -> List[str]:
        """Gets the groups of this Profile.


        :return: The groups of this Profile.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups: List[str]):
        """Sets the groups of this Profile.


        :param groups: The groups of this Profile.
        :type groups: List[str]
        """

        self._groups = groups
