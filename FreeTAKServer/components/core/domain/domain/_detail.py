#######################################################
#
# detail.py
# Python implementation of the Class detail
# Generated by Enterprise Architect
# Created on(FTSProtocolObject): 11-Feb-2020 11:08:07 AM
# Original author: Corvo
#
#######################################################

from FreeTAKServer.components.core.abstract_component.cot_node import CoTNode
from FreeTAKServer.components.core.abstract_component.cot_property import CoTProperty


class detail(CoTNode):
    """An optional element used to hold CoT sub-schema. empty element"""

    __index = -1

    def __init__(self, configuration, model):
        super().__init__(self.__class__.__name__, configuration, model)

    @CoTProperty
    def marti(self):
        data = self.cot_attributes.get("marti", None)
        if data is None:
            raise AttributeError("attribute 'marti' doesnt exist")
        return data

    @marti.setter
    def marti(self, marti):
        self.cot_attributes["marti"] = marti

    @CoTProperty
    def link(self):
        data = self.cot_attributes.get("link", None)
        if data is None:
            raise AttributeError("attribute 'link' doesnt exist")
        return data

    @link.setter
    def link(self, link):
        self.cot_attributes["link"] = link

    @CoTProperty
    def contact(self):
        data = self.cot_attributes.get("contact", None)
        if data is None:
            raise AttributeError("attribute 'contact' doesnt exist")
        return data

    @contact.setter
    def contact(self, contact):
        self.cot_attributes["contact"] = contact

    @CoTProperty
    def emergency(self):
        data = self.cot_attributes.get("emergency", None)
        if data is None:
            raise AttributeError("attribute 'emergency' doesnt exist")
        return data

    @emergency.setter
    def emergency(self, emergency):
        self.cot_attributes["emergency"] = emergency

    @CoTProperty
    def remarks(self):
        data = self.cot_attributes.get("remarks", None)
        if data is None:
            raise AttributeError("attribute 'remarks' doesnt exist")
        return data

    @remarks.setter
    def remarks(self, remarks):
        self.cot_attributes["remarks"] = remarks
    
    @CoTProperty
    def mission(self):
        data = self.cot_attributes.get("mission", None)
        if data is None:
            raise AttributeError("attribute 'mission' doesnt exist")
        return data

    @mission.setter
    def mission(self, mission):
        self.cot_attributes["mission"] = mission
